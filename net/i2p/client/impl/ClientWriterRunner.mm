//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/ClientWriterRunner.java
//

#include "J2ObjC_source.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/impl/ClientWriterRunner.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/internal/PoisonI2CPMessage.h"
#include "net/i2p/util/I2PAppThread.h"

@interface NetI2pClientImplClientWriterRunner () {
 @public
  JavaIoOutputStream *_out_;
  NetI2pClientImplI2PSessionImpl *_session_;
  id<JavaUtilConcurrentBlockingQueue> _messagesToWrite_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pClientImplClientWriterRunner, _out_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(NetI2pClientImplClientWriterRunner, _session_, NetI2pClientImplI2PSessionImpl *)
J2OBJC_FIELD_SETTER(NetI2pClientImplClientWriterRunner, _messagesToWrite_, id<JavaUtilConcurrentBlockingQueue>)

inline JavaUtilConcurrentAtomicAtomicLong *NetI2pClientImplClientWriterRunner_get___Id(void);
static JavaUtilConcurrentAtomicAtomicLong *NetI2pClientImplClientWriterRunner___Id;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientImplClientWriterRunner, __Id, JavaUtilConcurrentAtomicAtomicLong *)

inline jint NetI2pClientImplClientWriterRunner_get_MAX_QUEUE_SIZE(void);
#define NetI2pClientImplClientWriterRunner_MAX_QUEUE_SIZE 32
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplClientWriterRunner, MAX_QUEUE_SIZE, jint)

inline jlong NetI2pClientImplClientWriterRunner_get_MAX_SEND_WAIT(void);
#define NetI2pClientImplClientWriterRunner_MAX_SEND_WAIT 10000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplClientWriterRunner, MAX_SEND_WAIT, jlong)

J2OBJC_INITIALIZED_DEFN(NetI2pClientImplClientWriterRunner)

@implementation NetI2pClientImplClientWriterRunner

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
        withNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  NetI2pClientImplClientWriterRunner_initWithJavaIoOutputStream_withNetI2pClientImplI2PSessionImpl_(self, outArg, session);
  return self;
}

- (void)startWriting {
  JavaLangThread *t = create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(self, JreStrcat("$J", @"I2CP Client Writer ", [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(NetI2pClientImplClientWriterRunner___Id)) incrementAndGet]), true);
  [t start];
}

- (void)addMessageWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)msg {
  @try {
    if (![((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_messagesToWrite_)) offerWithId:msg withLong:NetI2pClientImplClientWriterRunner_MAX_SEND_WAIT withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"Timed out waiting while write queue was full");
  }
  @catch (JavaLangInterruptedException *ie) {
    @throw create_NetI2pClientI2PSessionException_initWithNSString_withJavaLangThrowable_(@"Interrupted while write queue was full", ie);
  }
}

- (void)stopWriting {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_messagesToWrite_)) clear];
  @try {
    [_messagesToWrite_ putWithId:create_NetI2pInternalPoisonI2CPMessage_init()];
  }
  @catch (JavaLangInterruptedException *ie) {
  }
}

- (void)run {
  id<NetI2pDataI2cpI2CPMessage> msg;
  while (![((NetI2pClientImplI2PSessionImpl *) nil_chk(_session_)) isClosed]) {
    @try {
      msg = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_messagesToWrite_)) take];
    }
    @catch (JavaLangInterruptedException *ie) {
      continue;
    }
    if ([((id<NetI2pDataI2cpI2CPMessage>) nil_chk(msg)) getType] == NetI2pInternalPoisonI2CPMessage_MESSAGE_TYPE) break;
    @try {
      [msg writeMessageWithJavaIoOutputStream:_out_];
      if ([_messagesToWrite_ isEmpty]) [((JavaIoOutputStream *) nil_chk(_out_)) flush];
    }
    @catch (NetI2pDataI2cpI2CPMessageException *ime) {
      [_session_ propogateErrorWithNSString:@"Error writing out the message" withJavaLangThrowable:ime];
      [_session_ disconnect];
      break;
    }
    @catch (JavaIoIOException *ioe) {
      [_session_ propogateErrorWithNSString:@"Error writing out the message" withJavaLangThrowable:ioe];
      [_session_ disconnect];
      break;
    }
  }
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_messagesToWrite_)) clear];
}

- (void)dealloc {
  RELEASE_(_out_);
  RELEASE_(_session_);
  RELEASE_(_messagesToWrite_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:withNetI2pClientImplI2PSessionImpl:);
  methods[1].selector = @selector(startWriting);
  methods[2].selector = @selector(addMessageWithNetI2pDataI2cpI2CPMessage:);
  methods[3].selector = @selector(stopWriting);
  methods[4].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_out_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_session_", "LNetI2pClientImplI2PSessionImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messagesToWrite_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "__Id", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "MAX_QUEUE_SIZE", "I", .constantValue.asInt = NetI2pClientImplClientWriterRunner_MAX_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_SEND_WAIT", "J", .constantValue.asLong = NetI2pClientImplClientWriterRunner_MAX_SEND_WAIT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;LNetI2pClientImplI2PSessionImpl;", "addMessage", "LNetI2pDataI2cpI2CPMessage;", "LNetI2pClientI2PSessionException;", "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/data/i2cp/I2CPMessage;>;", &NetI2pClientImplClientWriterRunner___Id };
  static const J2ObjcClassInfo _NetI2pClientImplClientWriterRunner = { "ClientWriterRunner", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x0, 5, 6, -1, -1, -1, -1, -1 };
  return &_NetI2pClientImplClientWriterRunner;
}

+ (void)initialize {
  if (self == [NetI2pClientImplClientWriterRunner class]) {
    JreStrongAssignAndConsume(&NetI2pClientImplClientWriterRunner___Id, new_JavaUtilConcurrentAtomicAtomicLong_init());
    J2OBJC_SET_INITIALIZED(NetI2pClientImplClientWriterRunner)
  }
}

@end

void NetI2pClientImplClientWriterRunner_initWithJavaIoOutputStream_withNetI2pClientImplI2PSessionImpl_(NetI2pClientImplClientWriterRunner *self, JavaIoOutputStream *outArg, NetI2pClientImplI2PSessionImpl *session) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_out_, new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(outArg));
  JreStrongAssign(&self->_session_, session);
  JreStrongAssignAndConsume(&self->_messagesToWrite_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(NetI2pClientImplClientWriterRunner_MAX_QUEUE_SIZE));
}

NetI2pClientImplClientWriterRunner *new_NetI2pClientImplClientWriterRunner_initWithJavaIoOutputStream_withNetI2pClientImplI2PSessionImpl_(JavaIoOutputStream *outArg, NetI2pClientImplI2PSessionImpl *session) {
  J2OBJC_NEW_IMPL(NetI2pClientImplClientWriterRunner, initWithJavaIoOutputStream_withNetI2pClientImplI2PSessionImpl_, outArg, session)
}

NetI2pClientImplClientWriterRunner *create_NetI2pClientImplClientWriterRunner_initWithJavaIoOutputStream_withNetI2pClientImplI2PSessionImpl_(JavaIoOutputStream *outArg, NetI2pClientImplI2PSessionImpl *session) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplClientWriterRunner, initWithJavaIoOutputStream_withNetI2pClientImplI2PSessionImpl_, outArg, session)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplClientWriterRunner)
