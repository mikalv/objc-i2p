//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/MessageStatusMessageHandler.java
//

#include "J2ObjC_source.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/impl/HandlerImpl.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/client/impl/MessageStatusMessageHandler.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/data/i2cp/MessageStatusMessage.h"
#include "net/i2p/data/i2cp/ReceiveMessageBeginMessage.h"
#include "net/i2p/util/Log.h"

@implementation NetI2pClientImplMessageStatusMessageHandler

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientImplMessageStatusMessageHandler_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (void)handleMessageWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)message
                withNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Handle message ", message)];
  NetI2pDataI2cpMessageStatusMessage *msg = (NetI2pDataI2cpMessageStatusMessage *) cast_chk(message, [NetI2pDataI2cpMessageStatusMessage class]);
  jint status = [((NetI2pDataI2cpMessageStatusMessage *) nil_chk(msg)) getStatus];
  jlong id_ = [msg getMessageId];
  {
    NetI2pDataI2cpReceiveMessageBeginMessage *m;
    switch (status) {
      case NetI2pDataI2cpMessageStatusMessage_STATUS_AVAILABLE:
      m = create_NetI2pDataI2cpReceiveMessageBeginMessage_init();
      [m setMessageIdWithLong:id_];
      [m setSessionIdWithLong:[msg getSessionId]];
      @try {
        [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) sendMessageWithNetI2pDataI2cpI2CPMessage:m];
      }
      @catch (NetI2pClientI2PSessionException *ise) {
        [_log_ errorWithNSString:@"Error asking for the message" withJavaLangThrowable:ise];
      }
      return;
      case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_ACCEPTED:
      [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) receiveStatusWithInt:(jint) id_ withLong:[msg getNonce] withInt:status];
      return;
      default:
      if ([msg isSuccessful]) {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J", @"Message delivery succeeded for message ", id_)];
      }
      else {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$J", @"Message delivery FAILED (", status, @") for message ", id_)];
      }
      [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) receiveStatusWithInt:(jint) id_ withLong:[msg getNonce] withInt:status];
      return;
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(handleMessageWithNetI2pDataI2cpI2CPMessage:withNetI2pClientImplI2PSessionImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "handleMessage", "LNetI2pDataI2cpI2CPMessage;LNetI2pClientImplI2PSessionImpl;" };
  static const J2ObjcClassInfo _NetI2pClientImplMessageStatusMessageHandler = { "MessageStatusMessageHandler", "net.i2p.client.impl", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pClientImplMessageStatusMessageHandler;
}

@end

void NetI2pClientImplMessageStatusMessageHandler_initWithNetI2pI2PAppContext_(NetI2pClientImplMessageStatusMessageHandler *self, NetI2pI2PAppContext *context) {
  NetI2pClientImplHandlerImpl_initWithNetI2pI2PAppContext_withInt_(self, context, NetI2pDataI2cpMessageStatusMessage_MESSAGE_TYPE);
}

NetI2pClientImplMessageStatusMessageHandler *new_NetI2pClientImplMessageStatusMessageHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pClientImplMessageStatusMessageHandler, initWithNetI2pI2PAppContext_, context)
}

NetI2pClientImplMessageStatusMessageHandler *create_NetI2pClientImplMessageStatusMessageHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplMessageStatusMessageHandler, initWithNetI2pI2PAppContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplMessageStatusMessageHandler)
