//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/SessionIdleTimer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/Properties.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/impl/I2CPMessageProducer.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/client/impl/SessionIdleTimer.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pClientImplSessionIdleTimer () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
  NetI2pClientImplI2PSessionImpl *_session_;
  jboolean _reduceEnabled_;
  jint _reduceQuantity_;
  jlong _reduceTime_;
  jboolean _shutdownEnabled_;
  jlong _shutdownTime_;
  jlong _minimumTime_;
  jlong _lastActive_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pClientImplSessionIdleTimer, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pClientImplSessionIdleTimer, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pClientImplSessionIdleTimer, _session_, NetI2pClientImplI2PSessionImpl *)

inline jlong NetI2pClientImplSessionIdleTimer_get_DEFAULT_REDUCE_TIME(void);
#define NetI2pClientImplSessionIdleTimer_DEFAULT_REDUCE_TIME 1200000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplSessionIdleTimer, DEFAULT_REDUCE_TIME, jlong)

inline jlong NetI2pClientImplSessionIdleTimer_get_DEFAULT_CLOSE_TIME(void);
#define NetI2pClientImplSessionIdleTimer_DEFAULT_CLOSE_TIME 1800000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplSessionIdleTimer, DEFAULT_CLOSE_TIME, jlong)

@implementation NetI2pClientImplSessionIdleTimer

+ (jlong)MINIMUM_TIME {
  return NetI2pClientImplSessionIdleTimer_MINIMUM_TIME;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
         withNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session
                                withBoolean:(jboolean)reduce
                                withBoolean:(jboolean)shutdown {
  NetI2pClientImplSessionIdleTimer_initWithNetI2pI2PAppContext_withNetI2pClientImplI2PSessionImpl_withBoolean_withBoolean_(self, context, session, reduce, shutdown);
  return self;
}

- (void)timeReached {
  if ([((NetI2pClientImplI2PSessionImpl *) nil_chk(_session_)) isClosed]) return;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
  jlong lastActivity = [_session_ lastActivity];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$$", @"Fire idle timer, last activity: ", NetI2pDataDataHelper_formatDurationWithLong_(now - lastActivity), @" ago ")];
  jlong nextDelay = 0;
  if (_shutdownEnabled_ && now - lastActivity >= _shutdownTime_) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Closing on idle ", _session_)];
    [_session_ destroySession];
    return;
  }
  else if (lastActivity <= _lastActive_ && !_shutdownEnabled_) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Still idle, sleeping again ", _session_)];
    nextDelay = _reduceTime_;
  }
  else if (_reduceEnabled_ && now - lastActivity >= _reduceTime_) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Reducing quantity on idle ", _session_)];
    @try {
      [((NetI2pClientImplI2CPMessageProducer *) nil_chk([_session_ getProducer])) updateTunnelsWithNetI2pClientImplI2PSessionImpl:_session_ withInt:_reduceQuantity_];
    }
    @catch (NetI2pClientI2PSessionException *ise) {
      [_log_ errorWithNSString:JreStrcat("$@", @"bork idle reduction ", ise)];
    }
    [_session_ setReduced];
    _lastActive_ = lastActivity;
    if (_shutdownEnabled_) nextDelay = _shutdownTime_ - (now - lastActivity);
    else nextDelay = _reduceTime_;
  }
  else {
    nextDelay = _minimumTime_ - (now - lastActivity);
  }
  [((NetI2pUtilSimpleTimer2 *) nil_chk([_context_ simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:self withLong:nextDelay];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_session_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pClientImplI2PSessionImpl:withBoolean:withBoolean:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MINIMUM_TIME", "J", .constantValue.asLong = NetI2pClientImplSessionIdleTimer_MINIMUM_TIME, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_REDUCE_TIME", "J", .constantValue.asLong = NetI2pClientImplSessionIdleTimer_DEFAULT_REDUCE_TIME, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_CLOSE_TIME", "J", .constantValue.asLong = NetI2pClientImplSessionIdleTimer_DEFAULT_CLOSE_TIME, 0x1a, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_session_", "LNetI2pClientImplI2PSessionImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_reduceEnabled_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_reduceQuantity_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_reduceTime_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_shutdownEnabled_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_shutdownTime_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_minimumTime_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastActive_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pClientImplI2PSessionImpl;ZZ" };
  static const J2ObjcClassInfo _NetI2pClientImplSessionIdleTimer = { "SessionIdleTimer", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x0, 2, 13, -1, -1, -1, -1, -1 };
  return &_NetI2pClientImplSessionIdleTimer;
}

@end

void NetI2pClientImplSessionIdleTimer_initWithNetI2pI2PAppContext_withNetI2pClientImplI2PSessionImpl_withBoolean_withBoolean_(NetI2pClientImplSessionIdleTimer *self, NetI2pI2PAppContext *context, NetI2pClientImplI2PSessionImpl *session, jboolean reduce, jboolean shutdown) {
  NSObject_init(self);
  if (!(reduce || shutdown)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"At least one must be enabled");
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pClientImplSessionIdleTimer_class_()]);
  JreStrongAssign(&self->_session_, session);
  JavaUtilProperties *props = [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) getOptions];
  jlong minimumTime = JavaLangLong_MAX_VALUE;
  jlong reduceTime = 0;
  jlong shutdownTime = 0;
  jint reduceQuantity = 0;
  if (reduce) {
    reduceQuantity = 1;
    NSString *p = [((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:@"i2cp.reduceQuantity"];
    if (p != nil) {
      @try {
        reduceQuantity = JavaLangMath_maxWithInt_withInt_(JavaLangInteger_parseIntWithNSString_(p), 1);
      }
      @catch (JavaLangNumberFormatException *nfe) {
      }
    }
    reduceTime = NetI2pClientImplSessionIdleTimer_DEFAULT_REDUCE_TIME;
    p = [props getPropertyWithNSString:@"i2cp.reduceIdleTime"];
    if (p != nil) {
      @try {
        reduceTime = JavaLangMath_maxWithLong_withLong_(JavaLangLong_parseLongWithNSString_(p), NetI2pClientImplSessionIdleTimer_MINIMUM_TIME);
      }
      @catch (JavaLangNumberFormatException *nfe) {
      }
    }
    minimumTime = reduceTime;
  }
  if (shutdown) {
    shutdownTime = NetI2pClientImplSessionIdleTimer_DEFAULT_CLOSE_TIME;
    NSString *p = [((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:@"i2cp.closeIdleTime"];
    if (p != nil) {
      @try {
        shutdownTime = JavaLangMath_maxWithLong_withLong_(JavaLangLong_parseLongWithNSString_(p), NetI2pClientImplSessionIdleTimer_MINIMUM_TIME);
      }
      @catch (JavaLangNumberFormatException *nfe) {
      }
    }
    minimumTime = JavaLangMath_minWithLong_withLong_(minimumTime, shutdownTime);
    if (reduce && shutdownTime <= reduceTime) reduce = false;
  }
  self->_reduceEnabled_ = reduce;
  self->_reduceQuantity_ = reduceQuantity;
  self->_reduceTime_ = reduceTime;
  self->_shutdownEnabled_ = shutdown;
  self->_shutdownTime_ = shutdownTime;
  self->_minimumTime_ = minimumTime;
}

NetI2pClientImplSessionIdleTimer *new_NetI2pClientImplSessionIdleTimer_initWithNetI2pI2PAppContext_withNetI2pClientImplI2PSessionImpl_withBoolean_withBoolean_(NetI2pI2PAppContext *context, NetI2pClientImplI2PSessionImpl *session, jboolean reduce, jboolean shutdown) {
  J2OBJC_NEW_IMPL(NetI2pClientImplSessionIdleTimer, initWithNetI2pI2PAppContext_withNetI2pClientImplI2PSessionImpl_withBoolean_withBoolean_, context, session, reduce, shutdown)
}

NetI2pClientImplSessionIdleTimer *create_NetI2pClientImplSessionIdleTimer_initWithNetI2pI2PAppContext_withNetI2pClientImplI2PSessionImpl_withBoolean_withBoolean_(NetI2pI2PAppContext *context, NetI2pClientImplI2PSessionImpl *session, jboolean reduce, jboolean shutdown) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplSessionIdleTimer, initWithNetI2pI2PAppContext_withNetI2pClientImplI2PSessionImpl_withBoolean_withBoolean_, context, session, reduce, shutdown)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplSessionIdleTimer)
