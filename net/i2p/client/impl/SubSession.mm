//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/SubSession.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Properties.h"
#include "net/i2p/client/I2PSession.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/I2PSessionListener.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/client/impl/I2PSessionMuxedImpl.h"
#include "net/i2p/client/impl/SubSession.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/i2cp/CreateLeaseSetMessage.h"
#include "net/i2p/data/i2cp/CreateSessionMessage.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/util/I2PAppThread.h"

@interface NetI2pClientImplSubSession () {
 @public
  NetI2pClientImplI2PSessionMuxedImpl *_primary_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pClientImplSubSession, _primary_, NetI2pClientImplI2PSessionMuxedImpl *)

@implementation NetI2pClientImplSubSession

- (instancetype)initWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)primary
                         withJavaIoInputStream:(JavaIoInputStream *)destKeyStream
                        withJavaUtilProperties:(JavaUtilProperties *)options {
  NetI2pClientImplSubSession_initWithNetI2pClientI2PSession_withJavaIoInputStream_withJavaUtilProperties_(self, primary, destKeyStream, options);
  return self;
}

- (id<NetI2pClientI2PSession>)addSubsessionWithJavaIoInputStream:(JavaIoInputStream *)destKeyStream
                                          withJavaUtilProperties:(JavaUtilProperties *)opts {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)removeSubsessionWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session {
}

- (id<JavaUtilList>)getSubsessions {
  return JavaUtilCollections_emptyList();
}

- (void)updateOptionsWithJavaUtilProperties:(JavaUtilProperties *)options {
}

- (JavaUtilProperties *)getPrimaryOptions {
  return [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) getOptions];
}

- (void)connect {
  @synchronized(_stateLock_) {
    if (_state_ != JreLoadEnum(NetI2pClientImplI2PSessionImpl_State, OPEN)) {
      [self changeStateWithNetI2pClientImplI2PSessionImpl_State:JreLoadEnum(NetI2pClientImplI2PSessionImpl_State, OPENING)];
    }
  }
  jboolean success = false;
  @try {
    [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) connect];
    jint waitcount = 0;
    while (JreLoadVolatileId(&_leaseSet_) == nil) {
      if (waitcount++ > 5 * 60) {
        @throw create_JavaIoIOException_initWithNSString_(@"No tunnels built after waiting 5 minutes. Your network connection may be down, or there is severe network congestion.");
      }
      @synchronized(_leaseSetWait_) {
        [nil_chk(_leaseSetWait_) java_waitWithLong:1000];
      }
    }
    @synchronized(_stateLock_) {
      if (_state_ != JreLoadEnum(NetI2pClientImplI2PSessionImpl_State, OPEN)) {
        JavaLangThread *notifier = create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(_availabilityNotifier_, JreStrcat("$$", @"ClientNotifier ", [self getPrefix]), true);
        [notifier start];
        [self changeStateWithNetI2pClientImplI2PSessionImpl_State:JreLoadEnum(NetI2pClientImplI2PSessionImpl_State, OPEN)];
      }
    }
    success = true;
  }
  @catch (JavaLangInterruptedException *ie) {
    @throw create_NetI2pClientI2PSessionException_initWithNSString_withJavaLangThrowable_(@"Interrupted", ie);
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_NetI2pClientI2PSessionException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$CI", [self getPrefix], @"Cannot connect to the router on ", _hostname_, ':', _portNum_), ioe);
  }
  @finally {
    if (!success) {
      [((NetI2pClientImplI2PSessionImpl_AvailabilityNotifier *) nil_chk(_availabilityNotifier_)) stopNotifying];
      [self changeStateWithNetI2pClientImplI2PSessionImpl_State:JreLoadEnum(NetI2pClientImplI2PSessionImpl_State, CLOSED)];
    }
  }
}

- (jboolean)isClosed {
  return [super isClosed] || [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) isClosed];
}

- (void)sendMessageWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)message {
  if ([self isClosed] && [((id<NetI2pDataI2cpI2CPMessage>) nil_chk(message)) getType] != NetI2pDataI2cpCreateSessionMessage_MESSAGE_TYPE && [message getType] != NetI2pDataI2cpCreateLeaseSetMessage_MESSAGE_TYPE) @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"Already closed");
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) sendMessage_uncheckedWithNetI2pDataI2cpI2CPMessage:message];
}

- (void)sendMessage_uncheckedWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)message {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) sendMessage_uncheckedWithNetI2pDataI2cpI2CPMessage:message];
}

- (void)propogateErrorWithNSString:(NSString *)msg
             withJavaLangThrowable:(JavaLangThrowable *)error {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) propogateErrorWithNSString:msg withJavaLangThrowable:error];
  if (_sessionListener_ != nil) [_sessionListener_ errorOccurredWithNetI2pClientI2PSession:self withNSString:msg withJavaLangThrowable:error];
}

- (void)destroySession {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) destroySession];
  if (_availabilityNotifier_ != nil) [_availabilityNotifier_ stopNotifying];
  if (_sessionListener_ != nil) [_sessionListener_ disconnectedWithNetI2pClientI2PSession:self];
  [self changeStateWithNetI2pClientImplI2PSessionImpl_State:JreLoadEnum(NetI2pClientImplI2PSessionImpl_State, CLOSED)];
}

- (void)disconnect {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) disconnect];
}

- (jboolean)reconnect {
  return [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) reconnect];
}

- (void)destReceivedWithNetI2pDataDestination:(NetI2pDataDestination *)d {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) destReceivedWithNetI2pDataDestination:d];
}

- (void)destLookupFailedWithNetI2pDataHash:(NetI2pDataHash *)h {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) destLookupFailedWithNetI2pDataHash:h];
}

- (void)destReceivedWithLong:(jlong)nonce
   withNetI2pDataDestination:(NetI2pDataDestination *)d {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) destReceivedWithLong:nonce withNetI2pDataDestination:d];
}

- (void)destLookupFailedWithLong:(jlong)nonce {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) destLookupFailedWithLong:nonce];
}

- (void)bwReceivedWithIntArray:(IOSIntArray *)i {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) bwReceivedWithIntArray:i];
}

- (NetI2pDataDestination *)lookupDestWithNetI2pDataHash:(NetI2pDataHash *)h {
  return [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) lookupDestWithNetI2pDataHash:h];
}

- (NetI2pDataDestination *)lookupDestWithNetI2pDataHash:(NetI2pDataHash *)h
                                               withLong:(jlong)maxWait {
  return [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) lookupDestWithNetI2pDataHash:h withLong:maxWait];
}

- (NetI2pDataDestination *)lookupDestWithNSString:(NSString *)name {
  return [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) lookupDestWithNSString:name];
}

- (NetI2pDataDestination *)lookupDestWithNSString:(NSString *)name
                                         withLong:(jlong)maxWait {
  return [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) lookupDestWithNSString:name withLong:maxWait];
}

- (IOSIntArray *)bandwidthLimits {
  return [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) bandwidthLimits];
}

- (void)updateActivity {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) updateActivity];
}

- (jlong)lastActivity {
  return [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) lastActivity];
}

- (void)setReduced {
  [((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(_primary_)) setReduced];
}

- (void)dealloc {
  RELEASE_(_primary_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNetI2pClientI2PSession;", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 10, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 22, 17, 1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 22, 23, 1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 22, 24, 1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 22, 25, 1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pClientI2PSession:withJavaIoInputStream:withJavaUtilProperties:);
  methods[1].selector = @selector(addSubsessionWithJavaIoInputStream:withJavaUtilProperties:);
  methods[2].selector = @selector(removeSubsessionWithNetI2pClientI2PSession:);
  methods[3].selector = @selector(getSubsessions);
  methods[4].selector = @selector(updateOptionsWithJavaUtilProperties:);
  methods[5].selector = @selector(getPrimaryOptions);
  methods[6].selector = @selector(connect);
  methods[7].selector = @selector(isClosed);
  methods[8].selector = @selector(sendMessageWithNetI2pDataI2cpI2CPMessage:);
  methods[9].selector = @selector(sendMessage_uncheckedWithNetI2pDataI2cpI2CPMessage:);
  methods[10].selector = @selector(propogateErrorWithNSString:withJavaLangThrowable:);
  methods[11].selector = @selector(destroySession);
  methods[12].selector = @selector(disconnect);
  methods[13].selector = @selector(reconnect);
  methods[14].selector = @selector(destReceivedWithNetI2pDataDestination:);
  methods[15].selector = @selector(destLookupFailedWithNetI2pDataHash:);
  methods[16].selector = @selector(destReceivedWithLong:withNetI2pDataDestination:);
  methods[17].selector = @selector(destLookupFailedWithLong:);
  methods[18].selector = @selector(bwReceivedWithIntArray:);
  methods[19].selector = @selector(lookupDestWithNetI2pDataHash:);
  methods[20].selector = @selector(lookupDestWithNetI2pDataHash:withLong:);
  methods[21].selector = @selector(lookupDestWithNSString:);
  methods[22].selector = @selector(lookupDestWithNSString:withLong:);
  methods[23].selector = @selector(bandwidthLimits);
  methods[24].selector = @selector(updateActivity);
  methods[25].selector = @selector(lastActivity);
  methods[26].selector = @selector(setReduced);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_primary_", "LNetI2pClientImplI2PSessionMuxedImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pClientI2PSession;LJavaIoInputStream;LJavaUtilProperties;", "LNetI2pClientI2PSessionException;", "addSubsession", "LJavaIoInputStream;LJavaUtilProperties;", "removeSubsession", "LNetI2pClientI2PSession;", "()Ljava/util/List<Lnet/i2p/client/I2PSession;>;", "updateOptions", "LJavaUtilProperties;", "sendMessage", "LNetI2pDataI2cpI2CPMessage;", "sendMessage_unchecked", "propogateError", "LNSString;LJavaLangThrowable;", "destReceived", "LNetI2pDataDestination;", "destLookupFailed", "LNetI2pDataHash;", "JLNetI2pDataDestination;", "J", "bwReceived", "[I", "lookupDest", "LNetI2pDataHash;J", "LNSString;", "LNSString;J" };
  static const J2ObjcClassInfo _NetI2pClientImplSubSession = { "SubSession", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x0, 27, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pClientImplSubSession;
}

@end

void NetI2pClientImplSubSession_initWithNetI2pClientI2PSession_withJavaIoInputStream_withJavaUtilProperties_(NetI2pClientImplSubSession *self, id<NetI2pClientI2PSession> primary, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  NetI2pClientImplI2PSessionMuxedImpl_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(self, (NetI2pClientImplI2PSessionMuxedImpl *) cast_chk(primary, [NetI2pClientImplI2PSessionMuxedImpl class]), destKeyStream, options);
  JreStrongAssign(&self->_primary_, (NetI2pClientImplI2PSessionMuxedImpl *) cast_chk(primary, [NetI2pClientImplI2PSessionMuxedImpl class]));
  if (![((NetI2pDataPrivateKey *) nil_chk([self getDecryptionKey])) isEqual:[((NetI2pClientImplI2PSessionMuxedImpl *) nil_chk(self->_primary_)) getDecryptionKey]]) @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"encryption key mismatch");
  if ([((NetI2pDataSigningPrivateKey *) nil_chk([self getPrivateKey])) isEqual:[self->_primary_ getPrivateKey]]) @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"signing key must differ");
}

NetI2pClientImplSubSession *new_NetI2pClientImplSubSession_initWithNetI2pClientI2PSession_withJavaIoInputStream_withJavaUtilProperties_(id<NetI2pClientI2PSession> primary, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_NEW_IMPL(NetI2pClientImplSubSession, initWithNetI2pClientI2PSession_withJavaIoInputStream_withJavaUtilProperties_, primary, destKeyStream, options)
}

NetI2pClientImplSubSession *create_NetI2pClientImplSubSession_initWithNetI2pClientI2PSession_withJavaIoInputStream_withJavaUtilProperties_(id<NetI2pClientI2PSession> primary, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplSubSession, initWithNetI2pClientI2PSession_withJavaIoInputStream_withJavaUtilProperties_, primary, destKeyStream, options)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplSubSession)
