//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/MessagePayloadMessageHandler.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/impl/HandlerImpl.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/client/impl/MessagePayloadMessageHandler.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Payload.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/data/i2cp/MessagePayloadMessage.h"
#include "net/i2p/data/i2cp/ReceiveMessageEndMessage.h"
#include "net/i2p/util/Log.h"

@interface NetI2pClientImplMessagePayloadMessageHandler ()

- (NetI2pDataPayload *)decryptPayloadWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg
                                          withNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session;

@end

__attribute__((unused)) static NetI2pDataPayload *NetI2pClientImplMessagePayloadMessageHandler_decryptPayloadWithNetI2pDataI2cpMessagePayloadMessage_withNetI2pClientImplI2PSessionImpl_(NetI2pClientImplMessagePayloadMessageHandler *self, NetI2pDataI2cpMessagePayloadMessage *msg, NetI2pClientImplI2PSessionImpl *session);

@implementation NetI2pClientImplMessagePayloadMessageHandler

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientImplMessagePayloadMessageHandler_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (void)handleMessageWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)message
                withNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"Handle message ", message, @" for session ", session)];
  @try {
    NetI2pDataI2cpMessagePayloadMessage *msg = (NetI2pDataI2cpMessagePayloadMessage *) cast_chk(message, [NetI2pDataI2cpMessagePayloadMessage class]);
    jlong id_ = [((NetI2pDataI2cpMessagePayloadMessage *) nil_chk(msg)) getMessageId];
    NetI2pClientImplMessagePayloadMessageHandler_decryptPayloadWithNetI2pDataI2cpMessagePayloadMessage_withNetI2pClientImplI2PSessionImpl_(self, msg, session);
    [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) addNewMessageWithNetI2pDataI2cpMessagePayloadMessage:msg];
    if (![session getFastReceive]) {
      NetI2pDataI2cpReceiveMessageEndMessage *m = create_NetI2pDataI2cpReceiveMessageEndMessage_init();
      [m setMessageIdWithLong:id_];
      [m setSessionIdWithLong:[msg getSessionId]];
      [session sendMessageWithNetI2pDataI2cpI2CPMessage:m];
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) propogateErrorWithNSString:@"Error handling a new payload message" withJavaLangThrowable:dfe];
  }
  @catch (NetI2pClientI2PSessionException *ise) {
    [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) propogateErrorWithNSString:@"Error handling a new payload message" withJavaLangThrowable:ise];
  }
}

- (NetI2pDataPayload *)decryptPayloadWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg
                                          withNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  return NetI2pClientImplMessagePayloadMessageHandler_decryptPayloadWithNetI2pDataI2cpMessagePayloadMessage_withNetI2pClientImplI2PSessionImpl_(self, msg, session);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPayload;", 0x2, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(handleMessageWithNetI2pDataI2cpI2CPMessage:withNetI2pClientImplI2PSessionImpl:);
  methods[2].selector = @selector(decryptPayloadWithNetI2pDataI2cpMessagePayloadMessage:withNetI2pClientImplI2PSessionImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "handleMessage", "LNetI2pDataI2cpI2CPMessage;LNetI2pClientImplI2PSessionImpl;", "decryptPayload", "LNetI2pDataI2cpMessagePayloadMessage;LNetI2pClientImplI2PSessionImpl;", "LNetI2pDataDataFormatException;" };
  static const J2ObjcClassInfo _NetI2pClientImplMessagePayloadMessageHandler = { "MessagePayloadMessageHandler", "net.i2p.client.impl", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pClientImplMessagePayloadMessageHandler;
}

@end

void NetI2pClientImplMessagePayloadMessageHandler_initWithNetI2pI2PAppContext_(NetI2pClientImplMessagePayloadMessageHandler *self, NetI2pI2PAppContext *context) {
  NetI2pClientImplHandlerImpl_initWithNetI2pI2PAppContext_withInt_(self, context, NetI2pDataI2cpMessagePayloadMessage_MESSAGE_TYPE);
}

NetI2pClientImplMessagePayloadMessageHandler *new_NetI2pClientImplMessagePayloadMessageHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pClientImplMessagePayloadMessageHandler, initWithNetI2pI2PAppContext_, context)
}

NetI2pClientImplMessagePayloadMessageHandler *create_NetI2pClientImplMessagePayloadMessageHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplMessagePayloadMessageHandler, initWithNetI2pI2PAppContext_, context)
}

NetI2pDataPayload *NetI2pClientImplMessagePayloadMessageHandler_decryptPayloadWithNetI2pDataI2cpMessagePayloadMessage_withNetI2pClientImplI2PSessionImpl_(NetI2pClientImplMessagePayloadMessageHandler *self, NetI2pDataI2cpMessagePayloadMessage *msg, NetI2pClientImplI2PSessionImpl *session) {
  NetI2pDataPayload *payload = [((NetI2pDataI2cpMessagePayloadMessage *) nil_chk(msg)) getPayload];
  [((NetI2pDataPayload *) nil_chk(payload)) setUnencryptedDataWithByteArray:[payload getEncryptedData]];
  return payload;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplMessagePayloadMessageHandler)
