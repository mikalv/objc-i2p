//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/HandlerImpl.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/impl/HandlerImpl.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pClientImplHandlerImpl () {
 @public
  jint _type_;
}

@end

@implementation NetI2pClientImplHandlerImpl

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)type {
  NetI2pClientImplHandlerImpl_initWithNetI2pI2PAppContext_withInt_(self, context, type);
  return self;
}

- (jint)getType {
  return _type_;
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withInt:);
  methods[1].selector = @selector(getType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_type_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;I" };
  static const J2ObjcClassInfo _NetI2pClientImplHandlerImpl = { "HandlerImpl", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x400, 2, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pClientImplHandlerImpl;
}

@end

void NetI2pClientImplHandlerImpl_initWithNetI2pI2PAppContext_withInt_(NetI2pClientImplHandlerImpl *self, NetI2pI2PAppContext *context, jint type) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  self->_type_ = type;
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:[self java_getClass]]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplHandlerImpl)
