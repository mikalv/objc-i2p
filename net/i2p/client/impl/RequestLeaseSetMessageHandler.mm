//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/RequestLeaseSetMessageHandler.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/security/GeneralSecurityException.h"
#include "java/util/Date.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/impl/HandlerImpl.h"
#include "net/i2p/client/impl/I2CPMessageProducer.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/client/impl/RequestLeaseSetMessageHandler.h"
#include "net/i2p/client/impl/SubSession.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/Lease.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/SimpleDataStructure.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/data/i2cp/RequestLeaseSetMessage.h"
#include "net/i2p/util/KeyRing.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pClientImplRequestLeaseSetMessageHandler () {
 @public
  id<JavaUtilMap> _existingLeaseSets_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pClientImplRequestLeaseSetMessageHandler, _existingLeaseSets_, id<JavaUtilMap>)

@interface NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo : NSObject {
 @public
  NetI2pDataPublicKey *_pubKey_;
  NetI2pDataPrivateKey *_privKey_;
  NetI2pDataSigningPublicKey *_signingPubKey_;
  NetI2pDataSigningPrivateKey *_signingPrivKey_;
}

- (instancetype)initWithNetI2pDataDestination:(NetI2pDataDestination *)dest;

- (instancetype)initWithNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)privKey
             withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)signingPrivKey;

- (instancetype)initWithNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)privKey
                   withNetI2pDataDestination:(NetI2pDataDestination *)dest;

- (NetI2pDataPublicKey *)getPublicKey;

- (NetI2pDataPrivateKey *)getPrivateKey;

- (NetI2pDataSigningPublicKey *)getSigningPublicKey;

- (NetI2pDataSigningPrivateKey *)getSigningPrivateKey;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo)

J2OBJC_FIELD_SETTER(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, _pubKey_, NetI2pDataPublicKey *)
J2OBJC_FIELD_SETTER(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, _privKey_, NetI2pDataPrivateKey *)
J2OBJC_FIELD_SETTER(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, _signingPubKey_, NetI2pDataSigningPublicKey *)
J2OBJC_FIELD_SETTER(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, _signingPrivKey_, NetI2pDataSigningPrivateKey *)

__attribute__((unused)) static void NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataDestination_(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *self, NetI2pDataDestination *dest);

__attribute__((unused)) static NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *new_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataDestination_(NetI2pDataDestination *dest) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *create_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataDestination_(NetI2pDataDestination *dest);

__attribute__((unused)) static void NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *self, NetI2pDataPrivateKey *privKey, NetI2pDataSigningPrivateKey *signingPrivKey);

__attribute__((unused)) static NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *new_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pDataPrivateKey *privKey, NetI2pDataSigningPrivateKey *signingPrivKey) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *create_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pDataPrivateKey *privKey, NetI2pDataSigningPrivateKey *signingPrivKey);

__attribute__((unused)) static void NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataDestination_(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *self, NetI2pDataPrivateKey *privKey, NetI2pDataDestination *dest);

__attribute__((unused)) static NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *new_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataDestination_(NetI2pDataPrivateKey *privKey, NetI2pDataDestination *dest) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *create_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataDestination_(NetI2pDataPrivateKey *privKey, NetI2pDataDestination *dest);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo)

@implementation NetI2pClientImplRequestLeaseSetMessageHandler

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientImplRequestLeaseSetMessageHandler_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)messageType {
  NetI2pClientImplRequestLeaseSetMessageHandler_initWithNetI2pI2PAppContext_withInt_(self, context, messageType);
  return self;
}

- (void)handleMessageWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)message
                withNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Handle message ", message)];
  NetI2pDataI2cpRequestLeaseSetMessage *msg = (NetI2pDataI2cpRequestLeaseSetMessage *) cast_chk(message, [NetI2pDataI2cpRequestLeaseSetMessage class]);
  NetI2pDataLeaseSet *leaseSet = create_NetI2pDataLeaseSet_init();
  for (jint i = 0; i < [((NetI2pDataI2cpRequestLeaseSetMessage *) nil_chk(msg)) getEndpoints]; i++) {
    NetI2pDataLease *lease = create_NetI2pDataLease_init();
    [lease setGatewayWithNetI2pDataHash:[msg getRouterWithInt:i]];
    [lease setTunnelIdWithNetI2pDataTunnelId:[msg getTunnelIdWithInt:i]];
    [lease setEndDateWithJavaUtilDate:[msg getEndDate]];
    [leaseSet addLeaseWithNetI2pDataLease:lease];
  }
  [self signLeaseSetWithNetI2pDataLeaseSet:leaseSet withNetI2pClientImplI2PSessionImpl:session];
}

- (void)signLeaseSetWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)leaseSet
        withNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  @synchronized(self) {
    NetI2pDataDestination *dest = [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) getMyDestination];
    [((NetI2pDataLeaseSet *) nil_chk(leaseSet)) setDestinationWithNetI2pDataDestination:dest];
    NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *li = [((id<JavaUtilMap>) nil_chk(_existingLeaseSets_)) getWithId:dest];
    if (li == nil) {
      NSString *spk = [((JavaUtilProperties *) nil_chk([session getOptions])) getPropertyWithNSString:@"i2cp.leaseSetPrivateKey"];
      NSString *sspk = [((JavaUtilProperties *) nil_chk([session getOptions])) getPropertyWithNSString:@"i2cp.leaseSetSigningPrivateKey"];
      NetI2pDataPrivateKey *privKey = nil;
      NetI2pDataSigningPrivateKey *signingPrivKey = nil;
      if (spk != nil && sspk != nil) {
        jboolean useOldKeys = true;
        jint colon = [sspk java_indexOf:':'];
        NetI2pCryptoSigType *type = [((NetI2pDataDestination *) nil_chk(dest)) getSigType];
        if (colon > 0) {
          NSString *stype = [sspk java_substring:0 endIndex:colon];
          NetI2pCryptoSigType *t = NetI2pCryptoSigType_parseSigTypeWithNSString_(stype);
          if (t == type) sspk = [sspk java_substring:colon + 1];
          else useOldKeys = false;
        }
        colon = [spk java_indexOf:':'];
        if (colon >= 0) spk = [spk java_substring:colon + 1];
        if (useOldKeys) {
          @try {
            signingPrivKey = create_NetI2pDataSigningPrivateKey_initWithNetI2pCryptoSigType_(type);
            [signingPrivKey fromBase64WithNSString:sspk];
          }
          @catch (NetI2pDataDataFormatException *iae) {
            useOldKeys = false;
            signingPrivKey = nil;
          }
        }
        if (useOldKeys) {
          @try {
            privKey = create_NetI2pDataPrivateKey_init();
            [privKey fromBase64WithNSString:spk];
          }
          @catch (NetI2pDataDataFormatException *iae) {
            privKey = nil;
          }
        }
      }
      if (privKey == nil && ![_existingLeaseSets_ isEmpty]) {
        NetI2pDataPublicKey *pk = [((NetI2pDataDestination *) nil_chk(dest)) getPublicKey];
        for (id<JavaUtilMap_Entry> __strong e in nil_chk([_existingLeaseSets_ entrySet])) {
          if ([((NetI2pDataPublicKey *) nil_chk(pk)) isEqual:[((NetI2pDataDestination *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey])) getPublicKey]]) {
            privKey = [((NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *) nil_chk([e getValue])) getPrivateKey];
            if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"Creating new leaseInfo keys for ", dest, @" with private key from ", [e getKey])];
            break;
          }
        }
      }
      if (privKey != nil) {
        if (signingPrivKey != nil) {
          li = create_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(privKey, signingPrivKey);
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$", @"Creating new leaseInfo keys for ", dest, @" WITH configured private keys")];
        }
        else {
          li = create_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataDestination_(privKey, dest);
        }
      }
      else {
        li = create_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataDestination_(dest);
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$", @"Creating new leaseInfo keys for ", dest, @" without configured private keys")];
      }
      [_existingLeaseSets_ putWithId:dest withId:li];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Caching the old leaseInfo keys for ", dest)];
    }
    [leaseSet setEncryptionKeyWithNetI2pDataPublicKey:[li getPublicKey]];
    [leaseSet setSigningKeyWithNetI2pDataSigningPublicKey:[li getSigningPublicKey]];
    JavaUtilProperties *opts;
    if ([session isKindOfClass:[NetI2pClientImplSubSession class]]) opts = [((NetI2pClientImplSubSession *) cast_chk(session, [NetI2pClientImplSubSession class])) getPrimaryOptions];
    else opts = [session getOptions];
    jboolean encrypt = JavaLangBoolean_parseBooleanWithNSString_([((JavaUtilProperties *) nil_chk(opts)) getPropertyWithNSString:@"i2cp.encryptLeaseSet"]);
    NSString *sk = [opts getPropertyWithNSString:@"i2cp.leaseSetKey"];
    NetI2pDataHash *h = [((NetI2pDataDestination *) nil_chk(dest)) calculateHash];
    if (encrypt && sk != nil) {
      NetI2pDataSessionKey *key = create_NetI2pDataSessionKey_init();
      @try {
        [key fromBase64WithNSString:sk];
        [leaseSet encryptWithNetI2pDataSessionKey:key];
        [((NetI2pUtilKeyRing *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) keyRing])) putWithId:h withId:key];
      }
      @catch (NetI2pDataDataFormatException *dfe) {
        [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$", @"Bad leaseset key: ", sk)];
        [((NetI2pUtilKeyRing *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) keyRing])) removeWithId:h];
      }
    }
    else {
      [((NetI2pUtilKeyRing *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) keyRing])) removeWithId:h];
    }
    @try {
      [leaseSet signWithNetI2pDataSigningPrivateKey:[session getPrivateKey]];
      NetI2pDataSigningPrivateKey *spk = [li getSigningPrivateKey];
      if (![((NetI2pI2PAppContext *) nil_chk(_context_)) isRouterContext] && [((NetI2pDataSigningPrivateKey *) nil_chk(spk)) getType] != JreLoadEnum(NetI2pCryptoSigType, DSA_SHA1)) {
        IOSByteArray *dummy = [IOSByteArray arrayWithLength:JreLoadStatic(NetI2pDataSigningPrivateKey, KEYSIZE_BYTES)];
        [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextBytesWithByteArray:dummy];
        spk = create_NetI2pDataSigningPrivateKey_initWithByteArray_(dummy);
      }
      [((NetI2pClientImplI2CPMessageProducer *) nil_chk([session getProducer])) createLeaseSetWithNetI2pClientImplI2PSessionImpl:session withNetI2pDataLeaseSet:leaseSet withNetI2pDataSigningPrivateKey:spk withNetI2pDataPrivateKey:[li getPrivateKey]];
      [session setLeaseSetWithNetI2pDataLeaseSet:leaseSet];
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      [session propogateErrorWithNSString:@"Error signing the leaseSet" withJavaLangThrowable:dfe];
    }
    @catch (NetI2pClientI2PSessionException *ise) {
      if ([session isClosed]) {
        JavaIoEOFException *eof = create_JavaIoEOFException_initWithNSString_(@"Session closed while signing leaseset");
        [eof initCauseWithJavaLangThrowable:ise];
        [session propogateErrorWithNSString:@"Session closed while signing leaseset" withJavaLangThrowable:eof];
      }
      else {
        [session propogateErrorWithNSString:@"Error sending the signed leaseSet" withJavaLangThrowable:ise];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(_existingLeaseSets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x24, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withInt:);
  methods[2].selector = @selector(handleMessageWithNetI2pDataI2cpI2CPMessage:withNetI2pClientImplI2PSessionImpl:);
  methods[3].selector = @selector(signLeaseSetWithNetI2pDataLeaseSet:withNetI2pClientImplI2PSessionImpl:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_existingLeaseSets_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "LNetI2pI2PAppContext;I", "handleMessage", "LNetI2pDataI2cpI2CPMessage;LNetI2pClientImplI2PSessionImpl;", "signLeaseSet", "LNetI2pDataLeaseSet;LNetI2pClientImplI2PSessionImpl;", "Ljava/util/Map<Lnet/i2p/data/Destination;Lnet/i2p/client/impl/RequestLeaseSetMessageHandler$LeaseInfo;>;", "LNetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo;" };
  static const J2ObjcClassInfo _NetI2pClientImplRequestLeaseSetMessageHandler = { "RequestLeaseSetMessageHandler", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x0, 4, 1, -1, 7, -1, -1, -1 };
  return &_NetI2pClientImplRequestLeaseSetMessageHandler;
}

@end

void NetI2pClientImplRequestLeaseSetMessageHandler_initWithNetI2pI2PAppContext_(NetI2pClientImplRequestLeaseSetMessageHandler *self, NetI2pI2PAppContext *context) {
  NetI2pClientImplRequestLeaseSetMessageHandler_initWithNetI2pI2PAppContext_withInt_(self, context, NetI2pDataI2cpRequestLeaseSetMessage_MESSAGE_TYPE);
}

NetI2pClientImplRequestLeaseSetMessageHandler *new_NetI2pClientImplRequestLeaseSetMessageHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler, initWithNetI2pI2PAppContext_, context)
}

NetI2pClientImplRequestLeaseSetMessageHandler *create_NetI2pClientImplRequestLeaseSetMessageHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler, initWithNetI2pI2PAppContext_, context)
}

void NetI2pClientImplRequestLeaseSetMessageHandler_initWithNetI2pI2PAppContext_withInt_(NetI2pClientImplRequestLeaseSetMessageHandler *self, NetI2pI2PAppContext *context, jint messageType) {
  NetI2pClientImplHandlerImpl_initWithNetI2pI2PAppContext_withInt_(self, context, messageType);
  JreStrongAssignAndConsume(&self->_existingLeaseSets_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(4));
}

NetI2pClientImplRequestLeaseSetMessageHandler *new_NetI2pClientImplRequestLeaseSetMessageHandler_initWithNetI2pI2PAppContext_withInt_(NetI2pI2PAppContext *context, jint messageType) {
  J2OBJC_NEW_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler, initWithNetI2pI2PAppContext_withInt_, context, messageType)
}

NetI2pClientImplRequestLeaseSetMessageHandler *create_NetI2pClientImplRequestLeaseSetMessageHandler_initWithNetI2pI2PAppContext_withInt_(NetI2pI2PAppContext *context, jint messageType) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler, initWithNetI2pI2PAppContext_withInt_, context, messageType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplRequestLeaseSetMessageHandler)

@implementation NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo

- (instancetype)initWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataDestination_(self, dest);
  return self;
}

- (instancetype)initWithNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)privKey
             withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)signingPrivKey {
  NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(self, privKey, signingPrivKey);
  return self;
}

- (instancetype)initWithNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)privKey
                   withNetI2pDataDestination:(NetI2pDataDestination *)dest {
  NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataDestination_(self, privKey, dest);
  return self;
}

- (NetI2pDataPublicKey *)getPublicKey {
  return _pubKey_;
}

- (NetI2pDataPrivateKey *)getPrivateKey {
  return _privKey_;
}

- (NetI2pDataSigningPublicKey *)getSigningPublicKey {
  return _signingPubKey_;
}

- (NetI2pDataSigningPrivateKey *)getSigningPrivateKey {
  return _signingPrivKey_;
}

- (NSUInteger)hash {
  return NetI2pDataDataHelper_hashCodeWithId_(_pubKey_) + 7 * NetI2pDataDataHelper_hashCodeWithId_(_privKey_) + 7 * 7 * NetI2pDataDataHelper_hashCodeWithId_(_signingPubKey_) + 7 * 7 * 7 * NetI2pDataDataHelper_hashCodeWithId_(_signingPrivKey_);
}

- (jboolean)isEqual:(id)obj {
  if ((obj == nil) || !([obj isKindOfClass:[NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo class]])) return false;
  NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *li = (NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *) cast_chk(obj, [NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo class]);
  return NetI2pDataDataHelper_eqWithId_withId_(_pubKey_, [((NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *) nil_chk(li)) getPublicKey]) && NetI2pDataDataHelper_eqWithId_withId_(_privKey_, [li getPrivateKey]) && NetI2pDataDataHelper_eqWithId_withId_(_signingPubKey_, [li getSigningPublicKey]) && NetI2pDataDataHelper_eqWithId_withId_(_signingPrivKey_, [li getSigningPrivateKey]);
}

- (void)dealloc {
  RELEASE_(_pubKey_);
  RELEASE_(_privKey_);
  RELEASE_(_signingPubKey_);
  RELEASE_(_signingPrivKey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPrivateKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataDestination:);
  methods[1].selector = @selector(initWithNetI2pDataPrivateKey:withNetI2pDataSigningPrivateKey:);
  methods[2].selector = @selector(initWithNetI2pDataPrivateKey:withNetI2pDataDestination:);
  methods[3].selector = @selector(getPublicKey);
  methods[4].selector = @selector(getPrivateKey);
  methods[5].selector = @selector(getSigningPublicKey);
  methods[6].selector = @selector(getSigningPrivateKey);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_pubKey_", "LNetI2pDataPublicKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_privKey_", "LNetI2pDataPrivateKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_signingPubKey_", "LNetI2pDataSigningPublicKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_signingPrivKey_", "LNetI2pDataSigningPrivateKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataDestination;", "LNetI2pDataPrivateKey;LNetI2pDataSigningPrivateKey;", "LNetI2pDataPrivateKey;LNetI2pDataDestination;", "hashCode", "equals", "LNSObject;", "LNetI2pClientImplRequestLeaseSetMessageHandler;" };
  static const J2ObjcClassInfo _NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo = { "LeaseInfo", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0xa, 9, 4, 6, -1, -1, -1, -1 };
  return &_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo;
}

@end

void NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataDestination_(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *self, NetI2pDataDestination *dest) {
  NSObject_init(self);
  IOSObjectArray *encKeys = [((NetI2pCryptoKeyGenerator *) nil_chk(NetI2pCryptoKeyGenerator_getInstance())) generatePKIKeys];
  IOSObjectArray *signKeys;
  @try {
    signKeys = [((NetI2pCryptoKeyGenerator *) nil_chk(NetI2pCryptoKeyGenerator_getInstance())) generateSigningKeysWithNetI2pCryptoSigType:[((NetI2pDataSigningPublicKey *) nil_chk([((NetI2pDataDestination *) nil_chk(dest)) getSigningPublicKey])) getType]];
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    @throw create_JavaLangIllegalStateException_initWithJavaLangThrowable_(gse);
  }
  JreStrongAssign(&self->_pubKey_, (NetI2pDataPublicKey *) cast_chk(IOSObjectArray_Get(nil_chk(encKeys), 0), [NetI2pDataPublicKey class]));
  JreStrongAssign(&self->_privKey_, (NetI2pDataPrivateKey *) cast_chk(IOSObjectArray_Get(encKeys, 1), [NetI2pDataPrivateKey class]));
  JreStrongAssign(&self->_signingPubKey_, (NetI2pDataSigningPublicKey *) cast_chk(IOSObjectArray_Get(nil_chk(signKeys), 0), [NetI2pDataSigningPublicKey class]));
  JreStrongAssign(&self->_signingPrivKey_, (NetI2pDataSigningPrivateKey *) cast_chk(IOSObjectArray_Get(signKeys, 1), [NetI2pDataSigningPrivateKey class]));
}

NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *new_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataDestination_(NetI2pDataDestination *dest) {
  J2OBJC_NEW_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, initWithNetI2pDataDestination_, dest)
}

NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *create_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataDestination_(NetI2pDataDestination *dest) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, initWithNetI2pDataDestination_, dest)
}

void NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *self, NetI2pDataPrivateKey *privKey, NetI2pDataSigningPrivateKey *signingPrivKey) {
  NSObject_init(self);
  JreStrongAssign(&self->_pubKey_, NetI2pCryptoKeyGenerator_getPublicKeyWithNetI2pDataPrivateKey_(privKey));
  JreStrongAssign(&self->_privKey_, privKey);
  JreStrongAssign(&self->_signingPubKey_, NetI2pCryptoKeyGenerator_getSigningPublicKeyWithNetI2pDataSigningPrivateKey_(signingPrivKey));
  JreStrongAssign(&self->_signingPrivKey_, signingPrivKey);
}

NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *new_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pDataPrivateKey *privKey, NetI2pDataSigningPrivateKey *signingPrivKey) {
  J2OBJC_NEW_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_, privKey, signingPrivKey)
}

NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *create_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pDataPrivateKey *privKey, NetI2pDataSigningPrivateKey *signingPrivKey) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, initWithNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_, privKey, signingPrivKey)
}

void NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataDestination_(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *self, NetI2pDataPrivateKey *privKey, NetI2pDataDestination *dest) {
  NSObject_init(self);
  IOSObjectArray *signKeys;
  @try {
    signKeys = [((NetI2pCryptoKeyGenerator *) nil_chk(NetI2pCryptoKeyGenerator_getInstance())) generateSigningKeysWithNetI2pCryptoSigType:[((NetI2pDataSigningPublicKey *) nil_chk([((NetI2pDataDestination *) nil_chk(dest)) getSigningPublicKey])) getType]];
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    @throw create_JavaLangIllegalStateException_initWithJavaLangThrowable_(gse);
  }
  JreStrongAssign(&self->_pubKey_, NetI2pCryptoKeyGenerator_getPublicKeyWithNetI2pDataPrivateKey_(privKey));
  JreStrongAssign(&self->_privKey_, privKey);
  JreStrongAssign(&self->_signingPubKey_, (NetI2pDataSigningPublicKey *) cast_chk(IOSObjectArray_Get(nil_chk(signKeys), 0), [NetI2pDataSigningPublicKey class]));
  JreStrongAssign(&self->_signingPrivKey_, (NetI2pDataSigningPrivateKey *) cast_chk(IOSObjectArray_Get(signKeys, 1), [NetI2pDataSigningPrivateKey class]));
}

NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *new_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataDestination_(NetI2pDataPrivateKey *privKey, NetI2pDataDestination *dest) {
  J2OBJC_NEW_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, initWithNetI2pDataPrivateKey_withNetI2pDataDestination_, privKey, dest)
}

NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo *create_NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo_initWithNetI2pDataPrivateKey_withNetI2pDataDestination_(NetI2pDataPrivateKey *privKey, NetI2pDataDestination *dest) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo, initWithNetI2pDataPrivateKey_withNetI2pDataDestination_, privKey, dest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplRequestLeaseSetMessageHandler_LeaseInfo)
