//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/I2PSimpleSession.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Throwable.h"
#include "java/net/Socket.h"
#include "java/net/UnknownHostException.h"
#include "java/security/GeneralSecurityException.h"
#include "java/util/Properties.h"
#include "net/i2p/CoreVersion.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PClient.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/impl/BWLimitsMessageHandler.h"
#include "net/i2p/client/impl/ClientWriterRunner.h"
#include "net/i2p/client/impl/DestReplyMessageHandler.h"
#include "net/i2p/client/impl/DisconnectMessageHandler.h"
#include "net/i2p/client/impl/HostReplyMessageHandler.h"
#include "net/i2p/client/impl/I2CPMessageHandler.h"
#include "net/i2p/client/impl/I2PClientMessageHandlerMap.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/client/impl/I2PSessionImpl2.h"
#include "net/i2p/client/impl/I2PSimpleSession.h"
#include "net/i2p/client/impl/SetDateMessageHandler.h"
#include "net/i2p/data/i2cp/BandwidthLimitsMessage.h"
#include "net/i2p/data/i2cp/DestReplyMessage.h"
#include "net/i2p/data/i2cp/DisconnectMessage.h"
#include "net/i2p/data/i2cp/GetDateMessage.h"
#include "net/i2p/data/i2cp/HostReplyMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageReader.h"
#include "net/i2p/data/i2cp/SetDateMessage.h"
#include "net/i2p/internal/I2CPMessageQueue.h"
#include "net/i2p/internal/InternalClientManager.h"
#include "net/i2p/internal/QueuedI2CPMessageReader.h"
#include "net/i2p/util/I2PSSLSocketFactory.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/OrderedProperties.h"
#include "net/i2p/util/SystemVersion.h"

inline jint NetI2pClientImplI2PSimpleSession_get_BUF_SIZE(void);
#define NetI2pClientImplI2PSimpleSession_BUF_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSimpleSession, BUF_SIZE, jint)

@interface NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap : NetI2pClientImplI2PClientMessageHandlerMap

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap)

__attribute__((unused)) static void NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap_initWithNetI2pI2PAppContext_(NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap *self, NetI2pI2PAppContext *context);

__attribute__((unused)) static NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap *new_NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap *create_NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap)

@implementation NetI2pClientImplI2PSimpleSession

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                     withJavaUtilProperties:(JavaUtilProperties *)options {
  NetI2pClientImplI2PSimpleSession_initWithNetI2pI2PAppContext_withJavaUtilProperties_(self, context, options);
  return self;
}

- (void)connect {
  [self changeStateWithNetI2pClientImplI2PSessionImpl_State:JreLoadEnum(NetI2pClientImplI2PSessionImpl_State, OPENING)];
  jboolean success = false;
  @try {
    @synchronized(_stateLock_) {
      if ([((NetI2pI2PAppContext *) nil_chk(_context_)) isRouterContext]) {
        id<NetI2pInternalInternalClientManager> mgr = [_context_ internalClientManager];
        if (mgr == nil) @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"Router is not ready for connections");
        JreStrongAssign(&_queue_, [mgr connect]);
        JreStrongAssignAndConsume(&_reader_, new_NetI2pInternalQueuedI2CPMessageReader_initWithNetI2pInternalI2CPMessageQueue_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(_queue_, self));
        [_reader_ startReading];
      }
      else {
        if (JavaLangBoolean_parseBooleanWithNSString_([((JavaUtilProperties *) nil_chk([self getOptions])) getPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_ENABLE_SSL])) {
          @try {
            NetI2pUtilI2PSSLSocketFactory *fact = create_NetI2pUtilI2PSSLSocketFactory_initWithNetI2pI2PAppContext_withBoolean_withNSString_(_context_, false, @"certificates/i2cp");
            JreStrongAssign(&_socket_, [fact createSocketWithNSString:_hostname_ withInt:_portNum_]);
          }
          @catch (JavaSecurityGeneralSecurityException *gse) {
            JavaIoIOException *ioe = create_JavaIoIOException_initWithNSString_(@"SSL Fail");
            [ioe initCauseWithJavaLangThrowable:gse];
            @throw ioe;
          }
        }
        else {
          JreStrongAssignAndConsume(&_socket_, new_JavaNetSocket_initWithNSString_withInt_(_hostname_, _portNum_));
        }
        [((JavaNetSocket *) nil_chk(_socket_)) setKeepAliveWithBoolean:true];
        JavaIoOutputStream *out = [((JavaNetSocket *) nil_chk(_socket_)) getOutputStream];
        [((JavaIoOutputStream *) nil_chk(out)) writeWithInt:NetI2pClientI2PClient_PROTOCOL_BYTE];
        [out flush];
        JreStrongAssignAndConsume(&_writer_, new_NetI2pClientImplClientWriterRunner_initWithJavaIoOutputStream_withNetI2pClientImplI2PSessionImpl_(out, self));
        [_writer_ startWriting];
        JavaIoInputStream *in = create_JavaIoBufferedInputStream_initWithJavaIoInputStream_withInt_([((JavaNetSocket *) nil_chk(_socket_)) getInputStream], NetI2pClientImplI2PSimpleSession_BUF_SIZE);
        JreStrongAssignAndConsume(&_reader_, new_NetI2pDataI2cpI2CPMessageReader_initWithJavaIoInputStream_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(in, self));
        [_reader_ startReading];
      }
    }
    if (![_context_ isRouterContext]) {
      JavaUtilProperties *opts = [self getOptions];
      if ((![((JavaUtilProperties *) nil_chk(opts)) containsKeyWithId:NetI2pClientImplI2PSessionImpl_PROP_USER]) && (![opts containsKeyWithId:NetI2pClientImplI2PSessionImpl_PROP_PW])) {
        NSString *configUser = [_context_ getPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_USER];
        NSString *configPW = [_context_ getPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_PW];
        if (configUser != nil && configPW != nil) {
          [opts setPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_USER withNSString:configUser];
          [opts setPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_PW withNSString:configPW];
        }
      }
      if ([opts containsKeyWithId:NetI2pClientImplI2PSessionImpl_PROP_USER] && [opts containsKeyWithId:NetI2pClientImplI2PSessionImpl_PROP_PW]) {
        JavaUtilProperties *auth = create_NetI2pUtilOrderedProperties_init();
        [auth setPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_USER withNSString:[opts getPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_USER]];
        [auth setPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_PW withNSString:[opts getPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_PW]];
        [self sendMessage_uncheckedWithNetI2pDataI2cpI2CPMessage:create_NetI2pDataI2cpGetDateMessage_initWithNSString_withJavaUtilProperties_(NetI2pCoreVersion_VERSION, auth)];
      }
      else {
        [self sendMessage_uncheckedWithNetI2pDataI2cpI2CPMessage:create_NetI2pDataI2cpGetDateMessage_initWithNSString_(NetI2pCoreVersion_VERSION)];
      }
      [self waitForDate];
    }
    success = true;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$", [self getPrefix], @" simple session connected")];
  }
  @catch (JavaLangInterruptedException *ie) {
    @throw create_NetI2pClientI2PSessionException_initWithNSString_withJavaLangThrowable_(@"Interrupted", ie);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    @throw create_NetI2pClientI2PSessionException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$CI", [self getPrefix], @"Cannot connect to the router on ", _hostname_, ':', _portNum_), uhe);
  }
  @catch (JavaIoIOException *ioe) {
    NSString *msg;
    if ([_context_ isRouterContext]) msg = @"Failed internal router binding";
    else if (NetI2pUtilSystemVersion_isAndroid() && JavaLangBoolean_parseBooleanWithNSString_([((JavaUtilProperties *) nil_chk([self getOptions])) getPropertyWithNSString:NetI2pClientImplI2PSessionImpl_PROP_DOMAIN_SOCKET])) msg = @"Failed to bind to the router";
    else msg = JreStrcat("$$CI", @"Cannot connect to the router on ", _hostname_, ':', _portNum_);
    @throw create_NetI2pClientI2PSessionException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", [self getPrefix], msg), ioe);
  }
  @finally {
    [self changeStateWithNetI2pClientImplI2PSessionImpl_State:success ? JreLoadEnum(NetI2pClientImplI2PSessionImpl_State, OPEN) : JreLoadEnum(NetI2pClientImplI2PSessionImpl_State, CLOSED)];
  }
}

- (void)updateOptionsWithJavaUtilProperties:(JavaUtilProperties *)options {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withJavaUtilProperties:);
  methods[1].selector = @selector(connect);
  methods[2].selector = @selector(updateOptionsWithJavaUtilProperties:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUF_SIZE", "I", .constantValue.asInt = NetI2pClientImplI2PSimpleSession_BUF_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LJavaUtilProperties;", "LNetI2pClientI2PSessionException;", "updateOptions", "LJavaUtilProperties;", "LNetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap;" };
  static const J2ObjcClassInfo _NetI2pClientImplI2PSimpleSession = { "I2PSimpleSession", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, 4, -1, -1, -1 };
  return &_NetI2pClientImplI2PSimpleSession;
}

@end

void NetI2pClientImplI2PSimpleSession_initWithNetI2pI2PAppContext_withJavaUtilProperties_(NetI2pClientImplI2PSimpleSession *self, NetI2pI2PAppContext *context, JavaUtilProperties *options) {
  NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaUtilProperties_withNetI2pClientImplI2PClientMessageHandlerMap_(self, context, options, create_NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap_initWithNetI2pI2PAppContext_(context));
}

NetI2pClientImplI2PSimpleSession *new_NetI2pClientImplI2PSimpleSession_initWithNetI2pI2PAppContext_withJavaUtilProperties_(NetI2pI2PAppContext *context, JavaUtilProperties *options) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSimpleSession, initWithNetI2pI2PAppContext_withJavaUtilProperties_, context, options)
}

NetI2pClientImplI2PSimpleSession *create_NetI2pClientImplI2PSimpleSession_initWithNetI2pI2PAppContext_withJavaUtilProperties_(NetI2pI2PAppContext *context, JavaUtilProperties *options) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSimpleSession, initWithNetI2pI2PAppContext_withJavaUtilProperties_, context, options)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2PSimpleSession)

@implementation NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "LNetI2pClientImplI2PSimpleSession;" };
  static const J2ObjcClassInfo _NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap = { "SimpleMessageHandlerMap", "net.i2p.client.impl", ptrTable, methods, NULL, 7, 0xa, 1, 0, 1, -1, -1, -1, -1 };
  return &_NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap;
}

@end

void NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap_initWithNetI2pI2PAppContext_(NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap *self, NetI2pI2PAppContext *context) {
  NetI2pClientImplI2PClientMessageHandlerMap_init(self);
  jint highest = JavaLangMath_maxWithInt_withInt_(NetI2pDataI2cpDestReplyMessage_MESSAGE_TYPE, NetI2pDataI2cpBandwidthLimitsMessage_MESSAGE_TYPE);
  highest = JavaLangMath_maxWithInt_withInt_(highest, NetI2pDataI2cpDisconnectMessage_MESSAGE_TYPE);
  highest = JavaLangMath_maxWithInt_withInt_(highest, NetI2pDataI2cpHostReplyMessage_MESSAGE_TYPE);
  highest = JavaLangMath_maxWithInt_withInt_(highest, NetI2pDataI2cpSetDateMessage_MESSAGE_TYPE);
  JreStrongAssignAndConsume(&self->_handlers_, [IOSObjectArray newArrayWithLength:highest + 1 type:NetI2pClientImplI2CPMessageHandler_class_()]);
  IOSObjectArray_SetAndConsume(self->_handlers_, NetI2pDataI2cpDestReplyMessage_MESSAGE_TYPE, new_NetI2pClientImplDestReplyMessageHandler_initWithNetI2pI2PAppContext_(context));
  IOSObjectArray_SetAndConsume(nil_chk(self->_handlers_), NetI2pDataI2cpBandwidthLimitsMessage_MESSAGE_TYPE, new_NetI2pClientImplBWLimitsMessageHandler_initWithNetI2pI2PAppContext_(context));
  IOSObjectArray_SetAndConsume(nil_chk(self->_handlers_), NetI2pDataI2cpDisconnectMessage_MESSAGE_TYPE, new_NetI2pClientImplDisconnectMessageHandler_initWithNetI2pI2PAppContext_(context));
  IOSObjectArray_SetAndConsume(nil_chk(self->_handlers_), NetI2pDataI2cpHostReplyMessage_MESSAGE_TYPE, new_NetI2pClientImplHostReplyMessageHandler_initWithNetI2pI2PAppContext_(context));
  IOSObjectArray_SetAndConsume(nil_chk(self->_handlers_), NetI2pDataI2cpSetDateMessage_MESSAGE_TYPE, new_NetI2pClientImplSetDateMessageHandler_initWithNetI2pI2PAppContext_(context));
}

NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap *new_NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap, initWithNetI2pI2PAppContext_, context)
}

NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap *create_NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap, initWithNetI2pI2PAppContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2PSimpleSession_SimpleMessageHandlerMap)
