//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/I2CPMessageProducer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/locks/Condition.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/SendMessageOptions.h"
#include "net/i2p/client/impl/I2CPMessageProducer.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/Payload.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/i2cp/AbuseReason.h"
#include "net/i2p/data/i2cp/AbuseSeverity.h"
#include "net/i2p/data/i2cp/CreateLeaseSetMessage.h"
#include "net/i2p/data/i2cp/CreateSessionMessage.h"
#include "net/i2p/data/i2cp/DestroySessionMessage.h"
#include "net/i2p/data/i2cp/MessageId.h"
#include "net/i2p/data/i2cp/ReconfigureSessionMessage.h"
#include "net/i2p/data/i2cp/ReportAbuseMessage.h"
#include "net/i2p/data/i2cp/SendMessageExpiresMessage.h"
#include "net/i2p/data/i2cp/SendMessageMessage.h"
#include "net/i2p/data/i2cp/SessionConfig.h"
#include "net/i2p/data/i2cp/SessionId.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pClientImplI2CPMessageProducer () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
  jint _maxBytesPerSecond_;
  volatile_jint _sendPeriodBytes_;
  volatile_jlong _sendPeriodBeginTime_;
  JavaUtilConcurrentLocksReentrantLock *_lock_;
}

- (jboolean)updateBpsWithInt:(jint)len
                    withLong:(jlong)expires;

- (NetI2pDataPayload *)createPayloadWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                                withByteArray:(IOSByteArray *)payload
                                     withNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag
                                     withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                              withJavaUtilSet:(id<JavaUtilSet>)tags
                                     withNetI2pDataSessionKey:(NetI2pDataSessionKey *)newKey;

@end

J2OBJC_FIELD_SETTER(NetI2pClientImplI2CPMessageProducer, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pClientImplI2CPMessageProducer, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pClientImplI2CPMessageProducer, _lock_, JavaUtilConcurrentLocksReentrantLock *)

inline NSString *NetI2pClientImplI2CPMessageProducer_get_PROP_MAX_BW(void);
static NSString *NetI2pClientImplI2CPMessageProducer_PROP_MAX_BW = @"i2cp.outboundBytesPerSecond";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientImplI2CPMessageProducer, PROP_MAX_BW, NSString *)

inline jint NetI2pClientImplI2CPMessageProducer_get_TYP_SIZE(void);
#define NetI2pClientImplI2CPMessageProducer_TYP_SIZE 1781
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2CPMessageProducer, TYP_SIZE, jint)

inline jint NetI2pClientImplI2CPMessageProducer_get_MIN_RATE(void);
#define NetI2pClientImplI2CPMessageProducer_MIN_RATE 3562
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2CPMessageProducer, MIN_RATE, jint)

__attribute__((unused)) static jboolean NetI2pClientImplI2CPMessageProducer_updateBpsWithInt_withLong_(NetI2pClientImplI2CPMessageProducer *self, jint len, jlong expires);

__attribute__((unused)) static NetI2pDataPayload *NetI2pClientImplI2CPMessageProducer_createPayloadWithNetI2pDataDestination_withByteArray_withNetI2pDataSessionTag_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataSessionKey_(NetI2pClientImplI2CPMessageProducer *self, NetI2pDataDestination *dest, IOSByteArray *payload, NetI2pDataSessionTag *tag, NetI2pDataSessionKey *key, id<JavaUtilSet> tags, NetI2pDataSessionKey *newKey);

@implementation NetI2pClientImplI2CPMessageProducer

+ (jboolean)END_TO_END_CRYPTO {
  return NetI2pClientImplI2CPMessageProducer_END_TO_END_CRYPTO;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientImplI2CPMessageProducer_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (void)updateBandwidthWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  NSString *max = [((JavaUtilProperties *) nil_chk([((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) getOptions])) getPropertyWithNSString:NetI2pClientImplI2CPMessageProducer_PROP_MAX_BW];
  if (max != nil) {
    @try {
      jint iMax = JavaLangInteger_parseIntWithNSString_(max);
      if (iMax > 0) _maxBytesPerSecond_ = 256 + JavaLangMath_maxWithInt_withInt_(NetI2pClientImplI2CPMessageProducer_MIN_RATE, NetI2pClientImplI2CPMessageProducer_TYP_SIZE * ((iMax + NetI2pClientImplI2CPMessageProducer_TYP_SIZE - 1) / NetI2pClientImplI2CPMessageProducer_TYP_SIZE));
      else _maxBytesPerSecond_ = 0;
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$", @"Setting ", _maxBytesPerSecond_, @" BPS max")];
}

- (void)connectWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  [self updateBandwidthWithNetI2pClientImplI2PSessionImpl:session];
  NetI2pDataI2cpCreateSessionMessage *msg = create_NetI2pDataI2cpCreateSessionMessage_init();
  NetI2pDataI2cpSessionConfig *cfg = create_NetI2pDataI2cpSessionConfig_initWithNetI2pDataDestination_([((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) getMyDestination]);
  [cfg setOptionsWithJavaUtilProperties:[session getOptions]];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"config created"];
  @try {
    [cfg signSessionConfigWithNetI2pDataSigningPrivateKey:[session getPrivateKey]];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pClientI2PSessionException_initWithNSString_withJavaLangThrowable_(@"Unable to sign the session config", dfe);
  }
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"config signed"];
  [msg setSessionConfigWithNetI2pDataI2cpSessionConfig:cfg];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"config loaded into message"];
  [session sendMessage_uncheckedWithNetI2pDataI2cpI2CPMessage:msg];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"config message sent"];
}

- (void)disconnectWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  if ([((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) isClosed]) return;
  NetI2pDataI2cpDestroySessionMessage *dmsg = create_NetI2pDataI2cpDestroySessionMessage_init();
  [dmsg setSessionIdWithNetI2pDataI2cpSessionId:[session getSessionId]];
  [session sendMessage_uncheckedWithNetI2pDataI2cpI2CPMessage:dmsg];
}

- (void)sendMessageWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session
                            withNetI2pDataDestination:(NetI2pDataDestination *)dest
                                             withLong:(jlong)nonce
                                        withByteArray:(IOSByteArray *)payload
                             withNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag
                             withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                      withJavaUtilSet:(id<JavaUtilSet>)tags
                             withNetI2pDataSessionKey:(NetI2pDataSessionKey *)newKey
                                             withLong:(jlong)expires {
  [self sendMessageWithNetI2pClientImplI2PSessionImpl:session withNetI2pDataDestination:dest withLong:nonce withByteArray:payload withLong:expires withInt:0];
}

- (void)sendMessageWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session
                            withNetI2pDataDestination:(NetI2pDataDestination *)dest
                                             withLong:(jlong)nonce
                                        withByteArray:(IOSByteArray *)payload
                                             withLong:(jlong)expires
                                              withInt:(jint)flags {
  if (!NetI2pClientImplI2CPMessageProducer_updateBpsWithInt_withLong_(self, ((IOSByteArray *) nil_chk(payload))->size_, expires)) return;
  NetI2pDataI2cpSendMessageMessage *msg;
  if (expires > 0 || flags > 0) {
    NetI2pDataI2cpSendMessageExpiresMessage *smsg = create_NetI2pDataI2cpSendMessageExpiresMessage_init();
    [smsg setExpirationWithLong:expires];
    [smsg setFlagsWithInt:flags];
    msg = smsg;
  }
  else msg = create_NetI2pDataI2cpSendMessageMessage_init();
  [msg setDestinationWithNetI2pDataDestination:dest];
  NetI2pDataI2cpSessionId *sid = [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) getSessionId];
  if (sid == nil) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$", [session description], @" send message w/o session") withJavaLangThrowable:create_JavaLangException_init()];
    return;
  }
  [msg setSessionIdWithNetI2pDataI2cpSessionId:sid];
  [msg setNonceWithLong:nonce];
  NetI2pDataPayload *data = NetI2pClientImplI2CPMessageProducer_createPayloadWithNetI2pDataDestination_withByteArray_withNetI2pDataSessionTag_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataSessionKey_(self, dest, payload, nil, nil, nil, nil);
  [msg setPayloadWithNetI2pDataPayload:data];
  [session sendMessageWithNetI2pDataI2cpI2CPMessage:msg];
}

- (void)sendMessageWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session
                            withNetI2pDataDestination:(NetI2pDataDestination *)dest
                                             withLong:(jlong)nonce
                                        withByteArray:(IOSByteArray *)payload
                   withNetI2pClientSendMessageOptions:(NetI2pClientSendMessageOptions *)options {
  jlong expires = [((NetI2pClientSendMessageOptions *) nil_chk(options)) getTime];
  if (!NetI2pClientImplI2CPMessageProducer_updateBpsWithInt_withLong_(self, ((IOSByteArray *) nil_chk(payload))->size_, expires)) return;
  NetI2pDataI2cpSendMessageMessage *msg = create_NetI2pDataI2cpSendMessageExpiresMessage_initWithNetI2pDataDateAndFlags_(options);
  [msg setDestinationWithNetI2pDataDestination:dest];
  NetI2pDataI2cpSessionId *sid = [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) getSessionId];
  if (sid == nil) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$", [session description], @" send message w/o session") withJavaLangThrowable:create_JavaLangException_init()];
    return;
  }
  [msg setSessionIdWithNetI2pDataI2cpSessionId:sid];
  [msg setNonceWithLong:nonce];
  NetI2pDataPayload *data = NetI2pClientImplI2CPMessageProducer_createPayloadWithNetI2pDataDestination_withByteArray_withNetI2pDataSessionTag_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataSessionKey_(self, dest, payload, nil, nil, nil, nil);
  [msg setPayloadWithNetI2pDataPayload:data];
  [session sendMessageWithNetI2pDataI2cpI2CPMessage:msg];
}

- (jboolean)updateBpsWithInt:(jint)len
                    withLong:(jlong)expires {
  return NetI2pClientImplI2CPMessageProducer_updateBpsWithInt_withLong_(self, len, expires);
}

- (NetI2pDataPayload *)createPayloadWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                                withByteArray:(IOSByteArray *)payload
                                     withNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag
                                     withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                              withJavaUtilSet:(id<JavaUtilSet>)tags
                                     withNetI2pDataSessionKey:(NetI2pDataSessionKey *)newKey {
  return NetI2pClientImplI2CPMessageProducer_createPayloadWithNetI2pDataDestination_withByteArray_withNetI2pDataSessionTag_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataSessionKey_(self, dest, payload, tag, key, tags, newKey);
}

- (void)reportAbuseWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session
                                              withInt:(jint)msgId
                                              withInt:(jint)severity {
  NetI2pDataI2cpReportAbuseMessage *msg = create_NetI2pDataI2cpReportAbuseMessage_init();
  NetI2pDataI2cpMessageId *id_ = create_NetI2pDataI2cpMessageId_init();
  [id_ setMessageIdWithLong:msgId];
  [msg setMessageIdWithNetI2pDataI2cpMessageId:id_];
  NetI2pDataI2cpAbuseReason *reason = create_NetI2pDataI2cpAbuseReason_init();
  [reason setReasonWithNSString:@"Not specified"];
  [msg setReasonWithNetI2pDataI2cpAbuseReason:reason];
  NetI2pDataI2cpAbuseSeverity *sv = create_NetI2pDataI2cpAbuseSeverity_init();
  [sv setSeverityWithInt:severity];
  [msg setSeverityWithNetI2pDataI2cpAbuseSeverity:sv];
  [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) sendMessageWithNetI2pDataI2cpI2CPMessage:msg];
}

- (void)createLeaseSetWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session
                                  withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)leaseSet
                         withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)signingPriv
                                withNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)priv {
  NetI2pDataI2cpCreateLeaseSetMessage *msg = create_NetI2pDataI2cpCreateLeaseSetMessage_init();
  [msg setLeaseSetWithNetI2pDataLeaseSet:leaseSet];
  [msg setPrivateKeyWithNetI2pDataPrivateKey:priv];
  [msg setSigningPrivateKeyWithNetI2pDataSigningPrivateKey:signingPriv];
  NetI2pDataI2cpSessionId *sid = [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) getSessionId];
  if (sid == nil) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$", [session description], @" create LS w/o session") withJavaLangThrowable:create_JavaLangException_init()];
    return;
  }
  [msg setSessionIdWithNetI2pDataI2cpSessionId:sid];
  [session sendMessage_uncheckedWithNetI2pDataI2cpI2CPMessage:msg];
}

- (void)updateTunnelsWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session
                                                withInt:(jint)tunnels {
  NetI2pDataI2cpReconfigureSessionMessage *msg = create_NetI2pDataI2cpReconfigureSessionMessage_init();
  NetI2pDataI2cpSessionConfig *cfg = create_NetI2pDataI2cpSessionConfig_initWithNetI2pDataDestination_([((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) getMyDestination]);
  JavaUtilProperties *props = [session getOptions];
  if (tunnels > 0) {
    JavaUtilProperties *newprops = create_JavaUtilProperties_init();
    [newprops putAllWithJavaUtilMap:props];
    props = newprops;
    NSString *stunnels = JavaLangInteger_toStringWithInt_(tunnels);
    [props setPropertyWithNSString:@"inbound.quantity" withNSString:stunnels];
    [props setPropertyWithNSString:@"outbound.quantity" withNSString:stunnels];
    [props setPropertyWithNSString:@"inbound.backupQuantity" withNSString:@"0"];
    [props setPropertyWithNSString:@"outbound.backupQuantity" withNSString:@"0"];
  }
  [cfg setOptionsWithJavaUtilProperties:props];
  @try {
    [cfg signSessionConfigWithNetI2pDataSigningPrivateKey:[session getPrivateKey]];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pClientI2PSessionException_initWithNSString_withJavaLangThrowable_(@"Unable to sign the session config", dfe);
  }
  [msg setSessionConfigWithNetI2pDataI2cpSessionConfig:cfg];
  NetI2pDataI2cpSessionId *sid = [session getSessionId];
  if (sid == nil) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$", [session description], @" update config w/o session") withJavaLangThrowable:create_JavaLangException_init()];
    return;
  }
  [msg setSessionIdWithNetI2pDataI2cpSessionId:sid];
  [session sendMessageWithNetI2pDataI2cpI2CPMessage:msg];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 4, 8, -1, -1 },
    { NULL, "V", 0x1, 6, 9, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 10, 4, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPayload;", 0x2, 13, 14, 4, 15, -1, -1 },
    { NULL, "V", 0x1, 16, 17, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(updateBandwidthWithNetI2pClientImplI2PSessionImpl:);
  methods[2].selector = @selector(connectWithNetI2pClientImplI2PSessionImpl:);
  methods[3].selector = @selector(disconnectWithNetI2pClientImplI2PSessionImpl:);
  methods[4].selector = @selector(sendMessageWithNetI2pClientImplI2PSessionImpl:withNetI2pDataDestination:withLong:withByteArray:withNetI2pDataSessionTag:withNetI2pDataSessionKey:withJavaUtilSet:withNetI2pDataSessionKey:withLong:);
  methods[5].selector = @selector(sendMessageWithNetI2pClientImplI2PSessionImpl:withNetI2pDataDestination:withLong:withByteArray:withLong:withInt:);
  methods[6].selector = @selector(sendMessageWithNetI2pClientImplI2PSessionImpl:withNetI2pDataDestination:withLong:withByteArray:withNetI2pClientSendMessageOptions:);
  methods[7].selector = @selector(updateBpsWithInt:withLong:);
  methods[8].selector = @selector(createPayloadWithNetI2pDataDestination:withByteArray:withNetI2pDataSessionTag:withNetI2pDataSessionKey:withJavaUtilSet:withNetI2pDataSessionKey:);
  methods[9].selector = @selector(reportAbuseWithNetI2pClientImplI2PSessionImpl:withInt:withInt:);
  methods[10].selector = @selector(createLeaseSetWithNetI2pClientImplI2PSessionImpl:withNetI2pDataLeaseSet:withNetI2pDataSigningPrivateKey:withNetI2pDataPrivateKey:);
  methods[11].selector = @selector(updateTunnelsWithNetI2pClientImplI2PSessionImpl:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_maxBytesPerSecond_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendPeriodBytes_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_sendPeriodBeginTime_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PROP_MAX_BW", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "TYP_SIZE", "I", .constantValue.asInt = NetI2pClientImplI2CPMessageProducer_TYP_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MIN_RATE", "I", .constantValue.asInt = NetI2pClientImplI2CPMessageProducer_MIN_RATE, 0x1a, -1, -1, -1, -1 },
    { "END_TO_END_CRYPTO", "Z", .constantValue.asBOOL = NetI2pClientImplI2CPMessageProducer_END_TO_END_CRYPTO, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "updateBandwidth", "LNetI2pClientImplI2PSessionImpl;", "connect", "LNetI2pClientI2PSessionException;", "disconnect", "sendMessage", "LNetI2pClientImplI2PSessionImpl;LNetI2pDataDestination;J[BLNetI2pDataSessionTag;LNetI2pDataSessionKey;LJavaUtilSet;LNetI2pDataSessionKey;J", "(Lnet/i2p/client/impl/I2PSessionImpl;Lnet/i2p/data/Destination;J[BLnet/i2p/data/SessionTag;Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;Lnet/i2p/data/SessionKey;J)V", "LNetI2pClientImplI2PSessionImpl;LNetI2pDataDestination;J[BJI", "LNetI2pClientImplI2PSessionImpl;LNetI2pDataDestination;J[BLNetI2pClientSendMessageOptions;", "updateBps", "IJ", "createPayload", "LNetI2pDataDestination;[BLNetI2pDataSessionTag;LNetI2pDataSessionKey;LJavaUtilSet;LNetI2pDataSessionKey;", "(Lnet/i2p/data/Destination;[BLnet/i2p/data/SessionTag;Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;Lnet/i2p/data/SessionKey;)Lnet/i2p/data/Payload;", "reportAbuse", "LNetI2pClientImplI2PSessionImpl;II", "createLeaseSet", "LNetI2pClientImplI2PSessionImpl;LNetI2pDataLeaseSet;LNetI2pDataSigningPrivateKey;LNetI2pDataPrivateKey;", "updateTunnels", "LNetI2pClientImplI2PSessionImpl;I", &NetI2pClientImplI2CPMessageProducer_PROP_MAX_BW };
  static const J2ObjcClassInfo _NetI2pClientImplI2CPMessageProducer = { "I2CPMessageProducer", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x0, 12, 10, -1, -1, -1, -1, -1 };
  return &_NetI2pClientImplI2CPMessageProducer;
}

@end

void NetI2pClientImplI2CPMessageProducer_initWithNetI2pI2PAppContext_(NetI2pClientImplI2CPMessageProducer *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pClientImplI2CPMessageProducer_class_()]);
  JreStrongAssignAndConsume(&self->_lock_, new_JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(true));
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"client.sendThrottled" withNSString:@"Times waited for bandwidth" withNSString:@"ClientMessages" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"client.sendDropped" withNSString:@"Length of msg dropped waiting for bandwidth" withNSString:@"ClientMessages" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000 } count:1]];
}

NetI2pClientImplI2CPMessageProducer *new_NetI2pClientImplI2CPMessageProducer_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2CPMessageProducer, initWithNetI2pI2PAppContext_, context)
}

NetI2pClientImplI2CPMessageProducer *create_NetI2pClientImplI2CPMessageProducer_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2CPMessageProducer, initWithNetI2pI2PAppContext_, context)
}

jboolean NetI2pClientImplI2CPMessageProducer_updateBpsWithInt_withLong_(NetI2pClientImplI2CPMessageProducer *self, jint len, jlong expires) {
  if (self->_maxBytesPerSecond_ <= 0) return true;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(self->_lock_)) lock];
  @try {
    jint waitCount = 0;
    while (true) {
      jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now];
      if (waitCount > 0 && expires > 0 && expires < now) {
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"client.sendDropped" withLong:len withLong:0];
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$", @"Dropping ", len, @" byte msg expired in queue")];
        return false;
      }
      jlong period = now - JreLoadVolatileLong(&self->_sendPeriodBeginTime_);
      if (period >= 2000) {
        JreAssignVolatileInt(&self->_sendPeriodBytes_, len);
        JreAssignVolatileLong(&self->_sendPeriodBeginTime_, now);
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$", @"New period after idle, ", len, @" bytes")];
        return true;
      }
      if (period >= 1000) {
        if (JreLoadVolatileInt(&self->_sendPeriodBytes_) > 0 && ((JreLoadVolatileLong(&self->_sendPeriodBeginTime_) / 1000) & (jint) 0x01) == 0) JrePlusAssignVolatileIntI(&self->_sendPeriodBytes_, len - self->_maxBytesPerSecond_);
        else JreAssignVolatileInt(&self->_sendPeriodBytes_, len);
        JrePlusAssignVolatileLongJ(&self->_sendPeriodBeginTime_, 1000);
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$", @"New period, ", len, @" bytes")];
        return true;
      }
      if (JreLoadVolatileInt(&self->_sendPeriodBytes_) + len <= self->_maxBytesPerSecond_) {
        JrePlusAssignVolatileIntI(&self->_sendPeriodBytes_, len);
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$J$I$", @"Sending ", len, @", Elapsed ", period, @"ms, total ", JreLoadVolatileInt(&self->_sendPeriodBytes_), @" bytes")];
        return true;
      }
      if (waitCount >= 2) {
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"client.sendDropped" withLong:len withLong:0];
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$I$", @"Dropping ", len, @" byte msg after waiting ", waitCount, @" times")];
        return false;
      }
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"client.sendThrottled" withLong:++waitCount withLong:0];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$ICJ$", @"Throttled ", len, @" bytes, wait #", waitCount, ' ', (1000 - period), @"ms")];
      @try {
        [((id<JavaUtilConcurrentLocksCondition>) nil_chk([self->_lock_ newCondition])) awaitWithLong:1000 - period withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
  }
  @finally {
    [self->_lock_ unlock];
  }
}

NetI2pDataPayload *NetI2pClientImplI2CPMessageProducer_createPayloadWithNetI2pDataDestination_withByteArray_withNetI2pDataSessionTag_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataSessionKey_(NetI2pClientImplI2CPMessageProducer *self, NetI2pDataDestination *dest, IOSByteArray *payload, NetI2pDataSessionTag *tag, NetI2pDataSessionKey *key, id<JavaUtilSet> tags, NetI2pDataSessionKey *newKey) {
  if (dest == nil) @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"No destination specified");
  if (payload == nil) @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"No payload specified");
  NetI2pDataPayload *data = create_NetI2pDataPayload_init();
  {
    [data setEncryptedDataWithByteArray:payload];
    return data;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2CPMessageProducer)
