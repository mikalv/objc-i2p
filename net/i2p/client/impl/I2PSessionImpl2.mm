//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/I2PSessionImpl2.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PClient.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/I2PSessionListener.h"
#include "net/i2p/client/I2PSessionMuxedListener.h"
#include "net/i2p/client/SendMessageOptions.h"
#include "net/i2p/client/SendMessageStatusListener.h"
#include "net/i2p/client/impl/I2CPMessageProducer.h"
#include "net/i2p/client/impl/I2PClientMessageHandlerMap.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/client/impl/I2PSessionImpl2.h"
#include "net/i2p/client/impl/MessageState.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/i2cp/MessageId.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pClientImplI2PSessionImpl2 ()

- (void)clearStates;

@end

inline jlong NetI2pClientImplI2PSessionImpl2_get_SEND_TIMEOUT(void);
#define NetI2pClientImplI2PSessionImpl2_SEND_TIMEOUT 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSessionImpl2, SEND_TIMEOUT, jlong)

inline jboolean NetI2pClientImplI2PSessionImpl2_get_SHOULD_COMPRESS(void);
#define NetI2pClientImplI2PSessionImpl2_SHOULD_COMPRESS true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSessionImpl2, SHOULD_COMPRESS, jboolean)

inline jboolean NetI2pClientImplI2PSessionImpl2_get_SHOULD_DECOMPRESS(void);
#define NetI2pClientImplI2PSessionImpl2_SHOULD_DECOMPRESS true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSessionImpl2, SHOULD_DECOMPRESS, jboolean)

inline jlong NetI2pClientImplI2PSessionImpl2_get_REMOVE_EXPIRED_TIME(void);
#define NetI2pClientImplI2PSessionImpl2_REMOVE_EXPIRED_TIME 63000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSessionImpl2, REMOVE_EXPIRED_TIME, jlong)

inline jint NetI2pClientImplI2PSessionImpl2_get_DONT_COMPRESS_SIZE(void);
#define NetI2pClientImplI2PSessionImpl2_DONT_COMPRESS_SIZE 66
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSessionImpl2, DONT_COMPRESS_SIZE, jint)

__attribute__((unused)) static void NetI2pClientImplI2PSessionImpl2_clearStates(NetI2pClientImplI2PSessionImpl2 *self);

@interface NetI2pClientImplI2PSessionImpl2_RemoveExpired : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pClientImplI2PSessionImpl2 *this$0_;
}

- (instancetype)initWithNetI2pClientImplI2PSessionImpl2:(NetI2pClientImplI2PSessionImpl2 *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pClientImplI2PSessionImpl2_RemoveExpired)

__attribute__((unused)) static void NetI2pClientImplI2PSessionImpl2_RemoveExpired_initWithNetI2pClientImplI2PSessionImpl2_(NetI2pClientImplI2PSessionImpl2_RemoveExpired *self, NetI2pClientImplI2PSessionImpl2 *outer$);

__attribute__((unused)) static NetI2pClientImplI2PSessionImpl2_RemoveExpired *new_NetI2pClientImplI2PSessionImpl2_RemoveExpired_initWithNetI2pClientImplI2PSessionImpl2_(NetI2pClientImplI2PSessionImpl2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pClientImplI2PSessionImpl2_RemoveExpired *create_NetI2pClientImplI2PSessionImpl2_RemoveExpired_initWithNetI2pClientImplI2PSessionImpl2_(NetI2pClientImplI2PSessionImpl2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pClientImplI2PSessionImpl2_RemoveExpired)

@implementation NetI2pClientImplI2PSessionImpl2

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                     withJavaUtilProperties:(JavaUtilProperties *)options
withNetI2pClientImplI2PClientMessageHandlerMap:(NetI2pClientImplI2PClientMessageHandlerMap *)handlerMap {
  NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaUtilProperties_withNetI2pClientImplI2PClientMessageHandlerMap_(self, context, options, handlerMap);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                      withJavaIoInputStream:(JavaIoInputStream *)destKeyStream
                     withJavaUtilProperties:(JavaUtilProperties *)options {
  NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(self, ctx, destKeyStream, options);
  return self;
}

- (instancetype)initWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)primary
                                 withJavaIoInputStream:(JavaIoInputStream *)destKeyStream
                                withJavaUtilProperties:(JavaUtilProperties *)options {
  NetI2pClientImplI2PSessionImpl2_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(self, primary, destKeyStream, options);
  return self;
}

- (void)startVerifyUsage {
  [super startVerifyUsage];
  create_NetI2pClientImplI2PSessionImpl2_RemoveExpired_initWithNetI2pClientImplI2PSessionImpl2_(self);
}

- (jlong)getTimeout {
  return NetI2pClientImplI2PSessionImpl2_SEND_TIMEOUT;
}

- (void)destroySessionWithBoolean:(jboolean)sendDisconnect {
  NetI2pClientImplI2PSessionImpl2_clearStates(self);
  [super destroySessionWithBoolean:sendDisconnect];
}

- (jboolean)shouldCompressWithInt:(jint)size {
  if (size <= NetI2pClientImplI2PSessionImpl2_DONT_COMPRESS_SIZE) return false;
  NSString *p = [((JavaUtilProperties *) nil_chk([self getOptions])) getPropertyWithNSString:@"i2cp.gzip"];
  if (p != nil) return JavaLangBoolean_parseBooleanWithNSString_(p);
  return NetI2pClientImplI2PSessionImpl2_SHOULD_COMPRESS;
}

- (void)addSessionListenerWithNetI2pClientI2PSessionListener:(id<NetI2pClientI2PSessionListener>)lsnr
                                                     withInt:(jint)proto
                                                     withInt:(jint)port {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Use MuxedImpl");
}

- (void)addMuxedSessionListenerWithNetI2pClientI2PSessionMuxedListener:(id<NetI2pClientI2PSessionMuxedListener>)l
                                                               withInt:(jint)proto
                                                               withInt:(jint)port {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Use MuxedImpl");
}

- (void)removeListenerWithInt:(jint)proto
                      withInt:(jint)port {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Use MuxedImpl");
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)proto
                                         withInt:(jint)fromport
                                         withInt:(jint)toport {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Use MuxedImpl");
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent
                                         withInt:(jint)proto
                                         withInt:(jint)fromport
                                         withInt:(jint)toport {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Use MuxedImpl");
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent
                                        withLong:(jlong)expire
                                         withInt:(jint)proto
                                         withInt:(jint)fromport
                                         withInt:(jint)toport {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Use MuxedImpl");
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent
                                        withLong:(jlong)expire
                                         withInt:(jint)proto
                                         withInt:(jint)fromport
                                         withInt:(jint)toport
                                         withInt:(jint)flags {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Use MuxedImpl");
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                                         withInt:(jint)proto
                                         withInt:(jint)fromport
                                         withInt:(jint)toport
              withNetI2pClientSendMessageOptions:(NetI2pClientSendMessageOptions *)options {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Use MuxedImpl");
}

- (jlong)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withByteArray:(IOSByteArray *)payload
                                      withInt:(jint)offset
                                      withInt:(jint)size
                                      withInt:(jint)proto
                                      withInt:(jint)fromport
                                      withInt:(jint)toport
           withNetI2pClientSendMessageOptions:(NetI2pClientSendMessageOptions *)options
    withNetI2pClientSendMessageStatusListener:(id<NetI2pClientSendMessageStatusListener>)listener {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Use MuxedImpl");
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload {
  return [self sendMessageWithNetI2pDataDestination:dest withByteArray:payload withInt:0 withInt:((IOSByteArray *) nil_chk(payload))->size_];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size {
  return [self sendMessageWithNetI2pDataDestination:dest withByteArray:payload withInt:offset withInt:size withNetI2pDataSessionKey:nil withJavaUtilSet:nil withLong:0];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent {
  return [self sendMessageWithNetI2pDataDestination:dest withByteArray:payload withInt:0 withInt:((IOSByteArray *) nil_chk(payload))->size_ withNetI2pDataSessionKey:keyUsed withJavaUtilSet:tagsSent withLong:0];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent {
  return [self sendMessageWithNetI2pDataDestination:dest withByteArray:payload withInt:offset withInt:size withNetI2pDataSessionKey:keyUsed withJavaUtilSet:tagsSent withLong:0];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent
                                        withLong:(jlong)expires {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"sending message"];
  [self verifyOpen];
  [self updateActivity];
  jboolean sc = [self shouldCompressWithInt:size];
  if (sc) payload = NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_(payload, offset, size);
  else payload = NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_withInt_(payload, offset, size, NetI2pDataDataHelper_NO_COMPRESSION);
  jint compressed = ((IOSByteArray *) nil_chk(payload))->size_;
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) {
    NSString *d = [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([((NetI2pDataDestination *) nil_chk(dest)) calculateHash])) toBase64])) java_substring:0 endIndex:4];
    [_log_ infoWithNSString:JreStrcat("$$$Z$I$I", @"sending message to: ", d, @" compress? ", sc, @" sizeIn=", size, @" sizeOut=", compressed)];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"i2cp.tx.msgCompressed" withLong:compressed];
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"i2cp.tx.msgExpanded" withLong:size];
  if (_noEffort_) return [self sendNoEffortWithNetI2pDataDestination:dest withByteArray:payload withLong:expires withInt:0];
  else return [self sendBestEffortWithNetI2pDataDestination:dest withByteArray:payload withNetI2pDataSessionKey:keyUsed withJavaUtilSet:tagsSent withLong:expires];
}

- (IOSByteArray *)receiveMessageWithInt:(jint)msgId {
  IOSByteArray *compressed = [super receiveMessageWithInt:msgId];
  if (compressed == nil) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$I$", @"Error: message ", msgId, @" already received!")];
    return nil;
  }
  {
    @try {
      return NetI2pDataDataHelper_decompressWithByteArray_(compressed);
    }
    @catch (JavaIoIOException *ioe) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:@"Error decompressing message" withJavaLangThrowable:ioe];
      return nil;
    }
  }
  return compressed;
}

- (jboolean)sendBestEffortWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                      withByteArray:(IOSByteArray *)payload
                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                    withJavaUtilSet:(id<JavaUtilSet>)tagsSent
                                           withLong:(jlong)expires {
  return [self sendBestEffortWithNetI2pDataDestination:dest withByteArray:payload withLong:expires withInt:0];
}

- (jboolean)sendBestEffortWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                      withByteArray:(IOSByteArray *)payload
                                           withLong:(jlong)expires
                                            withInt:(jint)flags {
  jlong nonce = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_sendMessageNonce_)) incrementAndGet];
  NetI2pClientImplMessageState *state = create_NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNSString_(_context_, nonce, [self getPrefix]);
  jboolean actuallyWait = false;
  if (actuallyWait) [((id<JavaUtilMap>) nil_chk(_sendingStates_)) putWithId:JavaLangLong_valueOfWithLong_(nonce) withId:state];
  [((NetI2pClientImplI2CPMessageProducer *) nil_chk(_producer_)) sendMessageWithNetI2pClientImplI2PSessionImpl:self withNetI2pDataDestination:dest withLong:nonce withByteArray:payload withLong:expires withInt:flags];
  if (actuallyWait) {
    @try {
      [state waitForAcceptWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] + [self getTimeout]];
    }
    @catch (JavaLangInterruptedException *ie) {
      @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"interrupted");
    }
    @finally {
      [((id<JavaUtilMap>) nil_chk(_sendingStates_)) removeWithId:JavaLangLong_valueOfWithLong_(nonce)];
    }
  }
  jboolean found = !actuallyWait || [state wasAccepted];
  if (found) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$J$I$", [self getPrefix], @"Message sent after ", [state getElapsed], @"ms with ", ((IOSByteArray *) nil_chk(payload))->size_, @" bytes")];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$J$I$", [self getPrefix], @"Message send failed after ", [state getElapsed], @"ms with ", ((IOSByteArray *) nil_chk(payload))->size_, @" bytes")];
    return false;
  }
  return found;
}

- (jboolean)sendNoEffortWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                    withByteArray:(IOSByteArray *)payload
                                         withLong:(jlong)expires
                                          withInt:(jint)flags {
  [((NetI2pClientImplI2CPMessageProducer *) nil_chk(_producer_)) sendMessageWithNetI2pClientImplI2PSessionImpl:self withNetI2pDataDestination:dest withLong:0 withByteArray:payload withLong:expires withInt:flags];
  return true;
}

- (void)receiveStatusWithInt:(jint)msgId
                    withLong:(jlong)nonce
                     withInt:(jint)status {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$I$I$J", [self getPrefix], @"Received status ", status, @" for msgId ", msgId, @" / ", nonce)];
  NetI2pClientImplMessageState *state = nil;
  if ((state = [((id<JavaUtilMap>) nil_chk(_sendingStates_)) getWithId:JavaLangLong_valueOfWithLong_(nonce)]) != nil) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", [self getPrefix], @"Found a matching state")];
  }
  else if (![_sendingStates_ isEmpty]) {
    for (NetI2pClientImplMessageState * __strong s in nil_chk([_sendingStates_ values])) {
      if ([((NetI2pClientImplMessageState *) nil_chk(s)) getMessageId] != nil && [((NetI2pDataI2cpMessageId *) nil_chk([s getMessageId])) getMessageId] == msgId) {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", [self getPrefix], @"Found a matching state by msgId")];
        state = s;
        break;
      }
    }
  }
  if (state != nil) {
    if ([state getMessageId] == nil) {
      NetI2pDataI2cpMessageId *id_ = create_NetI2pDataI2cpMessageId_init();
      [id_ setMessageIdWithLong:msgId];
      [state setMessageIdWithNetI2pDataI2cpMessageId:id_];
    }
    [state receiveWithInt:status];
    if ([state wasSuccessful]) [_sendingStates_ removeWithId:JavaLangLong_valueOfWithLong_(nonce)];
    jlong lifetime = [state getElapsed];
    switch (status) {
      case 1:
      [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"i2cp.receiveStatusTime.1" withLong:lifetime];
      break;
      case 4:
      [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"i2cp.receiveStatusTime.4" withLong:lifetime];
      break;
      case 5:
      [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"i2cp.receiveStatusTime.5" withLong:lifetime];
      break;
    }
  }
  else {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$I$J$I", [self getPrefix], @"No matching state for messageId ", msgId, @" / ", nonce, @" w/ status = ", status)];
  }
}

- (jboolean)reconnect {
  NetI2pClientImplI2PSessionImpl2_clearStates(self);
  return [super reconnect];
}

- (void)clearStates {
  NetI2pClientImplI2PSessionImpl2_clearStates(self);
}

- (void)dealloc {
  RELEASE_(_sendingStates_);
  RELEASE_(_sendMessageNonce_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 16, 2, 17, -1, -1 },
    { NULL, "Z", 0x1, 14, 18, 2, 19, -1, -1 },
    { NULL, "Z", 0x1, 14, 20, 2, 21, -1, -1 },
    { NULL, "Z", 0x1, 14, 22, 2, -1, -1, -1 },
    { NULL, "J", 0x1, 14, 23, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 24, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 25, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 26, 2, 27, -1, -1 },
    { NULL, "Z", 0x1, 14, 28, 2, 29, -1, -1 },
    { NULL, "Z", 0x1, 14, 30, 2, 31, -1, -1 },
    { NULL, "[B", 0x1, 32, 7, 2, -1, -1, -1 },
    { NULL, "Z", 0x4, 33, 34, 2, 35, -1, -1 },
    { NULL, "Z", 0x4, 33, 36, 2, -1, -1, -1 },
    { NULL, "Z", 0x4, 37, 36, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withJavaUtilProperties:withNetI2pClientImplI2PClientMessageHandlerMap:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withJavaIoInputStream:withJavaUtilProperties:);
  methods[2].selector = @selector(initWithNetI2pClientImplI2PSessionImpl:withJavaIoInputStream:withJavaUtilProperties:);
  methods[3].selector = @selector(startVerifyUsage);
  methods[4].selector = @selector(getTimeout);
  methods[5].selector = @selector(destroySessionWithBoolean:);
  methods[6].selector = @selector(shouldCompressWithInt:);
  methods[7].selector = @selector(addSessionListenerWithNetI2pClientI2PSessionListener:withInt:withInt:);
  methods[8].selector = @selector(addMuxedSessionListenerWithNetI2pClientI2PSessionMuxedListener:withInt:withInt:);
  methods[9].selector = @selector(removeListenerWithInt:withInt:);
  methods[10].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withInt:);
  methods[11].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withNetI2pDataSessionKey:withJavaUtilSet:withInt:withInt:withInt:);
  methods[12].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withNetI2pDataSessionKey:withJavaUtilSet:withLong:withInt:withInt:withInt:);
  methods[13].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withNetI2pDataSessionKey:withJavaUtilSet:withLong:withInt:withInt:withInt:withInt:);
  methods[14].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withInt:withInt:withInt:withNetI2pClientSendMessageOptions:);
  methods[15].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withInt:withInt:withInt:withNetI2pClientSendMessageOptions:withNetI2pClientSendMessageStatusListener:);
  methods[16].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:);
  methods[17].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:);
  methods[18].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withNetI2pDataSessionKey:withJavaUtilSet:);
  methods[19].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withNetI2pDataSessionKey:withJavaUtilSet:);
  methods[20].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withNetI2pDataSessionKey:withJavaUtilSet:withLong:);
  methods[21].selector = @selector(receiveMessageWithInt:);
  methods[22].selector = @selector(sendBestEffortWithNetI2pDataDestination:withByteArray:withNetI2pDataSessionKey:withJavaUtilSet:withLong:);
  methods[23].selector = @selector(sendBestEffortWithNetI2pDataDestination:withByteArray:withLong:withInt:);
  methods[24].selector = @selector(sendNoEffortWithNetI2pDataDestination:withByteArray:withLong:withInt:);
  methods[25].selector = @selector(receiveStatusWithInt:withLong:withInt:);
  methods[26].selector = @selector(reconnect);
  methods[27].selector = @selector(clearStates);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_sendingStates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x14, -1, -1, 40, -1 },
    { "_sendMessageNonce_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "SEND_TIMEOUT", "J", .constantValue.asLong = NetI2pClientImplI2PSessionImpl2_SEND_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "SHOULD_COMPRESS", "Z", .constantValue.asBOOL = NetI2pClientImplI2PSessionImpl2_SHOULD_COMPRESS, 0x1a, -1, -1, -1, -1 },
    { "SHOULD_DECOMPRESS", "Z", .constantValue.asBOOL = NetI2pClientImplI2PSessionImpl2_SHOULD_DECOMPRESS, 0x1a, -1, -1, -1, -1 },
    { "_noEffort_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "REMOVE_EXPIRED_TIME", "J", .constantValue.asLong = NetI2pClientImplI2PSessionImpl2_REMOVE_EXPIRED_TIME, 0x1a, -1, -1, -1, -1 },
    { "DONT_COMPRESS_SIZE", "I", .constantValue.asInt = NetI2pClientImplI2PSessionImpl2_DONT_COMPRESS_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LJavaUtilProperties;LNetI2pClientImplI2PClientMessageHandlerMap;", "LNetI2pI2PAppContext;LJavaIoInputStream;LJavaUtilProperties;", "LNetI2pClientI2PSessionException;", "LNetI2pClientImplI2PSessionImpl;LJavaIoInputStream;LJavaUtilProperties;", "destroySession", "Z", "shouldCompress", "I", "addSessionListener", "LNetI2pClientI2PSessionListener;II", "addMuxedSessionListener", "LNetI2pClientI2PSessionMuxedListener;II", "removeListener", "II", "sendMessage", "LNetI2pDataDestination;[BIII", "LNetI2pDataDestination;[BIILNetI2pDataSessionKey;LJavaUtilSet;III", "(Lnet/i2p/data/Destination;[BIILnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;III)Z", "LNetI2pDataDestination;[BIILNetI2pDataSessionKey;LJavaUtilSet;JIII", "(Lnet/i2p/data/Destination;[BIILnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;JIII)Z", "LNetI2pDataDestination;[BIILNetI2pDataSessionKey;LJavaUtilSet;JIIII", "(Lnet/i2p/data/Destination;[BIILnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;JIIII)Z", "LNetI2pDataDestination;[BIIIIILNetI2pClientSendMessageOptions;", "LNetI2pDataDestination;[BIIIIILNetI2pClientSendMessageOptions;LNetI2pClientSendMessageStatusListener;", "LNetI2pDataDestination;[B", "LNetI2pDataDestination;[BII", "LNetI2pDataDestination;[BLNetI2pDataSessionKey;LJavaUtilSet;", "(Lnet/i2p/data/Destination;[BLnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;)Z", "LNetI2pDataDestination;[BIILNetI2pDataSessionKey;LJavaUtilSet;", "(Lnet/i2p/data/Destination;[BIILnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;)Z", "LNetI2pDataDestination;[BIILNetI2pDataSessionKey;LJavaUtilSet;J", "(Lnet/i2p/data/Destination;[BIILnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;J)Z", "receiveMessage", "sendBestEffort", "LNetI2pDataDestination;[BLNetI2pDataSessionKey;LJavaUtilSet;J", "(Lnet/i2p/data/Destination;[BLnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;J)Z", "LNetI2pDataDestination;[BJI", "sendNoEffort", "receiveStatus", "IJI", "Ljava/util/Map<Ljava/lang/Long;Lnet/i2p/client/impl/MessageState;>;", "LNetI2pClientImplI2PSessionImpl2_RemoveExpired;" };
  static const J2ObjcClassInfo _NetI2pClientImplI2PSessionImpl2 = { "I2PSessionImpl2", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x0, 28, 8, -1, 41, -1, -1, -1 };
  return &_NetI2pClientImplI2PSessionImpl2;
}

@end

void NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaUtilProperties_withNetI2pClientImplI2PClientMessageHandlerMap_(NetI2pClientImplI2PSessionImpl2 *self, NetI2pI2PAppContext *context, JavaUtilProperties *options, NetI2pClientImplI2PClientMessageHandlerMap *handlerMap) {
  NetI2pClientImplI2PSessionImpl_initWithNetI2pI2PAppContext_withJavaUtilProperties_withNetI2pClientImplI2PClientMessageHandlerMap_(self, context, options, handlerMap);
  JreStrongAssign(&self->_sendingStates_, nil);
  JreStrongAssign(&self->_sendMessageNonce_, nil);
}

NetI2pClientImplI2PSessionImpl2 *new_NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaUtilProperties_withNetI2pClientImplI2PClientMessageHandlerMap_(NetI2pI2PAppContext *context, JavaUtilProperties *options, NetI2pClientImplI2PClientMessageHandlerMap *handlerMap) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionImpl2, initWithNetI2pI2PAppContext_withJavaUtilProperties_withNetI2pClientImplI2PClientMessageHandlerMap_, context, options, handlerMap)
}

NetI2pClientImplI2PSessionImpl2 *create_NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaUtilProperties_withNetI2pClientImplI2PClientMessageHandlerMap_(NetI2pI2PAppContext *context, JavaUtilProperties *options, NetI2pClientImplI2PClientMessageHandlerMap *handlerMap) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionImpl2, initWithNetI2pI2PAppContext_withJavaUtilProperties_withNetI2pClientImplI2PClientMessageHandlerMap_, context, options, handlerMap)
}

void NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(NetI2pClientImplI2PSessionImpl2 *self, NetI2pI2PAppContext *ctx, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  NetI2pClientImplI2PSessionImpl_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(self, ctx, destKeyStream, options);
  JreStrongAssignAndConsume(&self->_sendingStates_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(32));
  JreStrongAssignAndConsume(&self->_sendMessageNonce_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  self->_noEffort_ = [@"none" isEqual:[((NSString *) nil_chk([((JavaUtilProperties *) nil_chk([self getOptions])) getPropertyWithNSString:NetI2pClientI2PClient_PROP_RELIABILITY withNSString:@""])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"i2cp.receiveStatusTime.1" withNSString:@"How long it took to get status=1 back" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"i2cp.receiveStatusTime.4" withNSString:@"How long it took to get status=4 back" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"i2cp.receiveStatusTime.5" withNSString:@"How long it took to get status=5 back" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"i2cp.tx.msgCompressed" withNSString:@"compressed size transferred" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 30 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"i2cp.tx.msgExpanded" withNSString:@"size before compression" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 30 * 60 * 1000 } count:1]];
}

NetI2pClientImplI2PSessionImpl2 *new_NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(NetI2pI2PAppContext *ctx, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionImpl2, initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_, ctx, destKeyStream, options)
}

NetI2pClientImplI2PSessionImpl2 *create_NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(NetI2pI2PAppContext *ctx, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionImpl2, initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_, ctx, destKeyStream, options)
}

void NetI2pClientImplI2PSessionImpl2_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(NetI2pClientImplI2PSessionImpl2 *self, NetI2pClientImplI2PSessionImpl *primary, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  NetI2pClientImplI2PSessionImpl_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(self, primary, destKeyStream, options);
  JreStrongAssignAndConsume(&self->_sendingStates_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(32));
  JreStrongAssignAndConsume(&self->_sendMessageNonce_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  self->_noEffort_ = [@"none" isEqual:[((NSString *) nil_chk([((JavaUtilProperties *) nil_chk([self getOptions])) getPropertyWithNSString:NetI2pClientI2PClient_PROP_RELIABILITY withNSString:@""])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"i2cp.receiveStatusTime.1" withNSString:@"How long it took to get status=1 back" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"i2cp.receiveStatusTime.4" withNSString:@"How long it took to get status=4 back" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"i2cp.receiveStatusTime.5" withNSString:@"How long it took to get status=5 back" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"i2cp.tx.msgCompressed" withNSString:@"compressed size transferred" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 30 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"i2cp.tx.msgExpanded" withNSString:@"size before compression" withNSString:@"i2cp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 30 * 60 * 1000 } count:1]];
}

NetI2pClientImplI2PSessionImpl2 *new_NetI2pClientImplI2PSessionImpl2_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(NetI2pClientImplI2PSessionImpl *primary, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionImpl2, initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_, primary, destKeyStream, options)
}

NetI2pClientImplI2PSessionImpl2 *create_NetI2pClientImplI2PSessionImpl2_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(NetI2pClientImplI2PSessionImpl *primary, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionImpl2, initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_, primary, destKeyStream, options)
}

void NetI2pClientImplI2PSessionImpl2_clearStates(NetI2pClientImplI2PSessionImpl2 *self) {
  if (self->_sendingStates_ == nil) return;
  for (NetI2pClientImplMessageState * __strong state in nil_chk([self->_sendingStates_ values])) {
    [((NetI2pClientImplMessageState *) nil_chk(state)) cancel];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$$I$", [self getPrefix], @"Disconnecting ", [self->_sendingStates_ size], @" states")];
  [self->_sendingStates_ clear];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2PSessionImpl2)

@implementation NetI2pClientImplI2PSessionImpl2_RemoveExpired

- (instancetype)initWithNetI2pClientImplI2PSessionImpl2:(NetI2pClientImplI2PSessionImpl2 *)outer$ {
  NetI2pClientImplI2PSessionImpl2_RemoveExpired_initWithNetI2pClientImplI2PSessionImpl2_(self, outer$);
  return self;
}

- (void)timeReached {
  if ([this$0_ isClosed]) return;
  if (![((id<JavaUtilMap>) nil_chk(this$0_->_sendingStates_)) isEmpty]) {
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) clock])) now];
    for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([this$0_->_sendingStates_ values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pClientImplMessageState *state = [iter next];
      if ([((NetI2pClientImplMessageState *) nil_chk(state)) getExpires] < now) [iter remove];
    }
  }
  [self scheduleWithLong:NetI2pClientImplI2PSessionImpl2_REMOVE_EXPIRED_TIME];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pClientImplI2PSessionImpl2:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pClientImplI2PSessionImpl2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pClientImplI2PSessionImpl2;" };
  static const J2ObjcClassInfo _NetI2pClientImplI2PSessionImpl2_RemoveExpired = { "RemoveExpired", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pClientImplI2PSessionImpl2_RemoveExpired;
}

@end

void NetI2pClientImplI2PSessionImpl2_RemoveExpired_initWithNetI2pClientImplI2PSessionImpl2_(NetI2pClientImplI2PSessionImpl2_RemoveExpired *self, NetI2pClientImplI2PSessionImpl2 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_(self, [((NetI2pI2PAppContext *) nil_chk(outer$->_context_)) simpleTimer2], NetI2pClientImplI2PSessionImpl2_REMOVE_EXPIRED_TIME);
}

NetI2pClientImplI2PSessionImpl2_RemoveExpired *new_NetI2pClientImplI2PSessionImpl2_RemoveExpired_initWithNetI2pClientImplI2PSessionImpl2_(NetI2pClientImplI2PSessionImpl2 *outer$) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionImpl2_RemoveExpired, initWithNetI2pClientImplI2PSessionImpl2_, outer$)
}

NetI2pClientImplI2PSessionImpl2_RemoveExpired *create_NetI2pClientImplI2PSessionImpl2_RemoveExpired_initWithNetI2pClientImplI2PSessionImpl2_(NetI2pClientImplI2PSessionImpl2 *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionImpl2_RemoveExpired, initWithNetI2pClientImplI2PSessionImpl2_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2PSessionImpl2_RemoveExpired)
