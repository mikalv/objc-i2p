//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/HostReplyMessageHandler.java
//

#include "J2ObjC_source.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/impl/HandlerImpl.h"
#include "net/i2p/client/impl/HostReplyMessageHandler.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/i2cp/HostReplyMessage.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/util/Log.h"

@implementation NetI2pClientImplHostReplyMessageHandler

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  NetI2pClientImplHostReplyMessageHandler_initWithNetI2pI2PAppContext_(self, ctx);
  return self;
}

- (void)handleMessageWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)message
                withNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)session {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Handle message ", message)];
  NetI2pDataI2cpHostReplyMessage *msg = (NetI2pDataI2cpHostReplyMessage *) cast_chk(message, [NetI2pDataI2cpHostReplyMessage class]);
  NetI2pDataDestination *d = [((NetI2pDataI2cpHostReplyMessage *) nil_chk(msg)) getDestination];
  jlong id_ = [msg getReqID];
  if (d != nil) {
    [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) destReceivedWithLong:id_ withNetI2pDataDestination:d];
  }
  else {
    [((NetI2pClientImplI2PSessionImpl *) nil_chk(session)) destLookupFailedWithLong:id_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(handleMessageWithNetI2pDataI2cpI2CPMessage:withNetI2pClientImplI2PSessionImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "handleMessage", "LNetI2pDataI2cpI2CPMessage;LNetI2pClientImplI2PSessionImpl;" };
  static const J2ObjcClassInfo _NetI2pClientImplHostReplyMessageHandler = { "HostReplyMessageHandler", "net.i2p.client.impl", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pClientImplHostReplyMessageHandler;
}

@end

void NetI2pClientImplHostReplyMessageHandler_initWithNetI2pI2PAppContext_(NetI2pClientImplHostReplyMessageHandler *self, NetI2pI2PAppContext *ctx) {
  NetI2pClientImplHandlerImpl_initWithNetI2pI2PAppContext_withInt_(self, ctx, NetI2pDataI2cpHostReplyMessage_MESSAGE_TYPE);
}

NetI2pClientImplHostReplyMessageHandler *new_NetI2pClientImplHostReplyMessageHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pClientImplHostReplyMessageHandler, initWithNetI2pI2PAppContext_, ctx)
}

NetI2pClientImplHostReplyMessageHandler *create_NetI2pClientImplHostReplyMessageHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplHostReplyMessageHandler, initWithNetI2pI2PAppContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplHostReplyMessageHandler)
