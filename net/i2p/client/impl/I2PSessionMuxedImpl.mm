//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/I2PSessionMuxedImpl.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PSession.h"
#include "net/i2p/client/I2PSessionListener.h"
#include "net/i2p/client/I2PSessionMuxedListener.h"
#include "net/i2p/client/SendMessageOptions.h"
#include "net/i2p/client/SendMessageStatusListener.h"
#include "net/i2p/client/impl/I2CPMessageProducer.h"
#include "net/i2p/client/impl/I2PSessionDemultiplexer.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/client/impl/I2PSessionImpl2.h"
#include "net/i2p/client/impl/I2PSessionMuxedImpl.h"
#include "net/i2p/client/impl/MessageState.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Payload.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/i2cp/MessagePayloadMessage.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"

static void (*NetI2pClientImplI2PSessionMuxedImpl_super$_setSessionListenerWithNetI2pClientI2PSessionListener_)(id, SEL, id);

@interface NetI2pClientImplI2PSessionMuxedImpl () {
 @public
  NetI2pClientImplI2PSessionDemultiplexer *_demultiplexer_;
}

- (IOSByteArray *)prepPayloadWithByteArray:(IOSByteArray *)payload
                                   withInt:(jint)offset
                                   withInt:(jint)size
                                   withInt:(jint)proto
                                   withInt:(jint)fromPort
                                   withInt:(jint)toPort
withNetI2pClientSendMessageOptions_GzipOption:(NetI2pClientSendMessageOptions_GzipOption *)gzo;

- (void)sendNoEffortWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withByteArray:(IOSByteArray *)payload
           withNetI2pClientSendMessageOptions:(NetI2pClientSendMessageOptions *)options;

+ (jint)getProtoWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg;

+ (jint)getFromPortWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg;

+ (jint)getToPortWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg;

+ (jint)getByteWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg
                                               withInt:(jint)i;

+ (void)setProtoWithByteArray:(IOSByteArray *)payload
                      withInt:(jint)p;

+ (void)setFromPortWithByteArray:(IOSByteArray *)payload
                         withInt:(jint)p;

+ (void)setToPortWithByteArray:(IOSByteArray *)payload
                       withInt:(jint)p;

@end

J2OBJC_FIELD_SETTER(NetI2pClientImplI2PSessionMuxedImpl, _demultiplexer_, NetI2pClientImplI2PSessionDemultiplexer *)

inline jint NetI2pClientImplI2PSessionMuxedImpl_get_PROTO_BYTE(void);
#define NetI2pClientImplI2PSessionMuxedImpl_PROTO_BYTE 9
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSessionMuxedImpl, PROTO_BYTE, jint)

inline jint NetI2pClientImplI2PSessionMuxedImpl_get_FROMPORT_BYTES(void);
#define NetI2pClientImplI2PSessionMuxedImpl_FROMPORT_BYTES 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSessionMuxedImpl, FROMPORT_BYTES, jint)

inline jint NetI2pClientImplI2PSessionMuxedImpl_get_TOPORT_BYTES(void);
#define NetI2pClientImplI2PSessionMuxedImpl_TOPORT_BYTES 6
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSessionMuxedImpl, TOPORT_BYTES, jint)

__attribute__((unused)) static IOSByteArray *NetI2pClientImplI2PSessionMuxedImpl_prepPayloadWithByteArray_withInt_withInt_withInt_withInt_withInt_withNetI2pClientSendMessageOptions_GzipOption_(NetI2pClientImplI2PSessionMuxedImpl *self, IOSByteArray *payload, jint offset, jint size, jint proto, jint fromPort, jint toPort, NetI2pClientSendMessageOptions_GzipOption *gzo);

__attribute__((unused)) static void NetI2pClientImplI2PSessionMuxedImpl_sendNoEffortWithNetI2pDataDestination_withByteArray_withNetI2pClientSendMessageOptions_(NetI2pClientImplI2PSessionMuxedImpl *self, NetI2pDataDestination *dest, IOSByteArray *payload, NetI2pClientSendMessageOptions *options);

__attribute__((unused)) static jint NetI2pClientImplI2PSessionMuxedImpl_getProtoWithNetI2pDataI2cpMessagePayloadMessage_(NetI2pDataI2cpMessagePayloadMessage *msg);

__attribute__((unused)) static jint NetI2pClientImplI2PSessionMuxedImpl_getFromPortWithNetI2pDataI2cpMessagePayloadMessage_(NetI2pDataI2cpMessagePayloadMessage *msg);

__attribute__((unused)) static jint NetI2pClientImplI2PSessionMuxedImpl_getToPortWithNetI2pDataI2cpMessagePayloadMessage_(NetI2pDataI2cpMessagePayloadMessage *msg);

__attribute__((unused)) static jint NetI2pClientImplI2PSessionMuxedImpl_getByteWithNetI2pDataI2cpMessagePayloadMessage_withInt_(NetI2pDataI2cpMessagePayloadMessage *msg, jint i);

__attribute__((unused)) static void NetI2pClientImplI2PSessionMuxedImpl_setProtoWithByteArray_withInt_(IOSByteArray *payload, jint p);

__attribute__((unused)) static void NetI2pClientImplI2PSessionMuxedImpl_setFromPortWithByteArray_withInt_(IOSByteArray *payload, jint p);

__attribute__((unused)) static void NetI2pClientImplI2PSessionMuxedImpl_setToPortWithByteArray_withInt_(IOSByteArray *payload, jint p);

@interface NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier () {
 @public
  NetI2pClientImplI2PSessionMuxedImpl *this$1_;
  JavaUtilConcurrentLinkedBlockingQueue *_msgs_;
  volatile_jboolean _alive_MuxedAvailabilityNotifier_;
  JavaUtilConcurrentAtomicAtomicBoolean *stopping_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier, _msgs_, JavaUtilConcurrentLinkedBlockingQueue *)
J2OBJC_FIELD_SETTER(NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier, stopping_, JavaUtilConcurrentAtomicAtomicBoolean *)

inline jint NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_get_POISON_SIZE(void);
#define NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_POISON_SIZE -99999
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier, POISON_SIZE, jint)

@interface NetI2pClientImplI2PSessionMuxedImpl_MsgData : NSObject {
 @public
  jint id__;
  jint size_;
  jint proto_;
  jint fromPort_;
  jint toPort_;
}

- (instancetype)initWithInt:(jint)i
                    withInt:(jint)s
                    withInt:(jint)p
                    withInt:(jint)f
                    withInt:(jint)t;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pClientImplI2PSessionMuxedImpl_MsgData)

__attribute__((unused)) static void NetI2pClientImplI2PSessionMuxedImpl_MsgData_initWithInt_withInt_withInt_withInt_withInt_(NetI2pClientImplI2PSessionMuxedImpl_MsgData *self, jint i, jint s, jint p, jint f, jint t);

__attribute__((unused)) static NetI2pClientImplI2PSessionMuxedImpl_MsgData *new_NetI2pClientImplI2PSessionMuxedImpl_MsgData_initWithInt_withInt_withInt_withInt_withInt_(jint i, jint s, jint p, jint f, jint t) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pClientImplI2PSessionMuxedImpl_MsgData *create_NetI2pClientImplI2PSessionMuxedImpl_MsgData_initWithInt_withInt_withInt_withInt_withInt_(jint i, jint s, jint p, jint f, jint t);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pClientImplI2PSessionMuxedImpl_MsgData)

J2OBJC_INITIALIZED_DEFN(NetI2pClientImplI2PSessionMuxedImpl)

@implementation NetI2pClientImplI2PSessionMuxedImpl

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                      withJavaIoInputStream:(JavaIoInputStream *)destKeyStream
                     withJavaUtilProperties:(JavaUtilProperties *)options {
  NetI2pClientImplI2PSessionMuxedImpl_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(self, ctx, destKeyStream, options);
  return self;
}

- (instancetype)initWithNetI2pClientImplI2PSessionImpl:(NetI2pClientImplI2PSessionImpl *)primary
                                 withJavaIoInputStream:(JavaIoInputStream *)destKeyStream
                                withJavaUtilProperties:(JavaUtilProperties *)options {
  NetI2pClientImplI2PSessionMuxedImpl_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(self, primary, destKeyStream, options);
  return self;
}

- (void)setSessionListenerWithNetI2pClientI2PSessionListener:(id<NetI2pClientI2PSessionListener>)lsnr {
  [((NetI2pClientImplI2PSessionDemultiplexer *) nil_chk(_demultiplexer_)) addListenerWithNetI2pClientI2PSessionListener:lsnr withInt:NetI2pClientI2PSession_PROTO_ANY withInt:NetI2pClientI2PSession_PORT_ANY];
}

- (void)addSessionListenerWithNetI2pClientI2PSessionListener:(id<NetI2pClientI2PSessionListener>)lsnr
                                                     withInt:(jint)proto
                                                     withInt:(jint)port {
  [((NetI2pClientImplI2PSessionDemultiplexer *) nil_chk(_demultiplexer_)) addListenerWithNetI2pClientI2PSessionListener:lsnr withInt:proto withInt:port];
}

- (void)addMuxedSessionListenerWithNetI2pClientI2PSessionMuxedListener:(id<NetI2pClientI2PSessionMuxedListener>)l
                                                               withInt:(jint)proto
                                                               withInt:(jint)port {
  [((NetI2pClientImplI2PSessionDemultiplexer *) nil_chk(_demultiplexer_)) addMuxedListenerWithNetI2pClientI2PSessionMuxedListener:l withInt:proto withInt:port];
}

- (void)removeListenerWithInt:(jint)proto
                      withInt:(jint)port {
  [((NetI2pClientImplI2PSessionDemultiplexer *) nil_chk(_demultiplexer_)) removeListenerWithInt:proto withInt:port];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload {
  return [self sendMessageWithNetI2pDataDestination:dest withByteArray:payload withInt:0 withInt:((IOSByteArray *) nil_chk(payload))->size_ withNetI2pDataSessionKey:nil withJavaUtilSet:nil withLong:0 withInt:NetI2pClientI2PSession_PROTO_UNSPECIFIED withInt:NetI2pClientI2PSession_PORT_UNSPECIFIED withInt:NetI2pClientI2PSession_PORT_UNSPECIFIED];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)proto
                                         withInt:(jint)fromport
                                         withInt:(jint)toport {
  return [self sendMessageWithNetI2pDataDestination:dest withByteArray:payload withInt:0 withInt:((IOSByteArray *) nil_chk(payload))->size_ withNetI2pDataSessionKey:nil withJavaUtilSet:nil withLong:0 withInt:proto withInt:fromport withInt:toport];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent
                                        withLong:(jlong)expires {
  return [self sendMessageWithNetI2pDataDestination:dest withByteArray:payload withInt:offset withInt:size withNetI2pDataSessionKey:keyUsed withJavaUtilSet:tagsSent withLong:0 withInt:NetI2pClientI2PSession_PROTO_UNSPECIFIED withInt:NetI2pClientI2PSession_PORT_UNSPECIFIED withInt:NetI2pClientI2PSession_PORT_UNSPECIFIED];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent
                                         withInt:(jint)proto
                                         withInt:(jint)fromport
                                         withInt:(jint)toport {
  return [self sendMessageWithNetI2pDataDestination:dest withByteArray:payload withInt:offset withInt:size withNetI2pDataSessionKey:keyUsed withJavaUtilSet:tagsSent withLong:0 withInt:proto withInt:fromport withInt:toport];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent
                                        withLong:(jlong)expires
                                         withInt:(jint)proto
                                         withInt:(jint)fromPort
                                         withInt:(jint)toPort {
  return [self sendMessageWithNetI2pDataDestination:dest withByteArray:payload withInt:offset withInt:size withNetI2pDataSessionKey:keyUsed withJavaUtilSet:tagsSent withLong:0 withInt:proto withInt:fromPort withInt:toPort withInt:0];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                        withNetI2pDataSessionKey:(NetI2pDataSessionKey *)keyUsed
                                 withJavaUtilSet:(id<JavaUtilSet>)tagsSent
                                        withLong:(jlong)expires
                                         withInt:(jint)proto
                                         withInt:(jint)fromPort
                                         withInt:(jint)toPort
                                         withInt:(jint)flags {
  payload = NetI2pClientImplI2PSessionMuxedImpl_prepPayloadWithByteArray_withInt_withInt_withInt_withInt_withInt_withNetI2pClientSendMessageOptions_GzipOption_(self, payload, offset, size, proto, fromPort, toPort, JreLoadEnum(NetI2pClientSendMessageOptions_GzipOption, DEFAULT));
  if (_noEffort_) return [self sendNoEffortWithNetI2pDataDestination:dest withByteArray:payload withLong:expires withInt:flags];
  else return [self sendBestEffortWithNetI2pDataDestination:dest withByteArray:payload withLong:expires withInt:flags];
}

- (jboolean)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                   withByteArray:(IOSByteArray *)payload
                                         withInt:(jint)offset
                                         withInt:(jint)size
                                         withInt:(jint)proto
                                         withInt:(jint)fromPort
                                         withInt:(jint)toPort
              withNetI2pClientSendMessageOptions:(NetI2pClientSendMessageOptions *)options {
  payload = NetI2pClientImplI2PSessionMuxedImpl_prepPayloadWithByteArray_withInt_withInt_withInt_withInt_withInt_withNetI2pClientSendMessageOptions_GzipOption_(self, payload, offset, size, proto, fromPort, toPort, [((NetI2pClientSendMessageOptions *) nil_chk(options)) getGzip]);
  NetI2pClientImplI2PSessionMuxedImpl_sendNoEffortWithNetI2pDataDestination_withByteArray_withNetI2pClientSendMessageOptions_(self, dest, payload, options);
  return true;
}

- (jlong)sendMessageWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withByteArray:(IOSByteArray *)payload
                                      withInt:(jint)offset
                                      withInt:(jint)size
                                      withInt:(jint)proto
                                      withInt:(jint)fromPort
                                      withInt:(jint)toPort
           withNetI2pClientSendMessageOptions:(NetI2pClientSendMessageOptions *)options
    withNetI2pClientSendMessageStatusListener:(id<NetI2pClientSendMessageStatusListener>)listener {
  payload = NetI2pClientImplI2PSessionMuxedImpl_prepPayloadWithByteArray_withInt_withInt_withInt_withInt_withInt_withNetI2pClientSendMessageOptions_GzipOption_(self, payload, offset, size, proto, fromPort, toPort, [((NetI2pClientSendMessageOptions *) nil_chk(options)) getGzip]);
  jlong nonce = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_sendMessageNonce_)) incrementAndGet];
  jlong expires = JavaLangMath_maxWithLong_withLong_([((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] + 60 * 1000LL, [options getTime]);
  NetI2pClientImplMessageState *state = create_NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNetI2pClientI2PSession_withLong_withNetI2pClientSendMessageStatusListener_(_context_, nonce, self, expires, listener);
  [((id<JavaUtilMap>) nil_chk(_sendingStates_)) putWithId:JavaLangLong_valueOfWithLong_(nonce) withId:state];
  [((NetI2pClientImplI2CPMessageProducer *) nil_chk(_producer_)) sendMessageWithNetI2pClientImplI2PSessionImpl:self withNetI2pDataDestination:dest withLong:nonce withByteArray:payload withNetI2pClientSendMessageOptions:options];
  return nonce;
}

- (IOSByteArray *)prepPayloadWithByteArray:(IOSByteArray *)payload
                                   withInt:(jint)offset
                                   withInt:(jint)size
                                   withInt:(jint)proto
                                   withInt:(jint)fromPort
                                   withInt:(jint)toPort
withNetI2pClientSendMessageOptions_GzipOption:(NetI2pClientSendMessageOptions_GzipOption *)gzo {
  return NetI2pClientImplI2PSessionMuxedImpl_prepPayloadWithByteArray_withInt_withInt_withInt_withInt_withInt_withNetI2pClientSendMessageOptions_GzipOption_(self, payload, offset, size, proto, fromPort, toPort, gzo);
}

- (void)sendNoEffortWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withByteArray:(IOSByteArray *)payload
           withNetI2pClientSendMessageOptions:(NetI2pClientSendMessageOptions *)options {
  NetI2pClientImplI2PSessionMuxedImpl_sendNoEffortWithNetI2pDataDestination_withByteArray_withNetI2pClientSendMessageOptions_(self, dest, payload, options);
}

- (void)addNewMessageWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg {
  JavaLangLong *mid = JavaLangLong_valueOfWithLong_([((NetI2pDataI2cpMessagePayloadMessage *) nil_chk(msg)) getMessageId]);
  [((id<JavaUtilMap>) nil_chk(_availableMessages_)) putWithId:mid withId:msg];
  jlong id_ = [msg getMessageId];
  IOSByteArray *data = [((NetI2pDataPayload *) nil_chk([msg getPayload])) getUnencryptedData];
  if ((data == nil) || (((IOSByteArray *) nil_chk(data))->size_ <= 0)) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_CRIT]) [_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$", [self getPrefix], @"addNewMessage of a message with no unencrypted data") withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Empty message")];
    return;
  }
  jint size = ((IOSByteArray *) nil_chk(data))->size_;
  if (size < 10) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$I", [self getPrefix], @"length too short for gzip header: ", size)];
    return;
  }
  [((NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier *) nil_chk(((NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier *) cast_chk(_availabilityNotifier_, [NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier class])))) availableWithLong:id_ withInt:size withInt:NetI2pClientImplI2PSessionMuxedImpl_getProtoWithNetI2pDataI2cpMessagePayloadMessage_(msg) withInt:NetI2pClientImplI2PSessionMuxedImpl_getFromPortWithNetI2pDataI2cpMessagePayloadMessage_(msg) withInt:NetI2pClientImplI2PSessionMuxedImpl_getToPortWithNetI2pDataI2cpMessagePayloadMessage_(msg)];
}

+ (jint)getProtoWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg {
  return NetI2pClientImplI2PSessionMuxedImpl_getProtoWithNetI2pDataI2cpMessagePayloadMessage_(msg);
}

+ (jint)getFromPortWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg {
  return NetI2pClientImplI2PSessionMuxedImpl_getFromPortWithNetI2pDataI2cpMessagePayloadMessage_(msg);
}

+ (jint)getToPortWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg {
  return NetI2pClientImplI2PSessionMuxedImpl_getToPortWithNetI2pDataI2cpMessagePayloadMessage_(msg);
}

+ (jint)getByteWithNetI2pDataI2cpMessagePayloadMessage:(NetI2pDataI2cpMessagePayloadMessage *)msg
                                               withInt:(jint)i {
  return NetI2pClientImplI2PSessionMuxedImpl_getByteWithNetI2pDataI2cpMessagePayloadMessage_withInt_(msg, i);
}

+ (void)setProtoWithByteArray:(IOSByteArray *)payload
                      withInt:(jint)p {
  NetI2pClientImplI2PSessionMuxedImpl_setProtoWithByteArray_withInt_(payload, p);
}

+ (void)setFromPortWithByteArray:(IOSByteArray *)payload
                         withInt:(jint)p {
  NetI2pClientImplI2PSessionMuxedImpl_setFromPortWithByteArray_withInt_(payload, p);
}

+ (void)setToPortWithByteArray:(IOSByteArray *)payload
                       withInt:(jint)p {
  NetI2pClientImplI2PSessionMuxedImpl_setToPortWithByteArray_withInt_(payload, p);
}

- (void)dealloc {
  RELEASE_(_demultiplexer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 13, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 14, 1, 15, -1, -1 },
    { NULL, "Z", 0x1, 11, 16, 1, 17, -1, -1 },
    { NULL, "Z", 0x1, 11, 18, 1, 19, -1, -1 },
    { NULL, "Z", 0x1, 11, 20, 1, 21, -1, -1 },
    { NULL, "Z", 0x1, 11, 22, 1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 23, 1, -1, -1, -1 },
    { NULL, "[B", 0x2, 24, 25, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 30, 29, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 31, 29, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 32, 29, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 37, 36, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withJavaIoInputStream:withJavaUtilProperties:);
  methods[1].selector = @selector(initWithNetI2pClientImplI2PSessionImpl:withJavaIoInputStream:withJavaUtilProperties:);
  methods[2].selector = @selector(setSessionListenerWithNetI2pClientI2PSessionListener:);
  methods[3].selector = @selector(addSessionListenerWithNetI2pClientI2PSessionListener:withInt:withInt:);
  methods[4].selector = @selector(addMuxedSessionListenerWithNetI2pClientI2PSessionMuxedListener:withInt:withInt:);
  methods[5].selector = @selector(removeListenerWithInt:withInt:);
  methods[6].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:);
  methods[7].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withInt:);
  methods[8].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withNetI2pDataSessionKey:withJavaUtilSet:withLong:);
  methods[9].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withNetI2pDataSessionKey:withJavaUtilSet:withInt:withInt:withInt:);
  methods[10].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withNetI2pDataSessionKey:withJavaUtilSet:withLong:withInt:withInt:withInt:);
  methods[11].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withNetI2pDataSessionKey:withJavaUtilSet:withLong:withInt:withInt:withInt:withInt:);
  methods[12].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withInt:withInt:withInt:withNetI2pClientSendMessageOptions:);
  methods[13].selector = @selector(sendMessageWithNetI2pDataDestination:withByteArray:withInt:withInt:withInt:withInt:withInt:withNetI2pClientSendMessageOptions:withNetI2pClientSendMessageStatusListener:);
  methods[14].selector = @selector(prepPayloadWithByteArray:withInt:withInt:withInt:withInt:withInt:withNetI2pClientSendMessageOptions_GzipOption:);
  methods[15].selector = @selector(sendNoEffortWithNetI2pDataDestination:withByteArray:withNetI2pClientSendMessageOptions:);
  methods[16].selector = @selector(addNewMessageWithNetI2pDataI2cpMessagePayloadMessage:);
  methods[17].selector = @selector(getProtoWithNetI2pDataI2cpMessagePayloadMessage:);
  methods[18].selector = @selector(getFromPortWithNetI2pDataI2cpMessagePayloadMessage:);
  methods[19].selector = @selector(getToPortWithNetI2pDataI2cpMessagePayloadMessage:);
  methods[20].selector = @selector(getByteWithNetI2pDataI2cpMessagePayloadMessage:withInt:);
  methods[21].selector = @selector(setProtoWithByteArray:withInt:);
  methods[22].selector = @selector(setFromPortWithByteArray:withInt:);
  methods[23].selector = @selector(setToPortWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_demultiplexer_", "LNetI2pClientImplI2PSessionDemultiplexer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PROTO_BYTE", "I", .constantValue.asInt = NetI2pClientImplI2PSessionMuxedImpl_PROTO_BYTE, 0x1a, -1, -1, -1, -1 },
    { "FROMPORT_BYTES", "I", .constantValue.asInt = NetI2pClientImplI2PSessionMuxedImpl_FROMPORT_BYTES, 0x1a, -1, -1, -1, -1 },
    { "TOPORT_BYTES", "I", .constantValue.asInt = NetI2pClientImplI2PSessionMuxedImpl_TOPORT_BYTES, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LJavaIoInputStream;LJavaUtilProperties;", "LNetI2pClientI2PSessionException;", "LNetI2pClientImplI2PSessionImpl;LJavaIoInputStream;LJavaUtilProperties;", "setSessionListener", "LNetI2pClientI2PSessionListener;", "addSessionListener", "LNetI2pClientI2PSessionListener;II", "addMuxedSessionListener", "LNetI2pClientI2PSessionMuxedListener;II", "removeListener", "II", "sendMessage", "LNetI2pDataDestination;[B", "LNetI2pDataDestination;[BIII", "LNetI2pDataDestination;[BIILNetI2pDataSessionKey;LJavaUtilSet;J", "(Lnet/i2p/data/Destination;[BIILnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;J)Z", "LNetI2pDataDestination;[BIILNetI2pDataSessionKey;LJavaUtilSet;III", "(Lnet/i2p/data/Destination;[BIILnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;III)Z", "LNetI2pDataDestination;[BIILNetI2pDataSessionKey;LJavaUtilSet;JIII", "(Lnet/i2p/data/Destination;[BIILnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;JIII)Z", "LNetI2pDataDestination;[BIILNetI2pDataSessionKey;LJavaUtilSet;JIIII", "(Lnet/i2p/data/Destination;[BIILnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;JIIII)Z", "LNetI2pDataDestination;[BIIIIILNetI2pClientSendMessageOptions;", "LNetI2pDataDestination;[BIIIIILNetI2pClientSendMessageOptions;LNetI2pClientSendMessageStatusListener;", "prepPayload", "[BIIIIILNetI2pClientSendMessageOptions_GzipOption;", "sendNoEffort", "LNetI2pDataDestination;[BLNetI2pClientSendMessageOptions;", "addNewMessage", "LNetI2pDataI2cpMessagePayloadMessage;", "getProto", "getFromPort", "getToPort", "getByte", "LNetI2pDataI2cpMessagePayloadMessage;I", "setProto", "[BI", "setFromPort", "setToPort", "LNetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier;LNetI2pClientImplI2PSessionMuxedImpl_MsgData;" };
  static const J2ObjcClassInfo _NetI2pClientImplI2PSessionMuxedImpl = { "I2PSessionMuxedImpl", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x0, 24, 4, -1, 39, -1, -1, -1 };
  return &_NetI2pClientImplI2PSessionMuxedImpl;
}

+ (void)initialize {
  if (self == [NetI2pClientImplI2PSessionMuxedImpl class]) {
    NetI2pClientImplI2PSessionMuxedImpl_super$_setSessionListenerWithNetI2pClientI2PSessionListener_ = (void (*)(id, SEL, id))[NetI2pClientImplI2PSessionImpl2 instanceMethodForSelector:@selector(setSessionListenerWithNetI2pClientI2PSessionListener:)];
    J2OBJC_SET_INITIALIZED(NetI2pClientImplI2PSessionMuxedImpl)
  }
}

@end

void NetI2pClientImplI2PSessionMuxedImpl_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(NetI2pClientImplI2PSessionMuxedImpl *self, NetI2pI2PAppContext *ctx, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  NetI2pClientImplI2PSessionImpl2_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(self, ctx, destKeyStream, options);
  JreStrongAssignAndConsume(&self->_demultiplexer_, new_NetI2pClientImplI2PSessionDemultiplexer_initWithNetI2pI2PAppContext_(ctx));
  NetI2pClientImplI2PSessionMuxedImpl_super$_setSessionListenerWithNetI2pClientI2PSessionListener_(self, @selector(setSessionListenerWithNetI2pClientI2PSessionListener:), self->_demultiplexer_);
  JreStrongAssignAndConsume(&self->_availabilityNotifier_, new_NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_initWithNetI2pClientImplI2PSessionMuxedImpl_(self));
}

NetI2pClientImplI2PSessionMuxedImpl *new_NetI2pClientImplI2PSessionMuxedImpl_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(NetI2pI2PAppContext *ctx, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionMuxedImpl, initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_, ctx, destKeyStream, options)
}

NetI2pClientImplI2PSessionMuxedImpl *create_NetI2pClientImplI2PSessionMuxedImpl_initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_(NetI2pI2PAppContext *ctx, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionMuxedImpl, initWithNetI2pI2PAppContext_withJavaIoInputStream_withJavaUtilProperties_, ctx, destKeyStream, options)
}

void NetI2pClientImplI2PSessionMuxedImpl_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(NetI2pClientImplI2PSessionMuxedImpl *self, NetI2pClientImplI2PSessionImpl *primary, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  NetI2pClientImplI2PSessionImpl2_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(self, primary, destKeyStream, options);
  JreStrongAssignAndConsume(&self->_demultiplexer_, new_NetI2pClientImplI2PSessionDemultiplexer_initWithNetI2pI2PAppContext_([((NetI2pClientImplI2PSessionImpl *) nil_chk(primary)) getContext]));
  NetI2pClientImplI2PSessionMuxedImpl_super$_setSessionListenerWithNetI2pClientI2PSessionListener_(self, @selector(setSessionListenerWithNetI2pClientI2PSessionListener:), self->_demultiplexer_);
  JreStrongAssignAndConsume(&self->_availabilityNotifier_, new_NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_initWithNetI2pClientImplI2PSessionMuxedImpl_(self));
}

NetI2pClientImplI2PSessionMuxedImpl *new_NetI2pClientImplI2PSessionMuxedImpl_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(NetI2pClientImplI2PSessionImpl *primary, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionMuxedImpl, initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_, primary, destKeyStream, options)
}

NetI2pClientImplI2PSessionMuxedImpl *create_NetI2pClientImplI2PSessionMuxedImpl_initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_(NetI2pClientImplI2PSessionImpl *primary, JavaIoInputStream *destKeyStream, JavaUtilProperties *options) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionMuxedImpl, initWithNetI2pClientImplI2PSessionImpl_withJavaIoInputStream_withJavaUtilProperties_, primary, destKeyStream, options)
}

IOSByteArray *NetI2pClientImplI2PSessionMuxedImpl_prepPayloadWithByteArray_withInt_withInt_withInt_withInt_withInt_withNetI2pClientSendMessageOptions_GzipOption_(NetI2pClientImplI2PSessionMuxedImpl *self, IOSByteArray *payload, jint offset, jint size, jint proto, jint fromPort, jint toPort, NetI2pClientSendMessageOptions_GzipOption *gzo) {
  [self verifyOpen];
  [self updateActivity];
  jboolean docompress;
  if (gzo == JreLoadEnum(NetI2pClientSendMessageOptions_GzipOption, DEFAULT)) docompress = [self shouldCompressWithInt:size];
  else docompress = (gzo == JreLoadEnum(NetI2pClientSendMessageOptions_GzipOption, GZIP_ON));
  if (docompress) payload = NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_(payload, offset, size);
  else payload = NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_withInt_(payload, offset, size, NetI2pDataDataHelper_NO_COMPRESSION);
  NetI2pClientImplI2PSessionMuxedImpl_setProtoWithByteArray_withInt_(payload, proto);
  NetI2pClientImplI2PSessionMuxedImpl_setFromPortWithByteArray_withInt_(payload, fromPort);
  NetI2pClientImplI2PSessionMuxedImpl_setToPortWithByteArray_withInt_(payload, toPort);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"i2cp.tx.msgCompressed" withLong:((IOSByteArray *) nil_chk(payload))->size_];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"i2cp.tx.msgExpanded" withLong:size];
  return payload;
}

void NetI2pClientImplI2PSessionMuxedImpl_sendNoEffortWithNetI2pDataDestination_withByteArray_withNetI2pClientSendMessageOptions_(NetI2pClientImplI2PSessionMuxedImpl *self, NetI2pDataDestination *dest, IOSByteArray *payload, NetI2pClientSendMessageOptions *options) {
  [((NetI2pClientImplI2CPMessageProducer *) nil_chk(self->_producer_)) sendMessageWithNetI2pClientImplI2PSessionImpl:self withNetI2pDataDestination:dest withLong:0 withByteArray:payload withNetI2pClientSendMessageOptions:options];
}

jint NetI2pClientImplI2PSessionMuxedImpl_getProtoWithNetI2pDataI2cpMessagePayloadMessage_(NetI2pDataI2cpMessagePayloadMessage *msg) {
  NetI2pClientImplI2PSessionMuxedImpl_initialize();
  jint rv = NetI2pClientImplI2PSessionMuxedImpl_getByteWithNetI2pDataI2cpMessagePayloadMessage_withInt_(msg, NetI2pClientImplI2PSessionMuxedImpl_PROTO_BYTE) & (jint) 0xff;
  return rv == (jint) 0xff ? NetI2pClientI2PSession_PROTO_UNSPECIFIED : rv;
}

jint NetI2pClientImplI2PSessionMuxedImpl_getFromPortWithNetI2pDataI2cpMessagePayloadMessage_(NetI2pDataI2cpMessagePayloadMessage *msg) {
  NetI2pClientImplI2PSessionMuxedImpl_initialize();
  return ((JreLShift32((NetI2pClientImplI2PSessionMuxedImpl_getByteWithNetI2pDataI2cpMessagePayloadMessage_withInt_(msg, NetI2pClientImplI2PSessionMuxedImpl_FROMPORT_BYTES) & (jint) 0xff), 8)) | (NetI2pClientImplI2PSessionMuxedImpl_getByteWithNetI2pDataI2cpMessagePayloadMessage_withInt_(msg, NetI2pClientImplI2PSessionMuxedImpl_FROMPORT_BYTES + 1) & (jint) 0xff));
}

jint NetI2pClientImplI2PSessionMuxedImpl_getToPortWithNetI2pDataI2cpMessagePayloadMessage_(NetI2pDataI2cpMessagePayloadMessage *msg) {
  NetI2pClientImplI2PSessionMuxedImpl_initialize();
  return ((JreLShift32((NetI2pClientImplI2PSessionMuxedImpl_getByteWithNetI2pDataI2cpMessagePayloadMessage_withInt_(msg, NetI2pClientImplI2PSessionMuxedImpl_TOPORT_BYTES) & (jint) 0xff), 8)) | (NetI2pClientImplI2PSessionMuxedImpl_getByteWithNetI2pDataI2cpMessagePayloadMessage_withInt_(msg, NetI2pClientImplI2PSessionMuxedImpl_TOPORT_BYTES + 1) & (jint) 0xff));
}

jint NetI2pClientImplI2PSessionMuxedImpl_getByteWithNetI2pDataI2cpMessagePayloadMessage_withInt_(NetI2pDataI2cpMessagePayloadMessage *msg, jint i) {
  NetI2pClientImplI2PSessionMuxedImpl_initialize();
  return IOSByteArray_Get(nil_chk([((NetI2pDataPayload *) nil_chk([((NetI2pDataI2cpMessagePayloadMessage *) nil_chk(msg)) getPayload])) getUnencryptedData]), i) & (jint) 0xff;
}

void NetI2pClientImplI2PSessionMuxedImpl_setProtoWithByteArray_withInt_(IOSByteArray *payload, jint p) {
  NetI2pClientImplI2PSessionMuxedImpl_initialize();
  *IOSByteArray_GetRef(nil_chk(payload), NetI2pClientImplI2PSessionMuxedImpl_PROTO_BYTE) = (jbyte) (p & (jint) 0xff);
}

void NetI2pClientImplI2PSessionMuxedImpl_setFromPortWithByteArray_withInt_(IOSByteArray *payload, jint p) {
  NetI2pClientImplI2PSessionMuxedImpl_initialize();
  *IOSByteArray_GetRef(nil_chk(payload), NetI2pClientImplI2PSessionMuxedImpl_FROMPORT_BYTES) = (jbyte) ((JreRShift32(p, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(payload, NetI2pClientImplI2PSessionMuxedImpl_FROMPORT_BYTES + 1) = (jbyte) (p & (jint) 0xff);
}

void NetI2pClientImplI2PSessionMuxedImpl_setToPortWithByteArray_withInt_(IOSByteArray *payload, jint p) {
  NetI2pClientImplI2PSessionMuxedImpl_initialize();
  *IOSByteArray_GetRef(nil_chk(payload), NetI2pClientImplI2PSessionMuxedImpl_TOPORT_BYTES) = (jbyte) ((JreRShift32(p, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(payload, NetI2pClientImplI2PSessionMuxedImpl_TOPORT_BYTES + 1) = (jbyte) (p & (jint) 0xff);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2PSessionMuxedImpl)

@implementation NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier

- (instancetype)initWithNetI2pClientImplI2PSessionMuxedImpl:(NetI2pClientImplI2PSessionMuxedImpl *)outer$ {
  NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_initWithNetI2pClientImplI2PSessionMuxedImpl_(self, outer$);
  return self;
}

- (void)stopNotifying {
  @synchronized(stopping_) {
    if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(stopping_)) getAndSetWithBoolean:true]) {
      [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_msgs_)) clear];
      if (JreLoadVolatileBoolean(&_alive_MuxedAvailabilityNotifier_)) {
        jboolean again = true;
        while (again) {
          @try {
            [_msgs_ putWithId:create_NetI2pClientImplI2PSessionMuxedImpl_MsgData_initWithInt_withInt_withInt_withInt_withInt_(0, NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_POISON_SIZE, 0, 0, 0)];
            again = false;
          }
          @catch (JavaLangInterruptedException *ie) {
            continue;
          }
        }
        JreAssignVolatileBoolean(&_alive_MuxedAvailabilityNotifier_, false);
      }
      [stopping_ setWithBoolean:false];
    }
  }
}

- (void)availableWithLong:(jlong)msgId
                  withInt:(jint)size {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"no");
}

- (void)availableWithLong:(jlong)msgId
                  withInt:(jint)size
                  withInt:(jint)proto
                  withInt:(jint)fromPort
                  withInt:(jint)toPort {
  @try {
    [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_msgs_)) putWithId:create_NetI2pClientImplI2PSessionMuxedImpl_MsgData_initWithInt_withInt_withInt_withInt_withInt_((jint) (msgId & (jint) 0xffffffff), size, proto, fromPort, toPort)];
  }
  @catch (JavaLangInterruptedException *ie) {
  }
  if (!JreLoadVolatileBoolean(&_alive_MuxedAvailabilityNotifier_) && [((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(this$1_->_log_)) warnWithNSString:JreStrcat("$$", [this$1_ getPrefix], @"message available but notifier not running")];
}

- (void)run {
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$$", [this$1_ getPrefix], @"starting muxed availability notifier")];
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_msgs_)) clear];
  JreAssignVolatileBoolean(&_alive_MuxedAvailabilityNotifier_, true);
  while (JreLoadVolatileBoolean(&_alive_MuxedAvailabilityNotifier_)) {
    NetI2pClientImplI2PSessionMuxedImpl_MsgData *msg;
    @try {
      msg = [_msgs_ take];
    }
    @catch (JavaLangInterruptedException *ie) {
      if ([this$1_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$$$Z", @"I2PSessionMuxedImpl.run() InterruptedException ", NSString_java_valueOfInt_([_msgs_ size]), @" Messages, Alive ", JreLoadVolatileBoolean(&_alive_MuxedAvailabilityNotifier_))];
      continue;
    }
    if (((NetI2pClientImplI2PSessionMuxedImpl_MsgData *) nil_chk(msg))->size_ == NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_POISON_SIZE) {
      break;
    }
    @try {
      [((NetI2pClientImplI2PSessionDemultiplexer *) nil_chk(this$1_->_demultiplexer_)) messageAvailableWithNetI2pClientI2PSession:this$1_ withInt:msg->id__ withLong:msg->size_ withInt:msg->proto_ withInt:msg->fromPort_ withInt:msg->toPort_];
    }
    @catch (JavaLangRuntimeException *e) {
      [this$1_->_log_ errorWithNSString:@"Error notifying app of message availability" withJavaLangThrowable:e];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$1_);
  RELEASE_(_msgs_);
  RELEASE_(stopping_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pClientImplI2PSessionMuxedImpl:);
  methods[1].selector = @selector(stopNotifying);
  methods[2].selector = @selector(availableWithLong:withInt:);
  methods[3].selector = @selector(availableWithLong:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pClientImplI2PSessionMuxedImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_msgs_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "_alive_MuxedAvailabilityNotifier_", "Z", .constantValue.asLong = 0, 0x42, 4, -1, -1, -1 },
    { "POISON_SIZE", "I", .constantValue.asInt = NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_POISON_SIZE, 0x1a, -1, -1, -1, -1 },
    { "stopping_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "available", "JI", "JIIII", "Ljava/util/concurrent/LinkedBlockingQueue<Lnet/i2p/client/impl/I2PSessionMuxedImpl$MsgData;>;", "_alive", "LNetI2pClientImplI2PSessionMuxedImpl;" };
  static const J2ObjcClassInfo _NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier = { "MuxedAvailabilityNotifier", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x4, 5, 5, 5, -1, -1, -1, -1 };
  return &_NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier;
}

@end

void NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_initWithNetI2pClientImplI2PSessionMuxedImpl_(NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier *self, NetI2pClientImplI2PSessionMuxedImpl *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pClientImplI2PSessionImpl_AvailabilityNotifier_initWithNetI2pClientImplI2PSessionImpl_(self, outer$);
  JreStrongAssignAndConsume(&self->stopping_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->_msgs_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
}

NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier *new_NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_initWithNetI2pClientImplI2PSessionMuxedImpl_(NetI2pClientImplI2PSessionMuxedImpl *outer$) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier, initWithNetI2pClientImplI2PSessionMuxedImpl_, outer$)
}

NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier *create_NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier_initWithNetI2pClientImplI2PSessionMuxedImpl_(NetI2pClientImplI2PSessionMuxedImpl *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier, initWithNetI2pClientImplI2PSessionMuxedImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2PSessionMuxedImpl_MuxedAvailabilityNotifier)

@implementation NetI2pClientImplI2PSessionMuxedImpl_MsgData

- (instancetype)initWithInt:(jint)i
                    withInt:(jint)s
                    withInt:(jint)p
                    withInt:(jint)f
                    withInt:(jint)t {
  NetI2pClientImplI2PSessionMuxedImpl_MsgData_initWithInt_withInt_withInt_withInt_withInt_(self, i, s, p, f, t);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "I", .constantValue.asLong = 0, 0x11, 1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "proto_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "fromPort_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "toPort_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIIII", "id", "LNetI2pClientImplI2PSessionMuxedImpl;" };
  static const J2ObjcClassInfo _NetI2pClientImplI2PSessionMuxedImpl_MsgData = { "MsgData", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0xa, 1, 5, 2, -1, -1, -1, -1 };
  return &_NetI2pClientImplI2PSessionMuxedImpl_MsgData;
}

@end

void NetI2pClientImplI2PSessionMuxedImpl_MsgData_initWithInt_withInt_withInt_withInt_withInt_(NetI2pClientImplI2PSessionMuxedImpl_MsgData *self, jint i, jint s, jint p, jint f, jint t) {
  NSObject_init(self);
  self->id__ = i;
  self->size_ = s;
  self->proto_ = p;
  self->fromPort_ = f;
  self->toPort_ = t;
}

NetI2pClientImplI2PSessionMuxedImpl_MsgData *new_NetI2pClientImplI2PSessionMuxedImpl_MsgData_initWithInt_withInt_withInt_withInt_withInt_(jint i, jint s, jint p, jint f, jint t) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionMuxedImpl_MsgData, initWithInt_withInt_withInt_withInt_withInt_, i, s, p, f, t)
}

NetI2pClientImplI2PSessionMuxedImpl_MsgData *create_NetI2pClientImplI2PSessionMuxedImpl_MsgData_initWithInt_withInt_withInt_withInt_withInt_(jint i, jint s, jint p, jint f, jint t) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionMuxedImpl_MsgData, initWithInt_withInt_withInt_withInt_withInt_, i, s, p, f, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2PSessionMuxedImpl_MsgData)
