//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/I2PSessionDemultiplexer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PSession.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/client/I2PSessionListener.h"
#include "net/i2p/client/I2PSessionMuxedListener.h"
#include "net/i2p/client/impl/I2PSessionDemultiplexer.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pClientImplI2PSessionDemultiplexer () {
 @public
  NetI2pUtilLog *_log_;
  id<JavaUtilMap> _listeners_;
}

- (id<NetI2pClientI2PSessionMuxedListener>)findListenerWithInt:(jint)proto
                                                       withInt:(jint)port;

- (id<NetI2pClientI2PSessionMuxedListener>)getListenerWithInt:(jint)proto
                                                      withInt:(jint)port;

+ (JavaLangInteger *)keyWithInt:(jint)proto
                        withInt:(jint)port;

@end

J2OBJC_FIELD_SETTER(NetI2pClientImplI2PSessionDemultiplexer, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pClientImplI2PSessionDemultiplexer, _listeners_, id<JavaUtilMap>)

__attribute__((unused)) static id<NetI2pClientI2PSessionMuxedListener> NetI2pClientImplI2PSessionDemultiplexer_findListenerWithInt_withInt_(NetI2pClientImplI2PSessionDemultiplexer *self, jint proto, jint port);

__attribute__((unused)) static id<NetI2pClientI2PSessionMuxedListener> NetI2pClientImplI2PSessionDemultiplexer_getListenerWithInt_withInt_(NetI2pClientImplI2PSessionDemultiplexer *self, jint proto, jint port);

__attribute__((unused)) static JavaLangInteger *NetI2pClientImplI2PSessionDemultiplexer_keyWithInt_withInt_(jint proto, jint port);

@interface NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener : NSObject < NetI2pClientI2PSessionMuxedListener > {
 @public
  id<NetI2pClientI2PSessionListener> _l_;
}

- (instancetype)initWithNetI2pClientI2PSessionListener:(id<NetI2pClientI2PSessionListener>)l;

- (void)messageAvailableWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                           withInt:(jint)msgId
                                          withLong:(jlong)size;

- (void)messageAvailableWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                           withInt:(jint)msgId
                                          withLong:(jlong)size
                                           withInt:(jint)proto
                                           withInt:(jint)fromport
                                           withInt:(jint)toport;

- (void)reportAbuseWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                      withInt:(jint)severity;

- (void)disconnectedWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session;

- (void)errorOccurredWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                   withNSString:(NSString *)message
                          withJavaLangThrowable:(JavaLangThrowable *)error;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener)

J2OBJC_FIELD_SETTER(NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener, _l_, id<NetI2pClientI2PSessionListener>)

__attribute__((unused)) static void NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener_initWithNetI2pClientI2PSessionListener_(NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener *self, id<NetI2pClientI2PSessionListener> l);

__attribute__((unused)) static NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener *new_NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener_initWithNetI2pClientI2PSessionListener_(id<NetI2pClientI2PSessionListener> l) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener *create_NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener_initWithNetI2pClientI2PSessionListener_(id<NetI2pClientI2PSessionListener> l);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener)

@implementation NetI2pClientImplI2PSessionDemultiplexer

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  NetI2pClientImplI2PSessionDemultiplexer_initWithNetI2pI2PAppContext_(self, ctx);
  return self;
}

- (void)messageAvailableWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                           withInt:(jint)msgId
                                          withLong:(jlong)size {
}

- (void)messageAvailableWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                           withInt:(jint)msgId
                                          withLong:(jlong)size
                                           withInt:(jint)proto
                                           withInt:(jint)fromport
                                           withInt:(jint)toport {
  id<NetI2pClientI2PSessionMuxedListener> l = NetI2pClientImplI2PSessionDemultiplexer_findListenerWithInt_withInt_(self, proto, toport);
  if (l != nil) [l messageAvailableWithNetI2pClientI2PSession:session withInt:msgId withLong:size withInt:proto withInt:fromport withInt:toport];
  else {
    if ([((id<JavaUtilMap>) nil_chk(_listeners_)) isEmpty]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"No listeners for incoming message"];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$I$I$I$I$", @"No listener found for proto: ", proto, @" port: ", toport, @" msg id: ", msgId, @" from pool of ", [_listeners_ size], @" listeners")];
    }
    @try {
      [((id<NetI2pClientI2PSession>) nil_chk(session)) receiveMessageWithInt:msgId];
    }
    @catch (NetI2pClientI2PSessionException *ise) {
    }
  }
}

- (void)reportAbuseWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                      withInt:(jint)severity {
  for (id<NetI2pClientI2PSessionMuxedListener> __strong l in nil_chk([((id<JavaUtilMap>) nil_chk(_listeners_)) values])) [((id<NetI2pClientI2PSessionMuxedListener>) nil_chk(l)) reportAbuseWithNetI2pClientI2PSession:session withInt:severity];
}

- (void)disconnectedWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session {
  for (id<NetI2pClientI2PSessionMuxedListener> __strong l in nil_chk([((id<JavaUtilMap>) nil_chk(_listeners_)) values])) [((id<NetI2pClientI2PSessionMuxedListener>) nil_chk(l)) disconnectedWithNetI2pClientI2PSession:session];
}

- (void)errorOccurredWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                   withNSString:(NSString *)message
                          withJavaLangThrowable:(JavaLangThrowable *)error {
  for (id<NetI2pClientI2PSessionMuxedListener> __strong l in nil_chk([((id<JavaUtilMap>) nil_chk(_listeners_)) values])) [((id<NetI2pClientI2PSessionMuxedListener>) nil_chk(l)) errorOccurredWithNetI2pClientI2PSession:session withNSString:message withJavaLangThrowable:error];
}

- (void)addListenerWithNetI2pClientI2PSessionListener:(id<NetI2pClientI2PSessionListener>)l
                                              withInt:(jint)proto
                                              withInt:(jint)port {
  id<NetI2pClientI2PSessionListener> old = [((id<JavaUtilMap>) nil_chk(_listeners_)) putWithId:NetI2pClientImplI2PSessionDemultiplexer_keyWithInt_withInt_(proto, port) withId:create_NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener_initWithNetI2pClientI2PSessionListener_(l)];
  if (old != nil && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:JreStrcat("$@$@$I$I", @"Listener ", l, @" replaces ", old, @" for proto: ", proto, @" port: ", port)];
}

- (void)addMuxedListenerWithNetI2pClientI2PSessionMuxedListener:(id<NetI2pClientI2PSessionMuxedListener>)l
                                                        withInt:(jint)proto
                                                        withInt:(jint)port {
  id<NetI2pClientI2PSessionListener> old = [((id<JavaUtilMap>) nil_chk(_listeners_)) putWithId:NetI2pClientImplI2PSessionDemultiplexer_keyWithInt_withInt_(proto, port) withId:l];
  if (old != nil && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:JreStrcat("$@$@$I$I", @"Listener ", l, @" replaces ", old, @" for proto: ", proto, @" port: ", port)];
}

- (void)removeListenerWithInt:(jint)proto
                      withInt:(jint)port {
  [((id<JavaUtilMap>) nil_chk(_listeners_)) removeWithId:NetI2pClientImplI2PSessionDemultiplexer_keyWithInt_withInt_(proto, port)];
}

- (id<NetI2pClientI2PSessionMuxedListener>)findListenerWithInt:(jint)proto
                                                       withInt:(jint)port {
  return NetI2pClientImplI2PSessionDemultiplexer_findListenerWithInt_withInt_(self, proto, port);
}

- (id<NetI2pClientI2PSessionMuxedListener>)getListenerWithInt:(jint)proto
                                                      withInt:(jint)port {
  return NetI2pClientImplI2PSessionDemultiplexer_getListenerWithInt_withInt_(self, proto, port);
}

+ (JavaLangInteger *)keyWithInt:(jint)proto
                        withInt:(jint)port {
  return NetI2pClientImplI2PSessionDemultiplexer_keyWithInt_withInt_(proto, port);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_listeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNetI2pClientI2PSessionMuxedListener;", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "LNetI2pClientI2PSessionMuxedListener;", 0x2, 17, 15, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0xa, 18, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(messageAvailableWithNetI2pClientI2PSession:withInt:withLong:);
  methods[2].selector = @selector(messageAvailableWithNetI2pClientI2PSession:withInt:withLong:withInt:withInt:withInt:);
  methods[3].selector = @selector(reportAbuseWithNetI2pClientI2PSession:withInt:);
  methods[4].selector = @selector(disconnectedWithNetI2pClientI2PSession:);
  methods[5].selector = @selector(errorOccurredWithNetI2pClientI2PSession:withNSString:withJavaLangThrowable:);
  methods[6].selector = @selector(addListenerWithNetI2pClientI2PSessionListener:withInt:withInt:);
  methods[7].selector = @selector(addMuxedListenerWithNetI2pClientI2PSessionMuxedListener:withInt:withInt:);
  methods[8].selector = @selector(removeListenerWithInt:withInt:);
  methods[9].selector = @selector(findListenerWithInt:withInt:);
  methods[10].selector = @selector(getListenerWithInt:withInt:);
  methods[11].selector = @selector(keyWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_listeners_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "messageAvailable", "LNetI2pClientI2PSession;IJ", "LNetI2pClientI2PSession;IJIII", "reportAbuse", "LNetI2pClientI2PSession;I", "disconnected", "LNetI2pClientI2PSession;", "errorOccurred", "LNetI2pClientI2PSession;LNSString;LJavaLangThrowable;", "addListener", "LNetI2pClientI2PSessionListener;II", "addMuxedListener", "LNetI2pClientI2PSessionMuxedListener;II", "removeListener", "II", "findListener", "getListener", "key", "Ljava/util/Map<Ljava/lang/Integer;Lnet/i2p/client/I2PSessionMuxedListener;>;", "LNetI2pClientImplI2PSessionDemultiplexer_NoPortsListener;" };
  static const J2ObjcClassInfo _NetI2pClientImplI2PSessionDemultiplexer = { "I2PSessionDemultiplexer", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, 20, -1, -1, -1 };
  return &_NetI2pClientImplI2PSessionDemultiplexer;
}

@end

void NetI2pClientImplI2PSessionDemultiplexer_initWithNetI2pI2PAppContext_(NetI2pClientImplI2PSessionDemultiplexer *self, NetI2pI2PAppContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pClientImplI2PSessionDemultiplexer_class_()]);
  JreStrongAssignAndConsume(&self->_listeners_, new_JavaUtilConcurrentConcurrentHashMap_init());
}

NetI2pClientImplI2PSessionDemultiplexer *new_NetI2pClientImplI2PSessionDemultiplexer_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionDemultiplexer, initWithNetI2pI2PAppContext_, ctx)
}

NetI2pClientImplI2PSessionDemultiplexer *create_NetI2pClientImplI2PSessionDemultiplexer_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionDemultiplexer, initWithNetI2pI2PAppContext_, ctx)
}

id<NetI2pClientI2PSessionMuxedListener> NetI2pClientImplI2PSessionDemultiplexer_findListenerWithInt_withInt_(NetI2pClientImplI2PSessionDemultiplexer *self, jint proto, jint port) {
  id<NetI2pClientI2PSessionMuxedListener> rv = NetI2pClientImplI2PSessionDemultiplexer_getListenerWithInt_withInt_(self, proto, port);
  if (rv != nil) return rv;
  if (port != NetI2pClientI2PSession_PORT_ANY) {
    rv = NetI2pClientImplI2PSessionDemultiplexer_getListenerWithInt_withInt_(self, proto, NetI2pClientI2PSession_PORT_ANY);
    if (rv != nil) return rv;
  }
  if (proto != NetI2pClientI2PSession_PROTO_ANY) {
    rv = NetI2pClientImplI2PSessionDemultiplexer_getListenerWithInt_withInt_(self, NetI2pClientI2PSession_PROTO_ANY, port);
    if (rv != nil) return rv;
  }
  if (proto != NetI2pClientI2PSession_PROTO_ANY && port != NetI2pClientI2PSession_PORT_ANY) {
    rv = NetI2pClientImplI2PSessionDemultiplexer_getListenerWithInt_withInt_(self, NetI2pClientI2PSession_PROTO_ANY, NetI2pClientI2PSession_PORT_ANY);
  }
  return rv;
}

id<NetI2pClientI2PSessionMuxedListener> NetI2pClientImplI2PSessionDemultiplexer_getListenerWithInt_withInt_(NetI2pClientImplI2PSessionDemultiplexer *self, jint proto, jint port) {
  return [((id<JavaUtilMap>) nil_chk(self->_listeners_)) getWithId:NetI2pClientImplI2PSessionDemultiplexer_keyWithInt_withInt_(proto, port)];
}

JavaLangInteger *NetI2pClientImplI2PSessionDemultiplexer_keyWithInt_withInt_(jint proto, jint port) {
  NetI2pClientImplI2PSessionDemultiplexer_initialize();
  return JavaLangInteger_valueOfWithInt_(((JreLShift32(port, 8)) & (jint) 0xffff00) | proto);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2PSessionDemultiplexer)

@implementation NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener

- (instancetype)initWithNetI2pClientI2PSessionListener:(id<NetI2pClientI2PSessionListener>)l {
  NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener_initWithNetI2pClientI2PSessionListener_(self, l);
  return self;
}

- (void)messageAvailableWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                           withInt:(jint)msgId
                                          withLong:(jlong)size {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"no");
}

- (void)messageAvailableWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                           withInt:(jint)msgId
                                          withLong:(jlong)size
                                           withInt:(jint)proto
                                           withInt:(jint)fromport
                                           withInt:(jint)toport {
  [((id<NetI2pClientI2PSessionListener>) nil_chk(_l_)) messageAvailableWithNetI2pClientI2PSession:session withInt:msgId withLong:size];
}

- (void)reportAbuseWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                      withInt:(jint)severity {
  [((id<NetI2pClientI2PSessionListener>) nil_chk(_l_)) reportAbuseWithNetI2pClientI2PSession:session withInt:severity];
}

- (void)disconnectedWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session {
  [((id<NetI2pClientI2PSessionListener>) nil_chk(_l_)) disconnectedWithNetI2pClientI2PSession:session];
}

- (void)errorOccurredWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                   withNSString:(NSString *)message
                          withJavaLangThrowable:(JavaLangThrowable *)error {
  [((id<NetI2pClientI2PSessionListener>) nil_chk(_l_)) errorOccurredWithNetI2pClientI2PSession:session withNSString:message withJavaLangThrowable:error];
}

- (void)dealloc {
  RELEASE_(_l_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pClientI2PSessionListener:);
  methods[1].selector = @selector(messageAvailableWithNetI2pClientI2PSession:withInt:withLong:);
  methods[2].selector = @selector(messageAvailableWithNetI2pClientI2PSession:withInt:withLong:withInt:withInt:withInt:);
  methods[3].selector = @selector(reportAbuseWithNetI2pClientI2PSession:withInt:);
  methods[4].selector = @selector(disconnectedWithNetI2pClientI2PSession:);
  methods[5].selector = @selector(errorOccurredWithNetI2pClientI2PSession:withNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_l_", "LNetI2pClientI2PSessionListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pClientI2PSessionListener;", "messageAvailable", "LNetI2pClientI2PSession;IJ", "LNetI2pClientI2PSession;IJIII", "reportAbuse", "LNetI2pClientI2PSession;I", "disconnected", "LNetI2pClientI2PSession;", "errorOccurred", "LNetI2pClientI2PSession;LNSString;LJavaLangThrowable;", "LNetI2pClientImplI2PSessionDemultiplexer;" };
  static const J2ObjcClassInfo _NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener = { "NoPortsListener", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0xa, 6, 1, 10, -1, -1, -1, -1 };
  return &_NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener;
}

@end

void NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener_initWithNetI2pClientI2PSessionListener_(NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener *self, id<NetI2pClientI2PSessionListener> l) {
  NSObject_init(self);
  JreStrongAssign(&self->_l_, l);
}

NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener *new_NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener_initWithNetI2pClientI2PSessionListener_(id<NetI2pClientI2PSessionListener> l) {
  J2OBJC_NEW_IMPL(NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener, initWithNetI2pClientI2PSessionListener_, l)
}

NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener *create_NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener_initWithNetI2pClientI2PSessionListener_(id<NetI2pClientI2PSessionListener> l) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener, initWithNetI2pClientI2PSessionListener_, l)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplI2PSessionDemultiplexer_NoPortsListener)
