//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/I2PClient.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pClientI2PClient")
#ifdef RESTRICT_NetI2pClientI2PClient
#define INCLUDE_ALL_NetI2pClientI2PClient 0
#else
#define INCLUDE_ALL_NetI2pClientI2PClient 1
#endif
#undef RESTRICT_NetI2pClientI2PClient

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pClientI2PClient_) && (INCLUDE_ALL_NetI2pClientI2PClient || defined(INCLUDE_NetI2pClientI2PClient))
#define NetI2pClientI2PClient_

@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilProperties;
@class NetI2pCryptoSigType;
@class NetI2pDataCertificate;
@class NetI2pDataDestination;
@protocol NetI2pClientI2PSession;

@protocol NetI2pClientI2PClient < JavaObject >

- (id<NetI2pClientI2PSession>)createSessionWithJavaIoInputStream:(JavaIoInputStream *)destKeyStream
                                          withJavaUtilProperties:(JavaUtilProperties *)options;

- (NetI2pDataDestination *)createDestinationWithJavaIoOutputStream:(JavaIoOutputStream *)destKeyStream;

- (NetI2pDataDestination *)createDestinationWithJavaIoOutputStream:(JavaIoOutputStream *)destKeyStream
                                           withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

- (NetI2pDataDestination *)createDestinationWithJavaIoOutputStream:(JavaIoOutputStream *)destKeyStream
                                         withNetI2pDataCertificate:(NetI2pDataCertificate *)cert;

@end

@interface NetI2pClientI2PClient : NSObject
@property (readonly, copy, class) NSString *PROP_TCP_HOST NS_SWIFT_NAME(PROP_TCP_HOST);
@property (readonly, copy, class) NSString *PROP_TCP_PORT NS_SWIFT_NAME(PROP_TCP_PORT);
@property (readonly, copy, class) NSString *PROP_RELIABILITY NS_SWIFT_NAME(PROP_RELIABILITY);
@property (readonly, copy, class) NSString *PROP_RELIABILITY_BEST_EFFORT NS_SWIFT_NAME(PROP_RELIABILITY_BEST_EFFORT);
@property (readonly, copy, class) NSString *PROP_RELIABILITY_GUARANTEED NS_SWIFT_NAME(PROP_RELIABILITY_GUARANTEED);
@property (readonly, copy, class) NSString *PROP_RELIABILITY_NONE NS_SWIFT_NAME(PROP_RELIABILITY_NONE);
@property (readonly, copy, class) NSString *PROP_SIGTYPE NS_SWIFT_NAME(PROP_SIGTYPE);
@property (readonly, class, strong) NetI2pCryptoSigType *DEFAULT_SIGTYPE NS_SWIFT_NAME(DEFAULT_SIGTYPE);
@property (readonly, copy, class) NSString *PROP_FAST_RECEIVE NS_SWIFT_NAME(PROP_FAST_RECEIVE);
@property (readonly, class) jint PROTOCOL_BYTE NS_SWIFT_NAME(PROTOCOL_BYTE);

+ (NSString *)PROP_TCP_HOST;

+ (NSString *)PROP_TCP_PORT;

+ (NSString *)PROP_RELIABILITY;

+ (NSString *)PROP_RELIABILITY_BEST_EFFORT;

+ (NSString *)PROP_RELIABILITY_GUARANTEED;

+ (NSString *)PROP_RELIABILITY_NONE;

+ (NSString *)PROP_SIGTYPE;

+ (NetI2pCryptoSigType *)DEFAULT_SIGTYPE;

+ (NSString *)PROP_FAST_RECEIVE;

+ (jint)PROTOCOL_BYTE;

@end

J2OBJC_STATIC_INIT(NetI2pClientI2PClient)

inline NSString *NetI2pClientI2PClient_get_PROP_TCP_HOST(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pClientI2PClient_PROP_TCP_HOST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientI2PClient, PROP_TCP_HOST, NSString *)

inline NSString *NetI2pClientI2PClient_get_PROP_TCP_PORT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pClientI2PClient_PROP_TCP_PORT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientI2PClient, PROP_TCP_PORT, NSString *)

inline NSString *NetI2pClientI2PClient_get_PROP_RELIABILITY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pClientI2PClient_PROP_RELIABILITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientI2PClient, PROP_RELIABILITY, NSString *)

inline NSString *NetI2pClientI2PClient_get_PROP_RELIABILITY_BEST_EFFORT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pClientI2PClient_PROP_RELIABILITY_BEST_EFFORT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientI2PClient, PROP_RELIABILITY_BEST_EFFORT, NSString *)

inline NSString *NetI2pClientI2PClient_get_PROP_RELIABILITY_GUARANTEED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pClientI2PClient_PROP_RELIABILITY_GUARANTEED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientI2PClient, PROP_RELIABILITY_GUARANTEED, NSString *)

inline NSString *NetI2pClientI2PClient_get_PROP_RELIABILITY_NONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pClientI2PClient_PROP_RELIABILITY_NONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientI2PClient, PROP_RELIABILITY_NONE, NSString *)

inline NSString *NetI2pClientI2PClient_get_PROP_SIGTYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pClientI2PClient_PROP_SIGTYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientI2PClient, PROP_SIGTYPE, NSString *)

inline NetI2pCryptoSigType *NetI2pClientI2PClient_get_DEFAULT_SIGTYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NetI2pCryptoSigType *NetI2pClientI2PClient_DEFAULT_SIGTYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientI2PClient, DEFAULT_SIGTYPE, NetI2pCryptoSigType *)

inline NSString *NetI2pClientI2PClient_get_PROP_FAST_RECEIVE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pClientI2PClient_PROP_FAST_RECEIVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientI2PClient, PROP_FAST_RECEIVE, NSString *)

inline jint NetI2pClientI2PClient_get_PROTOCOL_BYTE(void);
#define NetI2pClientI2PClient_PROTOCOL_BYTE 42
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientI2PClient, PROTOCOL_BYTE, jint)

J2OBJC_TYPE_LITERAL_HEADER(NetI2pClientI2PClient)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pClientI2PClient")
