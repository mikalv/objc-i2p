//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/app/ClientAppManagerImpl.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/app/ClientApp.h"
#include "net/i2p/app/ClientAppManagerImpl.h"
#include "net/i2p/app/ClientAppState.h"

@implementation NetI2pAppClientAppManagerImpl

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  NetI2pAppClientAppManagerImpl_initWithNetI2pI2PAppContext_(self, ctx);
  return self;
}

- (void)notifyWithNetI2pAppClientApp:(id<NetI2pAppClientApp>)app
         withNetI2pAppClientAppState:(NetI2pAppClientAppState *)state
                        withNSString:(NSString *)message
               withJavaLangException:(JavaLangException *)e {
}

- (jboolean)register__WithNetI2pAppClientApp:(id<NetI2pAppClientApp>)app {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_registered_)) putIfAbsentWithId:[((id<NetI2pAppClientApp>) nil_chk(app)) getName] withId:app] == nil;
}

- (void)unregisterWithNetI2pAppClientApp:(id<NetI2pAppClientApp>)app {
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_registered_)) removeWithId:[((id<NetI2pAppClientApp>) nil_chk(app)) getName] withId:app];
}

- (id<NetI2pAppClientApp>)getRegisteredAppWithNSString:(NSString *)name {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_registered_)) getWithId:name];
}

- (void)dealloc {
  RELEASE_(_registered_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pAppClientApp;", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(notifyWithNetI2pAppClientApp:withNetI2pAppClientAppState:withNSString:withJavaLangException:);
  methods[2].selector = @selector(register__WithNetI2pAppClientApp:);
  methods[3].selector = @selector(unregisterWithNetI2pAppClientApp:);
  methods[4].selector = @selector(getRegisteredAppWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_registered_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x14, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "notify", "LNetI2pAppClientApp;LNetI2pAppClientAppState;LNSString;LJavaLangException;", "register", "LNetI2pAppClientApp;", "unregister", "getRegisteredApp", "LNSString;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lnet/i2p/app/ClientApp;>;" };
  static const J2ObjcClassInfo _NetI2pAppClientAppManagerImpl = { "ClientAppManagerImpl", "net.i2p.app", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pAppClientAppManagerImpl;
}

@end

void NetI2pAppClientAppManagerImpl_initWithNetI2pI2PAppContext_(NetI2pAppClientAppManagerImpl *self, NetI2pI2PAppContext *ctx) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_registered_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(8));
}

NetI2pAppClientAppManagerImpl *new_NetI2pAppClientAppManagerImpl_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pAppClientAppManagerImpl, initWithNetI2pI2PAppContext_, ctx)
}

NetI2pAppClientAppManagerImpl *create_NetI2pAppClientAppManagerImpl_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pAppClientAppManagerImpl, initWithNetI2pI2PAppContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pAppClientAppManagerImpl)
