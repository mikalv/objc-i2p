//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/I2PAppContext.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Properties.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/app/ClientAppManager.h"
#include "net/i2p/app/ClientAppManagerImpl.h"
#include "net/i2p/client/naming/NamingService.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/crypto/CryptixAESEngine.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/ElGamalAESEngine.h"
#include "net/i2p/crypto/ElGamalEngine.h"
#include "net/i2p/crypto/HMAC256Generator.h"
#include "net/i2p/crypto/HMACGenerator.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/internal/InternalClientManager.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/FortunaRandomSource.h"
#include "net/i2p/util/I2PProperties.h"
#include "net/i2p/util/KeyRing.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/PortMapper.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SecureDirectory.h"
#include "net/i2p/util/SimpleScheduler.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pI2PAppContext () {
 @public
  NetI2pStatStatManager *_statManager_;
  NetI2pClientNamingNamingService *_namingService_;
  NetI2pCryptoElGamalEngine *_elGamalEngine_;
  NetI2pCryptoElGamalAESEngine *_elGamalAESEngine_;
  NetI2pCryptoAESEngine *_AESEngine_;
  NetI2pUtilLogManager *_logManager_;
  NetI2pCryptoHMACGenerator *_hmac_;
  NetI2pCryptoHMAC256Generator *_hmac256_;
  NetI2pCryptoSHA256Generator *_sha_;
  NetI2pCryptoDSAEngine *_dsa_;
  NetI2pUtilRandomSource *_random_;
  NetI2pCryptoKeyGenerator *_keyGenerator_;
  NetI2pUtilSimpleScheduler *_simpleScheduler_;
  NetI2pUtilSimpleTimer *_simpleTimer_;
  NetI2pUtilSimpleTimer2 *_simpleTimer2_;
  NetI2pUtilPortMapper *_portMapper_;
  volatile_jboolean _statManagerInitialized_;
  volatile_jboolean _namingServiceInitialized_;
  volatile_jboolean _elGamalEngineInitialized_;
  volatile_jboolean _elGamalAESEngineInitialized_;
  volatile_jboolean _AESEngineInitialized_;
  volatile_jboolean _logManagerInitialized_;
  volatile_jboolean _hmacInitialized_;
  volatile_jboolean _hmac256Initialized_;
  volatile_jboolean _shaInitialized_;
  volatile_jboolean _dsaInitialized_;
  volatile_jboolean _randomInitialized_;
  volatile_jboolean _keyGeneratorInitialized_;
  volatile_jboolean _simpleSchedulerInitialized_;
  volatile_jboolean _simpleTimerInitialized_;
  volatile_jboolean _simpleTimer2Initialized_;
  JavaIoFile *_baseDir_;
  JavaIoFile *_configDir_;
  JavaIoFile *_routerDir_;
  JavaIoFile *_pidDir_;
  JavaIoFile *_logDir_;
  JavaIoFile *_appDir_;
  volatile_id _tmpDir_;
  JavaUtilRandom *_tmpDirRand_;
  id<NetI2pAppClientAppManager> _appManager_;
  id _lock1_;
  id _lock2_;
  id _lock3_;
  id _lock4_;
  id _lock5_;
  id _lock6_;
  id _lock7_;
  id _lock8_;
  id _lock9_;
  id _lock10_;
  id _lock11_;
  id _lock12_;
  id _lock13_;
  id _lock14_;
  id _lock16_;
  id _lock17_;
  id _lock18_;
  id _lock19_;
  id _lock20_;
}

- (void)initializeStatManager OBJC_METHOD_FAMILY_NONE;

- (void)initializeNamingService OBJC_METHOD_FAMILY_NONE;

- (void)initializeElGamalEngine OBJC_METHOD_FAMILY_NONE;

- (void)initializeElGamalAESEngine OBJC_METHOD_FAMILY_NONE;

- (void)initializeAESEngine OBJC_METHOD_FAMILY_NONE;

- (void)initializeLogManager OBJC_METHOD_FAMILY_NONE;

- (void)initializeHMAC OBJC_METHOD_FAMILY_NONE;

- (void)initializeHMAC256 OBJC_METHOD_FAMILY_NONE;

- (void)initializeSHA OBJC_METHOD_FAMILY_NONE;

- (void)initializeDSA OBJC_METHOD_FAMILY_NONE;

- (void)initializeKeyGenerator OBJC_METHOD_FAMILY_NONE;

- (void)initializeRandom OBJC_METHOD_FAMILY_NONE;

- (void)initializeSimpleScheduler OBJC_METHOD_FAMILY_NONE;

- (void)initializeSimpleTimer OBJC_METHOD_FAMILY_NONE;

- (void)initializeSimpleTimer2 OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _statManager_, NetI2pStatStatManager *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _namingService_, NetI2pClientNamingNamingService *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _elGamalEngine_, NetI2pCryptoElGamalEngine *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _elGamalAESEngine_, NetI2pCryptoElGamalAESEngine *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _AESEngine_, NetI2pCryptoAESEngine *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _logManager_, NetI2pUtilLogManager *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _hmac_, NetI2pCryptoHMACGenerator *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _hmac256_, NetI2pCryptoHMAC256Generator *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _sha_, NetI2pCryptoSHA256Generator *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _dsa_, NetI2pCryptoDSAEngine *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _random_, NetI2pUtilRandomSource *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _keyGenerator_, NetI2pCryptoKeyGenerator *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _simpleScheduler_, NetI2pUtilSimpleScheduler *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _simpleTimer_, NetI2pUtilSimpleTimer *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _simpleTimer2_, NetI2pUtilSimpleTimer2 *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _portMapper_, NetI2pUtilPortMapper *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _baseDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _configDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _routerDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _pidDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _logDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _appDir_, JavaIoFile *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pI2PAppContext, _tmpDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _tmpDirRand_, JavaUtilRandom *)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _appManager_, id<NetI2pAppClientAppManager>)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock1_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock2_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock3_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock4_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock5_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock6_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock7_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock8_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock9_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock10_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock11_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock12_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock13_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock14_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock16_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock17_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock18_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock19_, id)
J2OBJC_FIELD_SETTER(NetI2pI2PAppContext, _lock20_, id)

__attribute__((unused)) static void NetI2pI2PAppContext_initializeStatManager(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeNamingService(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeElGamalEngine(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeElGamalAESEngine(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeAESEngine(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeLogManager(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeHMAC(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeHMAC256(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeSHA(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeDSA(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeKeyGenerator(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeRandom(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeSimpleScheduler(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeSimpleTimer(NetI2pI2PAppContext *self);

__attribute__((unused)) static void NetI2pI2PAppContext_initializeSimpleTimer2(NetI2pI2PAppContext *self);

__attribute__((unused)) static IOSObjectArray *NetI2pI2PAppContext__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pI2PAppContext__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pI2PAppContext__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *NetI2pI2PAppContext__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *NetI2pI2PAppContext__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *NetI2pI2PAppContext__Annotations$5(void);

volatile_id NetI2pI2PAppContext__globalAppContext;

@implementation NetI2pI2PAppContext

+ (NetI2pI2PAppContext *)_globalAppContext {
  return JreLoadVolatileId(&NetI2pI2PAppContext__globalAppContext);
}

+ (void)set_globalAppContext:(NetI2pI2PAppContext *)value {
  JreVolatileStrongAssign(&NetI2pI2PAppContext__globalAppContext, value);
}

+ (NetI2pI2PAppContext *)getGlobalContext {
  return NetI2pI2PAppContext_getGlobalContext();
}

+ (jboolean)setGlobalContextWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  return NetI2pI2PAppContext_setGlobalContextWithNetI2pI2PAppContext_(ctx);
}

+ (NetI2pI2PAppContext *)getCurrentContext {
  return NetI2pI2PAppContext_getCurrentContext();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pI2PAppContext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilProperties:(JavaUtilProperties *)envProps {
  NetI2pI2PAppContext_initWithJavaUtilProperties_(self, envProps);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)doInit
         withJavaUtilProperties:(JavaUtilProperties *)envProps {
  NetI2pI2PAppContext_initWithBoolean_withJavaUtilProperties_(self, doInit, envProps);
  return self;
}

- (JavaIoFile *)getBaseDir {
  return _baseDir_;
}

- (JavaIoFile *)getConfigDir {
  return _configDir_;
}

- (JavaIoFile *)getRouterDir {
  return _routerDir_;
}

- (JavaIoFile *)getPIDDir {
  return _pidDir_;
}

- (JavaIoFile *)getLogDir {
  return _logDir_;
}

- (JavaIoFile *)getAppDir {
  return _appDir_;
}

- (JavaIoFile *)getTempDir {
  @synchronized(_lock1_) {
    if (JreLoadVolatileId(&_tmpDir_) == nil) {
      NSString *d = [self getPropertyWithNSString:@"i2p.dir.temp" withNSString:JavaLangSystem_getPropertyWithNSString_(@"java.io.tmpdir")];
      IOSByteArray *rand = [IOSByteArray arrayWithLength:6];
      [((JavaUtilRandom *) nil_chk(_tmpDirRand_)) nextBytesWithByteArray:rand];
      NSString *f = JreStrcat("$$$", @"i2p-", NetI2pDataBase64_encodeWithByteArray_(rand), @".tmp");
      JreVolatileStrongAssign(&_tmpDir_, create_NetI2pUtilSecureDirectory_initWithNSString_withNSString_(d, f));
      if ([((JavaIoFile *) nil_chk(JreLoadVolatileId(&_tmpDir_))) exists]) {
      }
      else if ([((JavaIoFile *) nil_chk(JreLoadVolatileId(&_tmpDir_))) mkdir]) {
        [((JavaIoFile *) nil_chk(JreLoadVolatileId(&_tmpDir_))) deleteOnExit];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"WARNING: Could not create temp dir ", [((JavaIoFile *) nil_chk(JreLoadVolatileId(&_tmpDir_))) getAbsolutePath])];
        JreVolatileStrongAssign(&_tmpDir_, create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_(_routerDir_, @"tmp"));
        [((JavaIoFile *) nil_chk(JreLoadVolatileId(&_tmpDir_))) mkdirs];
        if (![((JavaIoFile *) nil_chk(JreLoadVolatileId(&_tmpDir_))) exists]) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"ERROR: Could not create temp dir ", [((JavaIoFile *) nil_chk(JreLoadVolatileId(&_tmpDir_))) getAbsolutePath])];
      }
    }
    return JreRetainedLocalValue(JreLoadVolatileId(&_tmpDir_));
  }
}

- (void)deleteTempDir {
  @synchronized(_lock1_) {
    if (JreLoadVolatileId(&_tmpDir_) != nil) {
      NetI2pUtilFileUtil_rmdirWithJavaIoFile_withBoolean_(JreLoadVolatileId(&_tmpDir_), false);
      JreVolatileStrongAssign(&_tmpDir_, nil);
    }
  }
}

- (NSString *)getPropertyWithNSString:(NSString *)propName {
  if (_overrideProps_ != nil) {
    NSString *rv = [_overrideProps_ getPropertyWithNSString:propName];
    if (rv != nil) return rv;
  }
  return JavaLangSystem_getPropertyWithNSString_(propName);
}

- (NSString *)getPropertyWithNSString:(NSString *)propName
                         withNSString:(NSString *)defaultValue {
  if (_overrideProps_ != nil) {
    if ([_overrideProps_ containsKeyWithId:propName]) return [_overrideProps_ getPropertyWithNSString:propName withNSString:defaultValue];
  }
  return JavaLangSystem_getPropertyWithNSString_withNSString_(propName, defaultValue);
}

- (jint)getPropertyWithNSString:(NSString *)propName
                        withInt:(jint)defaultVal {
  NSString *val = nil;
  if (_overrideProps_ != nil) {
    val = [_overrideProps_ getPropertyWithNSString:propName];
    if (val == nil) val = JavaLangSystem_getPropertyWithNSString_(propName);
  }
  jint ival = defaultVal;
  if (val != nil) {
    @try {
      ival = JavaLangInteger_parseIntWithNSString_(val);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  return ival;
}

- (jlong)getPropertyWithNSString:(NSString *)propName
                        withLong:(jlong)defaultVal {
  NSString *val = nil;
  if (_overrideProps_ != nil) {
    val = [_overrideProps_ getPropertyWithNSString:propName];
    if (val == nil) val = JavaLangSystem_getPropertyWithNSString_(propName);
  }
  jlong rv = defaultVal;
  if (val != nil) {
    @try {
      rv = JavaLangLong_parseLongWithNSString_(val);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  return rv;
}

- (jboolean)getPropertyWithNSString:(NSString *)propName
                        withBoolean:(jboolean)defaultVal {
  NSString *val = [self getPropertyWithNSString:propName];
  if (val == nil) return defaultVal;
  return JavaLangBoolean_parseBooleanWithNSString_(val);
}

- (jboolean)getBooleanPropertyWithNSString:(NSString *)propName {
  return JavaLangBoolean_parseBooleanWithNSString_([self getPropertyWithNSString:propName]);
}

- (jboolean)getBooleanPropertyDefaultTrueWithNSString:(NSString *)propName {
  return [self getPropertyWithNSString:propName withBoolean:true];
}

- (id<JavaUtilSet>)getPropertyNames {
  id<JavaUtilSet> names = create_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilProperties *) nil_chk(((JavaUtilProperties *) cast_chk([((JavaUtilProperties *) nil_chk(JavaLangSystem_getProperties())) java_clone], [JavaUtilProperties class])))) keySet]);
  if (_overrideProps_ != nil) [names addAllWithJavaUtilCollection:[_overrideProps_ keySet]];
  return names;
}

- (JavaUtilProperties *)getProperties {
  JavaUtilProperties *rv = (JavaUtilProperties *) cast_chk([((JavaUtilProperties *) nil_chk(JavaLangSystem_getProperties())) java_clone], [JavaUtilProperties class]);
  [((JavaUtilProperties *) nil_chk(rv)) putAllWithJavaUtilMap:_overrideProps_];
  return rv;
}

- (void)addPropertyCallbackWithNetI2pUtilI2PProperties_I2PPropertyCallback:(id<NetI2pUtilI2PProperties_I2PPropertyCallback>)callback {
}

- (NetI2pStatStatManager *)statManager {
  if (!JreLoadVolatileBoolean(&_statManagerInitialized_)) NetI2pI2PAppContext_initializeStatManager(self);
  return _statManager_;
}

- (void)initializeStatManager {
  NetI2pI2PAppContext_initializeStatManager(self);
}

- (NetI2pCryptoSessionKeyManager *)sessionKeyManager {
  if (!JreLoadVolatileBoolean(&_sessionKeyManagerInitialized_)) [self initializeSessionKeyManager];
  return _sessionKeyManager_;
}

- (void)initializeSessionKeyManager {
  @synchronized(_lock3_) {
    if (_sessionKeyManager_ == nil) JreStrongAssignAndConsume(&_sessionKeyManager_, new_NetI2pCryptoSessionKeyManager_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&_sessionKeyManagerInitialized_, true);
  }
}

- (NetI2pClientNamingNamingService *)namingService {
  if (!JreLoadVolatileBoolean(&_namingServiceInitialized_)) NetI2pI2PAppContext_initializeNamingService(self);
  return _namingService_;
}

- (void)initializeNamingService {
  NetI2pI2PAppContext_initializeNamingService(self);
}

- (NetI2pCryptoElGamalEngine *)elGamalEngine {
  if (!JreLoadVolatileBoolean(&_elGamalEngineInitialized_)) NetI2pI2PAppContext_initializeElGamalEngine(self);
  return _elGamalEngine_;
}

- (void)initializeElGamalEngine {
  NetI2pI2PAppContext_initializeElGamalEngine(self);
}

- (NetI2pCryptoElGamalAESEngine *)elGamalAESEngine {
  if (!JreLoadVolatileBoolean(&_elGamalAESEngineInitialized_)) NetI2pI2PAppContext_initializeElGamalAESEngine(self);
  return _elGamalAESEngine_;
}

- (void)initializeElGamalAESEngine {
  NetI2pI2PAppContext_initializeElGamalAESEngine(self);
}

- (NetI2pCryptoAESEngine *)aes {
  if (!JreLoadVolatileBoolean(&_AESEngineInitialized_)) NetI2pI2PAppContext_initializeAESEngine(self);
  return _AESEngine_;
}

- (void)initializeAESEngine {
  NetI2pI2PAppContext_initializeAESEngine(self);
}

- (NetI2pUtilLogManager *)logManager {
  if (!JreLoadVolatileBoolean(&_logManagerInitialized_)) NetI2pI2PAppContext_initializeLogManager(self);
  return _logManager_;
}

- (void)initializeLogManager {
  NetI2pI2PAppContext_initializeLogManager(self);
}

- (NetI2pCryptoHMACGenerator *)hmac {
  if (!JreLoadVolatileBoolean(&_hmacInitialized_)) NetI2pI2PAppContext_initializeHMAC(self);
  return _hmac_;
}

- (void)initializeHMAC {
  NetI2pI2PAppContext_initializeHMAC(self);
}

- (NetI2pCryptoHMAC256Generator *)hmac256 {
  if (!JreLoadVolatileBoolean(&_hmac256Initialized_)) NetI2pI2PAppContext_initializeHMAC256(self);
  return _hmac256_;
}

- (void)initializeHMAC256 {
  NetI2pI2PAppContext_initializeHMAC256(self);
}

- (NetI2pCryptoSHA256Generator *)sha {
  if (!JreLoadVolatileBoolean(&_shaInitialized_)) NetI2pI2PAppContext_initializeSHA(self);
  return _sha_;
}

- (void)initializeSHA {
  NetI2pI2PAppContext_initializeSHA(self);
}

- (NetI2pCryptoDSAEngine *)dsa {
  if (!JreLoadVolatileBoolean(&_dsaInitialized_)) NetI2pI2PAppContext_initializeDSA(self);
  return _dsa_;
}

- (void)initializeDSA {
  NetI2pI2PAppContext_initializeDSA(self);
}

- (NetI2pCryptoKeyGenerator *)keyGenerator {
  if (!JreLoadVolatileBoolean(&_keyGeneratorInitialized_)) NetI2pI2PAppContext_initializeKeyGenerator(self);
  return _keyGenerator_;
}

- (void)initializeKeyGenerator {
  NetI2pI2PAppContext_initializeKeyGenerator(self);
}

- (NetI2pUtilClock *)clock {
  if (!JreLoadVolatileBoolean(&_clockInitialized_)) [self initializeClock];
  return _clock_;
}

- (void)initializeClock {
  @synchronized(_lock14_) {
    if (_clock_ == nil) JreStrongAssignAndConsume(&_clock_, new_NetI2pUtilClock_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&_clockInitialized_, true);
  }
}

- (NetI2pDataRoutingKeyGenerator *)routingKeyGenerator {
  return nil;
}

- (NetI2pUtilKeyRing *)keyRing {
  if (!JreLoadVolatileBoolean(&_keyRingInitialized_)) [self initializeKeyRing];
  return _keyRing_;
}

- (void)initializeKeyRing {
  @synchronized(_lock16_) {
    if (_keyRing_ == nil) JreStrongAssignAndConsume(&_keyRing_, new_NetI2pUtilKeyRing_init());
    JreAssignVolatileBoolean(&_keyRingInitialized_, true);
  }
}

- (NetI2pUtilRandomSource *)random {
  if (!JreLoadVolatileBoolean(&_randomInitialized_)) NetI2pI2PAppContext_initializeRandom(self);
  return _random_;
}

- (void)initializeRandom {
  NetI2pI2PAppContext_initializeRandom(self);
}

- (void)addShutdownTaskWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  [((id<JavaUtilSet>) nil_chk(_shutdownTasks_)) addWithId:task];
}

- (id<JavaUtilSet>)getShutdownTasks {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(_shutdownTasks_);
}

- (jboolean)isRouterContext {
  return false;
}

- (id<NetI2pInternalInternalClientManager>)internalClientManager {
  return nil;
}

- (jboolean)hasWrapper {
  return JavaLangSystem_getPropertyWithNSString_(@"wrapper.version") != nil;
}

- (NetI2pUtilPortMapper *)portMapper {
  return _portMapper_;
}

- (NetI2pUtilSimpleScheduler *)simpleScheduler {
  if (!JreLoadVolatileBoolean(&_simpleSchedulerInitialized_)) NetI2pI2PAppContext_initializeSimpleScheduler(self);
  return _simpleScheduler_;
}

- (void)initializeSimpleScheduler {
  NetI2pI2PAppContext_initializeSimpleScheduler(self);
}

- (NetI2pUtilSimpleTimer *)simpleTimer {
  if (!JreLoadVolatileBoolean(&_simpleTimerInitialized_)) NetI2pI2PAppContext_initializeSimpleTimer(self);
  return _simpleTimer_;
}

- (void)initializeSimpleTimer {
  NetI2pI2PAppContext_initializeSimpleTimer(self);
}

- (NetI2pUtilSimpleTimer2 *)simpleTimer2 {
  if (!JreLoadVolatileBoolean(&_simpleTimer2Initialized_)) NetI2pI2PAppContext_initializeSimpleTimer2(self);
  return _simpleTimer2_;
}

- (void)initializeSimpleTimer2 {
  NetI2pI2PAppContext_initializeSimpleTimer2(self);
}

- (id<NetI2pAppClientAppManager>)clientAppManager {
  return _appManager_;
}

- (void)__javaClone:(NetI2pI2PAppContext *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_tmpDir_, &original->_tmpDir_);
}

- (void)dealloc {
  RELEASE_(_overrideProps_);
  RELEASE_(_statManager_);
  RELEASE_(_sessionKeyManager_);
  RELEASE_(_namingService_);
  RELEASE_(_elGamalEngine_);
  RELEASE_(_elGamalAESEngine_);
  RELEASE_(_AESEngine_);
  RELEASE_(_logManager_);
  RELEASE_(_hmac_);
  RELEASE_(_hmac256_);
  RELEASE_(_sha_);
  RELEASE_(_clock_);
  RELEASE_(_dsa_);
  RELEASE_(_random_);
  RELEASE_(_keyGenerator_);
  RELEASE_(_keyRing_);
  RELEASE_(_simpleScheduler_);
  RELEASE_(_simpleTimer_);
  RELEASE_(_simpleTimer2_);
  RELEASE_(_portMapper_);
  RELEASE_(_shutdownTasks_);
  RELEASE_(_baseDir_);
  RELEASE_(_configDir_);
  RELEASE_(_routerDir_);
  RELEASE_(_pidDir_);
  RELEASE_(_logDir_);
  RELEASE_(_appDir_);
  JreReleaseVolatile(&_tmpDir_);
  RELEASE_(_tmpDirRand_);
  RELEASE_(_appManager_);
  RELEASE_(_lock1_);
  RELEASE_(_lock2_);
  RELEASE_(_lock3_);
  RELEASE_(_lock4_);
  RELEASE_(_lock5_);
  RELEASE_(_lock6_);
  RELEASE_(_lock7_);
  RELEASE_(_lock8_);
  RELEASE_(_lock9_);
  RELEASE_(_lock10_);
  RELEASE_(_lock11_);
  RELEASE_(_lock12_);
  RELEASE_(_lock13_);
  RELEASE_(_lock14_);
  RELEASE_(_lock16_);
  RELEASE_(_lock17_);
  RELEASE_(_lock18_);
  RELEASE_(_lock19_);
  RELEASE_(_lock20_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pI2PAppContext;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pI2PAppContext;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatStatManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoSessionKeyManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pClientNamingNamingService;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoElGamalEngine;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoElGamalAESEngine;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoAESEngine;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilLogManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoHMACGenerator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoHMAC256Generator;", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, 16, -1 },
    { NULL, "LNetI2pCryptoSHA256Generator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoDSAEngine;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoKeyGenerator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilClock;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRoutingKeyGenerator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilKeyRing;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilRandomSource;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 19, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pInternalInternalClientManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilPortMapper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilSimpleScheduler;", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, 21, -1 },
    { NULL, "LNetI2pUtilSimpleTimer;", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, 23, -1 },
    { NULL, "LNetI2pUtilSimpleTimer2;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pAppClientAppManager;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getGlobalContext);
  methods[1].selector = @selector(setGlobalContextWithNetI2pI2PAppContext:);
  methods[2].selector = @selector(getCurrentContext);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(initWithJavaUtilProperties:);
  methods[5].selector = @selector(initWithBoolean:withJavaUtilProperties:);
  methods[6].selector = @selector(getBaseDir);
  methods[7].selector = @selector(getConfigDir);
  methods[8].selector = @selector(getRouterDir);
  methods[9].selector = @selector(getPIDDir);
  methods[10].selector = @selector(getLogDir);
  methods[11].selector = @selector(getAppDir);
  methods[12].selector = @selector(getTempDir);
  methods[13].selector = @selector(deleteTempDir);
  methods[14].selector = @selector(getPropertyWithNSString:);
  methods[15].selector = @selector(getPropertyWithNSString:withNSString:);
  methods[16].selector = @selector(getPropertyWithNSString:withInt:);
  methods[17].selector = @selector(getPropertyWithNSString:withLong:);
  methods[18].selector = @selector(getPropertyWithNSString:withBoolean:);
  methods[19].selector = @selector(getBooleanPropertyWithNSString:);
  methods[20].selector = @selector(getBooleanPropertyDefaultTrueWithNSString:);
  methods[21].selector = @selector(getPropertyNames);
  methods[22].selector = @selector(getProperties);
  methods[23].selector = @selector(addPropertyCallbackWithNetI2pUtilI2PProperties_I2PPropertyCallback:);
  methods[24].selector = @selector(statManager);
  methods[25].selector = @selector(initializeStatManager);
  methods[26].selector = @selector(sessionKeyManager);
  methods[27].selector = @selector(initializeSessionKeyManager);
  methods[28].selector = @selector(namingService);
  methods[29].selector = @selector(initializeNamingService);
  methods[30].selector = @selector(elGamalEngine);
  methods[31].selector = @selector(initializeElGamalEngine);
  methods[32].selector = @selector(elGamalAESEngine);
  methods[33].selector = @selector(initializeElGamalAESEngine);
  methods[34].selector = @selector(aes);
  methods[35].selector = @selector(initializeAESEngine);
  methods[36].selector = @selector(logManager);
  methods[37].selector = @selector(initializeLogManager);
  methods[38].selector = @selector(hmac);
  methods[39].selector = @selector(initializeHMAC);
  methods[40].selector = @selector(hmac256);
  methods[41].selector = @selector(initializeHMAC256);
  methods[42].selector = @selector(sha);
  methods[43].selector = @selector(initializeSHA);
  methods[44].selector = @selector(dsa);
  methods[45].selector = @selector(initializeDSA);
  methods[46].selector = @selector(keyGenerator);
  methods[47].selector = @selector(initializeKeyGenerator);
  methods[48].selector = @selector(clock);
  methods[49].selector = @selector(initializeClock);
  methods[50].selector = @selector(routingKeyGenerator);
  methods[51].selector = @selector(keyRing);
  methods[52].selector = @selector(initializeKeyRing);
  methods[53].selector = @selector(random);
  methods[54].selector = @selector(initializeRandom);
  methods[55].selector = @selector(addShutdownTaskWithJavaLangRunnable:);
  methods[56].selector = @selector(getShutdownTasks);
  methods[57].selector = @selector(isRouterContext);
  methods[58].selector = @selector(internalClientManager);
  methods[59].selector = @selector(hasWrapper);
  methods[60].selector = @selector(portMapper);
  methods[61].selector = @selector(simpleScheduler);
  methods[62].selector = @selector(initializeSimpleScheduler);
  methods[63].selector = @selector(simpleTimer);
  methods[64].selector = @selector(initializeSimpleTimer);
  methods[65].selector = @selector(simpleTimer2);
  methods[66].selector = @selector(initializeSimpleTimer2);
  methods[67].selector = @selector(clientAppManager);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_globalAppContext", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x4c, -1, 24, -1, -1 },
    { "_overrideProps_", "LNetI2pUtilI2PProperties;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_statManager_", "LNetI2pStatStatManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sessionKeyManager_", "LNetI2pCryptoSessionKeyManager;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_namingService_", "LNetI2pClientNamingNamingService;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_elGamalEngine_", "LNetI2pCryptoElGamalEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_elGamalAESEngine_", "LNetI2pCryptoElGamalAESEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_AESEngine_", "LNetI2pCryptoAESEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_logManager_", "LNetI2pUtilLogManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_hmac_", "LNetI2pCryptoHMACGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_hmac256_", "LNetI2pCryptoHMAC256Generator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sha_", "LNetI2pCryptoSHA256Generator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_clock_", "LNetI2pUtilClock;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_dsa_", "LNetI2pCryptoDSAEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_random_", "LNetI2pUtilRandomSource;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keyGenerator_", "LNetI2pCryptoKeyGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keyRing_", "LNetI2pUtilKeyRing;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_simpleScheduler_", "LNetI2pUtilSimpleScheduler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_simpleTimer_", "LNetI2pUtilSimpleTimer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_simpleTimer2_", "LNetI2pUtilSimpleTimer2;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_portMapper_", "LNetI2pUtilPortMapper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_statManagerInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_sessionKeyManagerInitialized_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_namingServiceInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_elGamalEngineInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_elGamalAESEngineInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_AESEngineInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_logManagerInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_hmacInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_hmac256Initialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_shaInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_clockInitialized_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_dsaInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_randomInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_keyGeneratorInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_keyRingInitialized_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_simpleSchedulerInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_simpleTimerInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_simpleTimer2Initialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_shutdownTasks_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x14, -1, -1, 25, -1 },
    { "_baseDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_configDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_routerDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pidDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_logDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_appDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_tmpDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_tmpDirRand_", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_appManager_", "LNetI2pAppClientAppManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock1_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock2_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock3_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock4_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock5_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock6_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock7_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock8_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock9_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock10_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock11_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock12_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock13_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock14_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock16_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock17_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock18_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock19_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lock20_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setGlobalContext", "LNetI2pI2PAppContext;", "LJavaUtilProperties;", "ZLJavaUtilProperties;", "getProperty", "LNSString;", "LNSString;LNSString;", "LNSString;I", "LNSString;J", "LNSString;Z", "getBooleanProperty", "getBooleanPropertyDefaultTrue", "()Ljava/util/Set<Ljava/lang/String;>;", "addPropertyCallback", "LNetI2pUtilI2PProperties_I2PPropertyCallback;", (void *)&NetI2pI2PAppContext__Annotations$0, (void *)&NetI2pI2PAppContext__Annotations$1, "addShutdownTask", "LJavaLangRunnable;", "()Ljava/util/Set<Ljava/lang/Runnable;>;", (void *)&NetI2pI2PAppContext__Annotations$2, (void *)&NetI2pI2PAppContext__Annotations$3, (void *)&NetI2pI2PAppContext__Annotations$4, (void *)&NetI2pI2PAppContext__Annotations$5, &NetI2pI2PAppContext__globalAppContext, "Ljava/util/Set<Ljava/lang/Runnable;>;" };
  static const J2ObjcClassInfo _NetI2pI2PAppContext = { "I2PAppContext", "net.i2p", ptrTable, methods, fields, 7, 0x1, 68, 68, -1, -1, -1, -1, -1 };
  return &_NetI2pI2PAppContext;
}

@end

NetI2pI2PAppContext *NetI2pI2PAppContext_getGlobalContext() {
  NetI2pI2PAppContext_initialize();
  NetI2pI2PAppContext *rv = JreLoadVolatileId(&NetI2pI2PAppContext__globalAppContext);
  if (rv != nil) return rv;
  @synchronized(NetI2pI2PAppContext_class_()) {
    if (JreLoadVolatileId(&NetI2pI2PAppContext__globalAppContext) == nil) {
      JreVolatileStrongAssign(&NetI2pI2PAppContext__globalAppContext, create_NetI2pI2PAppContext_initWithBoolean_withJavaUtilProperties_(false, nil));
    }
  }
  return JreLoadVolatileId(&NetI2pI2PAppContext__globalAppContext);
}

jboolean NetI2pI2PAppContext_setGlobalContextWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  NetI2pI2PAppContext_initialize();
  @synchronized(NetI2pI2PAppContext_class_()) {
    if (JreLoadVolatileId(&NetI2pI2PAppContext__globalAppContext) == nil) {
      JreVolatileStrongAssign(&NetI2pI2PAppContext__globalAppContext, ctx);
      return true;
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Warning - New context not replacing old one, you now have a second one"];
  [(create_JavaLangException_initWithNSString_(@"I did it")) printStackTrace];
  return false;
}

NetI2pI2PAppContext *NetI2pI2PAppContext_getCurrentContext() {
  NetI2pI2PAppContext_initialize();
  return JreLoadVolatileId(&NetI2pI2PAppContext__globalAppContext);
}

void NetI2pI2PAppContext_init(NetI2pI2PAppContext *self) {
  NetI2pI2PAppContext_initWithBoolean_withJavaUtilProperties_(self, true, nil);
}

NetI2pI2PAppContext *new_NetI2pI2PAppContext_init() {
  J2OBJC_NEW_IMPL(NetI2pI2PAppContext, init)
}

NetI2pI2PAppContext *create_NetI2pI2PAppContext_init() {
  J2OBJC_CREATE_IMPL(NetI2pI2PAppContext, init)
}

void NetI2pI2PAppContext_initWithJavaUtilProperties_(NetI2pI2PAppContext *self, JavaUtilProperties *envProps) {
  NetI2pI2PAppContext_initWithBoolean_withJavaUtilProperties_(self, true, envProps);
}

NetI2pI2PAppContext *new_NetI2pI2PAppContext_initWithJavaUtilProperties_(JavaUtilProperties *envProps) {
  J2OBJC_NEW_IMPL(NetI2pI2PAppContext, initWithJavaUtilProperties_, envProps)
}

NetI2pI2PAppContext *create_NetI2pI2PAppContext_initWithJavaUtilProperties_(JavaUtilProperties *envProps) {
  J2OBJC_CREATE_IMPL(NetI2pI2PAppContext, initWithJavaUtilProperties_, envProps)
}

void NetI2pI2PAppContext_initWithBoolean_withJavaUtilProperties_(NetI2pI2PAppContext *self, jboolean doInit, JavaUtilProperties *envProps) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_tmpDirRand_, new_JavaUtilRandom_init());
  JreStrongAssignAndConsume(&self->_lock1_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock2_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock3_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock4_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock5_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock6_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock7_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock8_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock9_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock10_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock11_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock12_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock13_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock14_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock16_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock17_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock18_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock19_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock20_, new_NSObject_init());
  @synchronized(NetI2pI2PAppContext_class_()) {
    JreStrongAssignAndConsume(&self->_overrideProps_, new_NetI2pUtilI2PProperties_init());
    if (envProps != nil) [self->_overrideProps_ putAllWithJavaUtilMap:envProps];
    JreStrongAssignAndConsume(&self->_shutdownTasks_, new_NetI2pUtilConcurrentHashSet_initWithInt_(32));
    JreStrongAssignAndConsume(&self->_portMapper_, new_NetI2pUtilPortMapper_initWithNetI2pI2PAppContext_(self));
    JreStrongAssign(&self->_appManager_, [self isRouterContext] ? nil : create_NetI2pAppClientAppManagerImpl_initWithNetI2pI2PAppContext_(self));
    NSString *s = [self getPropertyWithNSString:@"i2p.dir.base" withNSString:JavaLangSystem_getPropertyWithNSString_(@"user.dir")];
    JreStrongAssignAndConsume(&self->_baseDir_, new_JavaIoFile_initWithNSString_(s));
    s = [self getPropertyWithNSString:@"i2p.dir.config"];
    if (s != nil) {
      JreStrongAssignAndConsume(&self->_configDir_, new_NetI2pUtilSecureDirectory_initWithNSString_(s));
      if (![self->_configDir_ exists]) [self->_configDir_ mkdir];
    }
    else {
      JreStrongAssign(&self->_configDir_, self->_baseDir_);
    }
    s = [self getPropertyWithNSString:@"i2p.dir.router"];
    if (s != nil) {
      JreStrongAssignAndConsume(&self->_routerDir_, new_NetI2pUtilSecureDirectory_initWithNSString_(s));
      if (![self->_routerDir_ exists]) [self->_routerDir_ mkdir];
    }
    else {
      JreStrongAssign(&self->_routerDir_, self->_configDir_);
    }
    s = [self getPropertyWithNSString:@"i2p.dir.pid"];
    if (s != nil) {
      JreStrongAssignAndConsume(&self->_pidDir_, new_NetI2pUtilSecureDirectory_initWithNSString_(s));
      if (![self->_pidDir_ exists]) [self->_pidDir_ mkdir];
    }
    else {
      JreStrongAssign(&self->_pidDir_, self->_routerDir_);
    }
    s = [self getPropertyWithNSString:@"i2p.dir.log"];
    if (s != nil) {
      JreStrongAssignAndConsume(&self->_logDir_, new_NetI2pUtilSecureDirectory_initWithNSString_(s));
      if (![self->_logDir_ exists]) [self->_logDir_ mkdir];
    }
    else {
      JreStrongAssign(&self->_logDir_, self->_routerDir_);
    }
    s = [self getPropertyWithNSString:@"i2p.dir.app"];
    if (s != nil) {
      JreStrongAssignAndConsume(&self->_appDir_, new_NetI2pUtilSecureDirectory_initWithNSString_(s));
      if (![self->_appDir_ exists]) [self->_appDir_ mkdir];
    }
    else {
      JreStrongAssign(&self->_appDir_, self->_routerDir_);
    }
    NSString *isPortableStr = JavaLangSystem_getPropertyWithNSString_(@"i2p.dir.portableMode");
    jboolean isPortable = JavaLangBoolean_parseBooleanWithNSString_(isPortableStr);
    if (isPortable) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Base directory:   ", [self->_baseDir_ getAbsolutePath])];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Config directory: ", [self->_configDir_ getAbsolutePath])];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Router directory: ", [self->_routerDir_ getAbsolutePath])];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"App directory:    ", [self->_appDir_ getAbsolutePath])];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Log directory:    ", [self->_logDir_ getAbsolutePath])];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"PID directory:    ", [self->_pidDir_ getAbsolutePath])];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Temp directory:   ", [((JavaIoFile *) nil_chk([self getTempDir])) getAbsolutePath])];
    }
    if (doInit) {
      NetI2pI2PAppContext_setGlobalContextWithNetI2pI2PAppContext_(self);
    }
  }
}

NetI2pI2PAppContext *new_NetI2pI2PAppContext_initWithBoolean_withJavaUtilProperties_(jboolean doInit, JavaUtilProperties *envProps) {
  J2OBJC_NEW_IMPL(NetI2pI2PAppContext, initWithBoolean_withJavaUtilProperties_, doInit, envProps)
}

NetI2pI2PAppContext *create_NetI2pI2PAppContext_initWithBoolean_withJavaUtilProperties_(jboolean doInit, JavaUtilProperties *envProps) {
  J2OBJC_CREATE_IMPL(NetI2pI2PAppContext, initWithBoolean_withJavaUtilProperties_, doInit, envProps)
}

void NetI2pI2PAppContext_initializeStatManager(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock2_) {
    if (self->_statManager_ == nil) JreStrongAssignAndConsume(&self->_statManager_, new_NetI2pStatStatManager_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_statManagerInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeNamingService(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock4_) {
    if (self->_namingService_ == nil) {
      JreStrongAssign(&self->_namingService_, NetI2pClientNamingNamingService_createInstanceWithNetI2pI2PAppContext_(self));
    }
    JreAssignVolatileBoolean(&self->_namingServiceInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeElGamalEngine(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock5_) {
    if (self->_elGamalEngine_ == nil) JreStrongAssignAndConsume(&self->_elGamalEngine_, new_NetI2pCryptoElGamalEngine_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_elGamalEngineInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeElGamalAESEngine(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock6_) {
    if (self->_elGamalAESEngine_ == nil) JreStrongAssignAndConsume(&self->_elGamalAESEngine_, new_NetI2pCryptoElGamalAESEngine_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_elGamalAESEngineInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeAESEngine(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock7_) {
    if (self->_AESEngine_ == nil) {
      if ([@"off" isEqual:[self getPropertyWithNSString:@"i2p.encryption" withNSString:@"on"]]) JreStrongAssignAndConsume(&self->_AESEngine_, new_NetI2pCryptoAESEngine_initWithNetI2pI2PAppContext_(self));
      else JreStrongAssignAndConsume(&self->_AESEngine_, new_NetI2pCryptoCryptixAESEngine_initWithNetI2pI2PAppContext_(self));
    }
    JreAssignVolatileBoolean(&self->_AESEngineInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeLogManager(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock8_) {
    if (self->_logManager_ == nil) JreStrongAssignAndConsume(&self->_logManager_, new_NetI2pUtilLogManager_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_logManagerInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeHMAC(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock9_) {
    if (self->_hmac_ == nil) {
      JreStrongAssignAndConsume(&self->_hmac_, new_NetI2pCryptoHMACGenerator_initWithNetI2pI2PAppContext_(self));
    }
    JreAssignVolatileBoolean(&self->_hmacInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeHMAC256(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock10_) {
    if (self->_hmac256_ == nil) {
      JreStrongAssignAndConsume(&self->_hmac256_, new_NetI2pCryptoHMAC256Generator_initWithNetI2pI2PAppContext_(self));
    }
    JreAssignVolatileBoolean(&self->_hmac256Initialized_, true);
  }
}

void NetI2pI2PAppContext_initializeSHA(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock11_) {
    if (self->_sha_ == nil) JreStrongAssignAndConsume(&self->_sha_, new_NetI2pCryptoSHA256Generator_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_shaInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeDSA(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock12_) {
    if (self->_dsa_ == nil) JreStrongAssignAndConsume(&self->_dsa_, new_NetI2pCryptoDSAEngine_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_dsaInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeKeyGenerator(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock13_) {
    if (self->_keyGenerator_ == nil) JreStrongAssignAndConsume(&self->_keyGenerator_, new_NetI2pCryptoKeyGenerator_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_keyGeneratorInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeRandom(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock17_) {
    if (self->_random_ == nil) JreStrongAssignAndConsume(&self->_random_, new_NetI2pUtilFortunaRandomSource_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_randomInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeSimpleScheduler(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock18_) {
    if (self->_simpleScheduler_ == nil) JreStrongAssignAndConsume(&self->_simpleScheduler_, new_NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_simpleSchedulerInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeSimpleTimer(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock19_) {
    if (self->_simpleTimer_ == nil) JreStrongAssignAndConsume(&self->_simpleTimer_, new_NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_simpleTimerInitialized_, true);
  }
}

void NetI2pI2PAppContext_initializeSimpleTimer2(NetI2pI2PAppContext *self) {
  @synchronized(self->_lock20_) {
    if (self->_simpleTimer2_ == nil) JreStrongAssignAndConsume(&self->_simpleTimer2_, new_NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&self->_simpleTimer2Initialized_, true);
  }
}

IOSObjectArray *NetI2pI2PAppContext__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pI2PAppContext__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pI2PAppContext__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pI2PAppContext__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pI2PAppContext__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pI2PAppContext__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pI2PAppContext)
