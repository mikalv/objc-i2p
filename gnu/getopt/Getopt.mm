//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/gnu/getopt/Getopt.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "gnu/getopt/Getopt.h"
#include "gnu/getopt/LongOpt.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/text/MessageFormat.h"
#include "java/util/Locale.h"
#include "java/util/ResourceBundle.h"

@interface GnuGetoptGetopt () {
 @public
  jboolean endparse_;
  JavaUtilResourceBundle *_messages_;
}

@end

J2OBJC_FIELD_SETTER(GnuGetoptGetopt, _messages_, JavaUtilResourceBundle *)

@implementation GnuGetoptGetopt

+ (jint)REQUIRE_ORDER {
  return GnuGetoptGetopt_REQUIRE_ORDER;
}

+ (jint)PERMUTE {
  return GnuGetoptGetopt_PERMUTE;
}

+ (jint)RETURN_IN_ORDER {
  return GnuGetoptGetopt_RETURN_IN_ORDER;
}

- (instancetype)initWithNSString:(NSString *)progname
               withNSStringArray:(IOSObjectArray *)argv
                    withNSString:(NSString *)optstring {
  GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(self, progname, argv, optstring);
  return self;
}

- (instancetype)initWithNSString:(NSString *)progname
               withNSStringArray:(IOSObjectArray *)argv
                    withNSString:(NSString *)optstring
       withGnuGetoptLongOptArray:(IOSObjectArray *)long_options {
  GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_(self, progname, argv, optstring, long_options);
  return self;
}

- (instancetype)initWithNSString:(NSString *)progname
               withNSStringArray:(IOSObjectArray *)argv
                    withNSString:(NSString *)optstring
       withGnuGetoptLongOptArray:(IOSObjectArray *)long_options
                     withBoolean:(jboolean)long_only {
  GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_withBoolean_(self, progname, argv, optstring, long_options, long_only);
  return self;
}

- (void)setOptstringWithNSString:(NSString *)optstring {
  if ([((NSString *) nil_chk(optstring)) java_length] == 0) optstring = @" ";
  JreStrongAssign(&self->optstring_, optstring);
}

- (jint)getOptind {
  return (optind__);
}

- (void)setOptindWithInt:(jint)optind_ {
  self->optind__ = optind_;
}

- (void)setArgvWithNSStringArray:(IOSObjectArray *)argv {
  JreStrongAssign(&self->argv_, argv);
}

- (NSString *)getOptarg {
  return (optarg_);
}

- (void)setOpterrWithBoolean:(jboolean)opterr_ {
  self->opterr__ = opterr_;
}

- (jint)getOptopt {
  return (optopt__);
}

- (jint)getLongind {
  return (longind_);
}

- (void)exchangeWithNSStringArray:(IOSObjectArray *)argv {
  jint bottom = first_nonopt_;
  jint middle = last_nonopt_;
  jint top = optind__;
  NSString *tem;
  while (top > middle && middle > bottom) {
    if (top - middle > middle - bottom) {
      jint len = middle - bottom;
      jint i;
      for (i = 0; i < len; i++) {
        tem = IOSObjectArray_Get(nil_chk(argv), bottom + i);
        IOSObjectArray_Set(argv, bottom + i, IOSObjectArray_Get(argv, top - (middle - bottom) + i));
        IOSObjectArray_Set(argv, top - (middle - bottom) + i, tem);
      }
      top -= len;
    }
    else {
      jint len = top - middle;
      jint i;
      for (i = 0; i < len; i++) {
        tem = IOSObjectArray_Get(nil_chk(argv), bottom + i);
        IOSObjectArray_Set(argv, bottom + i, IOSObjectArray_Get(argv, middle + i));
        IOSObjectArray_Set(argv, middle + i, tem);
      }
      bottom += len;
    }
  }
  first_nonopt_ += (optind__ - last_nonopt_);
  last_nonopt_ = optind__;
}

- (jint)checkLongOption {
  GnuGetoptLongOpt *pfound = nil;
  jint nameend;
  jboolean ambig;
  jboolean exact;
  longopt_handled_ = true;
  ambig = false;
  exact = false;
  longind_ = -1;
  nameend = [((NSString *) nil_chk(nextchar_)) java_indexOfString:@"="];
  if (nameend == -1) nameend = [((NSString *) nil_chk(nextchar_)) java_length];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(long_options_))->size_; i++) {
    if ([((NSString *) nil_chk([((GnuGetoptLongOpt *) nil_chk(IOSObjectArray_Get(long_options_, i))) getName])) java_hasPrefix:[((NSString *) nil_chk(nextchar_)) java_substring:0 endIndex:nameend]]) {
      if ([((NSString *) nil_chk([((GnuGetoptLongOpt *) nil_chk(IOSObjectArray_Get(nil_chk(long_options_), i))) getName])) isEqual:[((NSString *) nil_chk(nextchar_)) java_substring:0 endIndex:nameend]]) {
        pfound = IOSObjectArray_Get(nil_chk(long_options_), i);
        longind_ = i;
        exact = true;
        break;
      }
      else if (pfound == nil) {
        pfound = IOSObjectArray_Get(nil_chk(long_options_), i);
        longind_ = i;
      }
      else {
        ambig = true;
      }
    }
  }
  if (ambig && !exact) {
    if (opterr__) {
      IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, IOSObjectArray_Get(nil_chk(argv_), optind__) } count:2 type:NSObject_class_()];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.ambigious"], msgArgs)];
    }
    JreStrongAssign(&nextchar_, @"");
    optopt__ = 0;
    ++optind__;
    return ('?');
  }
  if (pfound != nil) {
    ++optind__;
    if (nameend != [((NSString *) nil_chk(nextchar_)) java_length]) {
      if (pfound->has_arg_ != GnuGetoptLongOpt_NO_ARGUMENT) {
        if ([((NSString *) nil_chk([((NSString *) nil_chk(nextchar_)) java_substring:nameend])) java_length] > 1) JreStrongAssign(&optarg_, [((NSString *) nil_chk(nextchar_)) java_substring:nameend + 1]);
        else JreStrongAssign(&optarg_, @"");
      }
      else {
        if (opterr__) {
          if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__ - 1))) java_hasPrefix:@"--"]) {
            IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, pfound->name_ } count:2 type:NSObject_class_()];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.arguments1"], msgArgs)];
          }
          else {
            IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, JavaLangCharacter_toStringWithChar_([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__ - 1))) charAtWithInt:0]), pfound->name_ } count:3 type:NSObject_class_()];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.arguments2"], msgArgs)];
          }
        }
        JreStrongAssign(&nextchar_, @"");
        optopt__ = pfound->val_;
        return ('?');
      }
    }
    else if (pfound->has_arg_ == GnuGetoptLongOpt_REQUIRED_ARGUMENT) {
      if (optind__ < ((IOSObjectArray *) nil_chk(argv_))->size_) {
        JreStrongAssign(&optarg_, IOSObjectArray_Get(argv_, optind__));
        ++optind__;
      }
      else {
        if (opterr__) {
          IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, IOSObjectArray_Get(argv_, optind__ - 1) } count:2 type:NSObject_class_()];
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.requires"], msgArgs)];
        }
        JreStrongAssign(&nextchar_, @"");
        optopt__ = pfound->val_;
        if ([((NSString *) nil_chk(optstring_)) charAtWithInt:0] == ':') return (':');
        else return ('?');
      }
    }
    JreStrongAssign(&nextchar_, @"");
    if (pfound->flag_ != nil) {
      [pfound->flag_ setLengthWithInt:0];
      [((JavaLangStringBuffer *) nil_chk(pfound->flag_)) appendWithInt:pfound->val_];
      return (0);
    }
    return (pfound->val_);
  }
  longopt_handled_ = false;
  return (0);
}

- (jint)getopt {
  JreStrongAssign(&optarg_, nil);
  if (endparse_ == true) return (-1);
  if ((nextchar_ == nil) || ([((NSString *) nil_chk(nextchar_)) isEqual:@""])) {
    if (last_nonopt_ > optind__) last_nonopt_ = optind__;
    if (first_nonopt_ > optind__) first_nonopt_ = optind__;
    if (ordering_ == GnuGetoptGetopt_PERMUTE) {
      if ((first_nonopt_ != last_nonopt_) && (last_nonopt_ != optind__)) [self exchangeWithNSStringArray:argv_];
      else if (last_nonopt_ != optind__) first_nonopt_ = optind__;
      while ((optind__ < ((IOSObjectArray *) nil_chk(argv_))->size_) && ([((NSString *) nil_chk(IOSObjectArray_Get(argv_, optind__))) isEqual:@""] || ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) charAtWithInt:0] != '-') || [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) isEqual:@"-"])) {
        optind__++;
      }
      last_nonopt_ = optind__;
    }
    if ((optind__ != ((IOSObjectArray *) nil_chk(argv_))->size_) && [((NSString *) nil_chk(IOSObjectArray_Get(argv_, optind__))) isEqual:@"--"]) {
      optind__++;
      if ((first_nonopt_ != last_nonopt_) && (last_nonopt_ != optind__)) [self exchangeWithNSStringArray:argv_];
      else if (first_nonopt_ == last_nonopt_) first_nonopt_ = optind__;
      last_nonopt_ = ((IOSObjectArray *) nil_chk(argv_))->size_;
      optind__ = argv_->size_;
    }
    if (optind__ == ((IOSObjectArray *) nil_chk(argv_))->size_) {
      if (first_nonopt_ != last_nonopt_) optind__ = first_nonopt_;
      return (-1);
    }
    if ([((NSString *) nil_chk(IOSObjectArray_Get(argv_, optind__))) isEqual:@""] || ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) charAtWithInt:0] != '-') || [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) isEqual:@"-"]) {
      if (ordering_ == GnuGetoptGetopt_REQUIRE_ORDER) return (-1);
      JreStrongAssign(&optarg_, IOSObjectArray_Get(nil_chk(argv_), optind__++));
      return (1);
    }
    if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) java_hasPrefix:@"--"]) JreStrongAssign(&nextchar_, [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) java_substring:2]);
    else JreStrongAssign(&nextchar_, [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) java_substring:1]);
  }
  if ((long_options_ != nil) && ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) java_hasPrefix:@"--"] || (long_only_ && (([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) java_length] > 2) || ([((NSString *) nil_chk(optstring_)) java_indexOf:[((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) charAtWithInt:1]] == -1))))) {
    jint c = [self checkLongOption];
    if (longopt_handled_) return (c);
    if (!long_only_ || [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) java_hasPrefix:@"--"] || ([((NSString *) nil_chk(optstring_)) java_indexOf:[((NSString *) nil_chk(nextchar_)) charAtWithInt:0]] == -1)) {
      if (opterr__) {
        if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) java_hasPrefix:@"--"]) {
          IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, nextchar_ } count:2 type:NSObject_class_()];
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.unrecognized"], msgArgs)];
        }
        else {
          IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, JavaLangCharacter_toStringWithChar_([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(argv_), optind__))) charAtWithInt:0]), nextchar_ } count:3 type:NSObject_class_()];
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.unrecognized2"], msgArgs)];
        }
      }
      JreStrongAssign(&nextchar_, @"");
      ++optind__;
      optopt__ = 0;
      return ('?');
    }
  }
  jint c = [((NSString *) nil_chk(nextchar_)) charAtWithInt:0];
  if ([((NSString *) nil_chk(nextchar_)) java_length] > 1) JreStrongAssign(&nextchar_, [((NSString *) nil_chk(nextchar_)) java_substring:1]);
  else JreStrongAssign(&nextchar_, @"");
  NSString *temp = nil;
  if ([((NSString *) nil_chk(optstring_)) java_indexOf:c] != -1) temp = [((NSString *) nil_chk(optstring_)) java_substring:[optstring_ java_indexOf:c]];
  if ([((NSString *) nil_chk(nextchar_)) isEqual:@""]) ++optind__;
  if ((temp == nil) || (c == ':')) {
    if (opterr__) {
      if (posixly_correct_) {
        IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, JavaLangCharacter_toStringWithChar_((jchar) c) } count:2 type:NSObject_class_()];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.illegal"], msgArgs)];
      }
      else {
        IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, JavaLangCharacter_toStringWithChar_((jchar) c) } count:2 type:NSObject_class_()];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.invalid"], msgArgs)];
      }
    }
    optopt__ = c;
    return ('?');
  }
  if (([((NSString *) nil_chk(temp)) charAtWithInt:0] == 'W') && ([temp java_length] > 1) && ([temp charAtWithInt:1] == ';')) {
    if (![((NSString *) nil_chk(nextchar_)) isEqual:@""]) {
      JreStrongAssign(&optarg_, nextchar_);
    }
    else if (optind__ == ((IOSObjectArray *) nil_chk(argv_))->size_) {
      if (opterr__) {
        IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, JavaLangCharacter_toStringWithChar_((jchar) c) } count:2 type:NSObject_class_()];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.requires2"], msgArgs)];
      }
      optopt__ = c;
      if ([((NSString *) nil_chk(optstring_)) charAtWithInt:0] == ':') return (':');
      else return ('?');
    }
    else {
      JreStrongAssign(&nextchar_, IOSObjectArray_Get(argv_, optind__));
      JreStrongAssign(&optarg_, IOSObjectArray_Get(argv_, optind__));
    }
    c = [self checkLongOption];
    if (longopt_handled_) return (c);
    else {
      JreStrongAssign(&nextchar_, nil);
      ++optind__;
      return ('W');
    }
  }
  if (([temp java_length] > 1) && ([temp charAtWithInt:1] == ':')) {
    if (([temp java_length] > 2) && ([temp charAtWithInt:2] == ':')) {
      if (![((NSString *) nil_chk(nextchar_)) isEqual:@""]) {
        JreStrongAssign(&optarg_, nextchar_);
        ++optind__;
      }
      else {
        JreStrongAssign(&optarg_, nil);
      }
      JreStrongAssign(&nextchar_, nil);
    }
    else {
      if (![((NSString *) nil_chk(nextchar_)) isEqual:@""]) {
        JreStrongAssign(&optarg_, nextchar_);
        ++optind__;
      }
      else if (optind__ == ((IOSObjectArray *) nil_chk(argv_))->size_) {
        if (opterr__) {
          IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, JavaLangCharacter_toStringWithChar_((jchar) c) } count:2 type:NSObject_class_()];
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.requires2"], msgArgs)];
        }
        optopt__ = c;
        if ([((NSString *) nil_chk(optstring_)) charAtWithInt:0] == ':') return (':');
        else return ('?');
      }
      else {
        JreStrongAssign(&optarg_, IOSObjectArray_Get(argv_, optind__));
        ++optind__;
        if ((posixly_correct_) && [((NSString *) nil_chk(optarg_)) isEqual:@"--"]) {
          if (optind__ == ((IOSObjectArray *) nil_chk(argv_))->size_) {
            if (opterr__) {
              IOSObjectArray *msgArgs = [IOSObjectArray arrayWithObjects:(id[]){ progname_, JavaLangCharacter_toStringWithChar_((jchar) c) } count:2 type:NSObject_class_()];
              [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((JavaUtilResourceBundle *) nil_chk(_messages_)) getStringWithNSString:@"getopt.requires2"], msgArgs)];
            }
            optopt__ = c;
            if ([((NSString *) nil_chk(optstring_)) charAtWithInt:0] == ':') return (':');
            else return ('?');
          }
          JreStrongAssign(&optarg_, IOSObjectArray_Get(argv_, optind__));
          ++optind__;
          first_nonopt_ = optind__;
          last_nonopt_ = argv_->size_;
          endparse_ = true;
        }
      }
      JreStrongAssign(&nextchar_, nil);
    }
  }
  return (c);
}

- (void)dealloc {
  RELEASE_(optarg_);
  RELEASE_(nextchar_);
  RELEASE_(optstring_);
  RELEASE_(long_options_);
  RELEASE_(argv_);
  RELEASE_(progname_);
  RELEASE_(_messages_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:withNSString:);
  methods[1].selector = @selector(initWithNSString:withNSStringArray:withNSString:withGnuGetoptLongOptArray:);
  methods[2].selector = @selector(initWithNSString:withNSStringArray:withNSString:withGnuGetoptLongOptArray:withBoolean:);
  methods[3].selector = @selector(setOptstringWithNSString:);
  methods[4].selector = @selector(getOptind);
  methods[5].selector = @selector(setOptindWithInt:);
  methods[6].selector = @selector(setArgvWithNSStringArray:);
  methods[7].selector = @selector(getOptarg);
  methods[8].selector = @selector(setOpterrWithBoolean:);
  methods[9].selector = @selector(getOptopt);
  methods[10].selector = @selector(getLongind);
  methods[11].selector = @selector(exchangeWithNSStringArray:);
  methods[12].selector = @selector(checkLongOption);
  methods[13].selector = @selector(getopt);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REQUIRE_ORDER", "I", .constantValue.asInt = GnuGetoptGetopt_REQUIRE_ORDER, 0x1c, -1, -1, -1, -1 },
    { "PERMUTE", "I", .constantValue.asInt = GnuGetoptGetopt_PERMUTE, 0x1c, -1, -1, -1, -1 },
    { "RETURN_IN_ORDER", "I", .constantValue.asInt = GnuGetoptGetopt_RETURN_IN_ORDER, 0x1c, -1, -1, -1, -1 },
    { "optarg_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "optind__", "I", .constantValue.asLong = 0, 0x4, 12, -1, -1, -1 },
    { "opterr__", "Z", .constantValue.asLong = 0, 0x4, 13, -1, -1, -1 },
    { "optopt__", "I", .constantValue.asLong = 0, 0x4, 14, -1, -1, -1 },
    { "nextchar_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "optstring_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "long_options_", "[LGnuGetoptLongOpt;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "long_only_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "longind_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "posixly_correct_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "longopt_handled_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "first_nonopt_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "last_nonopt_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "endparse_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "argv_", "[LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ordering_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "progname_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_messages_", "LJavaUtilResourceBundle;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSString;LNSString;", "LNSString;[LNSString;LNSString;[LGnuGetoptLongOpt;", "LNSString;[LNSString;LNSString;[LGnuGetoptLongOpt;Z", "setOptstring", "LNSString;", "setOptind", "I", "setArgv", "[LNSString;", "setOpterr", "Z", "exchange", "optind", "opterr", "optopt" };
  static const J2ObjcClassInfo _GnuGetoptGetopt = { "Getopt", "gnu.getopt", ptrTable, methods, fields, 7, 0x1, 14, 21, -1, -1, -1, -1, -1 };
  return &_GnuGetoptGetopt;
}

@end

void GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(GnuGetoptGetopt *self, NSString *progname, IOSObjectArray *argv, NSString *optstring) {
  GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_withBoolean_(self, progname, argv, optstring, nil, false);
}

GnuGetoptGetopt *new_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(NSString *progname, IOSObjectArray *argv, NSString *optstring) {
  J2OBJC_NEW_IMPL(GnuGetoptGetopt, initWithNSString_withNSStringArray_withNSString_, progname, argv, optstring)
}

GnuGetoptGetopt *create_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(NSString *progname, IOSObjectArray *argv, NSString *optstring) {
  J2OBJC_CREATE_IMPL(GnuGetoptGetopt, initWithNSString_withNSStringArray_withNSString_, progname, argv, optstring)
}

void GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_(GnuGetoptGetopt *self, NSString *progname, IOSObjectArray *argv, NSString *optstring, IOSObjectArray *long_options) {
  GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_withBoolean_(self, progname, argv, optstring, long_options, false);
}

GnuGetoptGetopt *new_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_(NSString *progname, IOSObjectArray *argv, NSString *optstring, IOSObjectArray *long_options) {
  J2OBJC_NEW_IMPL(GnuGetoptGetopt, initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_, progname, argv, optstring, long_options)
}

GnuGetoptGetopt *create_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_(NSString *progname, IOSObjectArray *argv, NSString *optstring, IOSObjectArray *long_options) {
  J2OBJC_CREATE_IMPL(GnuGetoptGetopt, initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_, progname, argv, optstring, long_options)
}

void GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_withBoolean_(GnuGetoptGetopt *self, NSString *progname, IOSObjectArray *argv, NSString *optstring, IOSObjectArray *long_options, jboolean long_only) {
  NSObject_init(self);
  self->optind__ = 0;
  self->opterr__ = true;
  self->optopt__ = '?';
  self->first_nonopt_ = 1;
  self->last_nonopt_ = 1;
  self->endparse_ = false;
  JreStrongAssign(&self->_messages_, JavaUtilResourceBundle_getBundleWithNSString_withJavaUtilLocale_(@"gnu/getopt/MessagesBundle", JavaUtilLocale_getDefault()));
  if ([((NSString *) nil_chk(optstring)) java_length] == 0) optstring = @" ";
  JreStrongAssign(&self->progname_, progname);
  JreStrongAssign(&self->argv_, argv);
  JreStrongAssign(&self->optstring_, optstring);
  JreStrongAssign(&self->long_options_, long_options);
  self->long_only_ = long_only;
  if (JavaLangSystem_getPropertyWithNSString_withNSString_(@"gnu.posixly_correct", nil) == nil) self->posixly_correct_ = false;
  else {
    self->posixly_correct_ = true;
    JreStrongAssign(&self->_messages_, JavaUtilResourceBundle_getBundleWithNSString_withJavaUtilLocale_(@"gnu/getopt/MessagesBundle", JreLoadStatic(JavaUtilLocale, US)));
  }
  if ([optstring charAtWithInt:0] == '-') {
    self->ordering_ = GnuGetoptGetopt_RETURN_IN_ORDER;
    if ([optstring java_length] > 1) JreStrongAssign(&self->optstring_, [optstring java_substring:1]);
  }
  else if ([optstring charAtWithInt:0] == '+') {
    self->ordering_ = GnuGetoptGetopt_REQUIRE_ORDER;
    if ([optstring java_length] > 1) JreStrongAssign(&self->optstring_, [optstring java_substring:1]);
  }
  else if (self->posixly_correct_) {
    self->ordering_ = GnuGetoptGetopt_REQUIRE_ORDER;
  }
  else {
    self->ordering_ = GnuGetoptGetopt_PERMUTE;
  }
}

GnuGetoptGetopt *new_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_withBoolean_(NSString *progname, IOSObjectArray *argv, NSString *optstring, IOSObjectArray *long_options, jboolean long_only) {
  J2OBJC_NEW_IMPL(GnuGetoptGetopt, initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_withBoolean_, progname, argv, optstring, long_options, long_only)
}

GnuGetoptGetopt *create_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_withBoolean_(NSString *progname, IOSObjectArray *argv, NSString *optstring, IOSObjectArray *long_options, jboolean long_only) {
  J2OBJC_CREATE_IMPL(GnuGetoptGetopt, initWithNSString_withNSStringArray_withNSString_withGnuGetoptLongOptArray_withBoolean_, progname, argv, optstring, long_options, long_only)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuGetoptGetopt)
