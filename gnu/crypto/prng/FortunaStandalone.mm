//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/gnu/crypto/prng/FortunaStandalone.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/crypto/prng/BasePRNGStandalone.h"
#include "gnu/crypto/prng/FortunaStandalone.h"
#include "gnu/crypto/prng/RandomEventStandalone.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/MessageDigest.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"
#include "net/i2p/crypto/CryptixAESKeyCache.h"
#include "net/i2p/crypto/CryptixRijndael_Algorithm.h"
#include "net/i2p/crypto/SHA256Generator.h"

@interface GnuCryptoPrngFortunaStandalone ()

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

inline jlong GnuCryptoPrngFortunaStandalone_get_serialVersionUID(void);
#define GnuCryptoPrngFortunaStandalone_serialVersionUID 16435934LL
J2OBJC_STATIC_FIELD_CONSTANT(GnuCryptoPrngFortunaStandalone, serialVersionUID, jlong)

inline jint GnuCryptoPrngFortunaStandalone_get_SEED_FILE_SIZE(void);
#define GnuCryptoPrngFortunaStandalone_SEED_FILE_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(GnuCryptoPrngFortunaStandalone, SEED_FILE_SIZE, jint)

__attribute__((unused)) static void GnuCryptoPrngFortunaStandalone_writeObjectWithJavaIoObjectOutputStream_(GnuCryptoPrngFortunaStandalone *self, JavaIoObjectOutputStream *outArg);

__attribute__((unused)) static void GnuCryptoPrngFortunaStandalone_readObjectWithJavaIoObjectInputStream_(GnuCryptoPrngFortunaStandalone *self, JavaIoObjectInputStream *inArg);

@interface GnuCryptoPrngFortunaStandalone_Generator () {
 @public
  JavaSecurityMessageDigest *hash__;
  IOSByteArray *counter_;
  IOSByteArray *key_;
  id cryptixKey_;
  NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *cryptixKeyBuf_;
  jboolean seeded_;
}

- (void)resetKey;

- (void)incrementCounter;

@end

J2OBJC_FIELD_SETTER(GnuCryptoPrngFortunaStandalone_Generator, hash__, JavaSecurityMessageDigest *)
J2OBJC_FIELD_SETTER(GnuCryptoPrngFortunaStandalone_Generator, counter_, IOSByteArray *)
J2OBJC_FIELD_SETTER(GnuCryptoPrngFortunaStandalone_Generator, key_, IOSByteArray *)
J2OBJC_FIELD_SETTER(GnuCryptoPrngFortunaStandalone_Generator, cryptixKey_, id)
J2OBJC_FIELD_SETTER(GnuCryptoPrngFortunaStandalone_Generator, cryptixKeyBuf_, NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *)

inline jint GnuCryptoPrngFortunaStandalone_Generator_get_LIMIT(void);
#define GnuCryptoPrngFortunaStandalone_Generator_LIMIT 1048576
J2OBJC_STATIC_FIELD_CONSTANT(GnuCryptoPrngFortunaStandalone_Generator, LIMIT, jint)

__attribute__((unused)) static void GnuCryptoPrngFortunaStandalone_Generator_resetKey(GnuCryptoPrngFortunaStandalone_Generator *self);

__attribute__((unused)) static void GnuCryptoPrngFortunaStandalone_Generator_incrementCounter(GnuCryptoPrngFortunaStandalone_Generator *self);

NSString *GnuCryptoPrngFortunaStandalone_SEED = @"gnu.crypto.prng.fortuna.seed";

@implementation GnuCryptoPrngFortunaStandalone

+ (jint)NUM_POOLS {
  return GnuCryptoPrngFortunaStandalone_NUM_POOLS;
}

+ (jint)MIN_POOL_SIZE {
  return GnuCryptoPrngFortunaStandalone_MIN_POOL_SIZE;
}

+ (NSString *)SEED {
  return GnuCryptoPrngFortunaStandalone_SEED;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GnuCryptoPrngFortunaStandalone_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)allocBuffer {
  JreVolatileStrongAssign(&buffer_, [IOSByteArray arrayWithLength:4 * 1024 * 1024]);
}

- (void)seedWithByteArray:(IOSByteArray *)val {
  id<JavaUtilMap> props = JavaUtilCollections_singletonMapWithId_withId_(GnuCryptoPrngFortunaStandalone_SEED, val);
  [self init__WithJavaUtilMap:props];
  [self fillBlock];
}

- (void)setupWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  lastReseed_ = 0;
  reseedCount_ = 0;
  pool_ = 0;
  pool0Count_ = 0;
  [((GnuCryptoPrngFortunaStandalone_Generator *) nil_chk(generator_)) init__WithJavaUtilMap:attributes];
}

- (void)fillBlock {
  if (pool0Count_ >= GnuCryptoPrngFortunaStandalone_MIN_POOL_SIZE && JavaLangSystem_currentTimeMillis() - lastReseed_ > 100) {
    reseedCount_++;
    for (jint i = 0; i < GnuCryptoPrngFortunaStandalone_NUM_POOLS; i++) {
      if (reseedCount_ % (JreLShift32(1, i)) == 0) {
        [((GnuCryptoPrngFortunaStandalone_Generator *) nil_chk(generator_)) addRandomBytesWithByteArray:[((JavaSecurityMessageDigest *) nil_chk(IOSObjectArray_Get(nil_chk(pools_), i))) digest]];
      }
    }
    lastReseed_ = JavaLangSystem_currentTimeMillis();
  }
  [((GnuCryptoPrngFortunaStandalone_Generator *) nil_chk(generator_)) nextBytesWithByteArray:JreLoadVolatileId(&buffer_)];
}

- (void)addRandomByteWithByte:(jbyte)b {
  [((JavaSecurityMessageDigest *) nil_chk(IOSObjectArray_Get(nil_chk(pools_), pool_))) updateWithByte:b];
  if (pool_ == 0) pool0Count_++;
  pool_ = (pool_ + 1) % GnuCryptoPrngFortunaStandalone_NUM_POOLS;
}

- (void)addRandomBytesWithByteArray:(IOSByteArray *)buf
                            withInt:(jint)offset
                            withInt:(jint)length {
  [((JavaSecurityMessageDigest *) nil_chk(IOSObjectArray_Get(nil_chk(pools_), pool_))) updateWithByteArray:buf withInt:offset withInt:length];
  if (pool_ == 0) pool0Count_ += length;
  pool_ = (pool_ + 1) % GnuCryptoPrngFortunaStandalone_NUM_POOLS;
}

- (void)addRandomEventWithGnuCryptoPrngRandomEventStandalone:(GnuCryptoPrngRandomEventStandalone *)event {
  if ([((GnuCryptoPrngRandomEventStandalone *) nil_chk(event)) getPoolNumber] < 0 || [event getPoolNumber] >= ((IOSObjectArray *) nil_chk(pools_))->size_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$B", @"pool number out of range: ", [event getPoolNumber]));
  [((JavaSecurityMessageDigest *) nil_chk(IOSObjectArray_Get(nil_chk(pools_), [event getPoolNumber]))) updateWithByte:[event getSourceNumber]];
  [((JavaSecurityMessageDigest *) nil_chk(IOSObjectArray_Get(pools_, [event getPoolNumber]))) updateWithByte:(jbyte) ((IOSByteArray *) nil_chk([event getData]))->size_];
  IOSByteArray *data = [event getData];
  [((JavaSecurityMessageDigest *) nil_chk(IOSObjectArray_Get(pools_, [event getPoolNumber]))) updateWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  if ([event getPoolNumber] == 0) pool0Count_ += ((IOSByteArray *) nil_chk([event getData]))->size_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  GnuCryptoPrngFortunaStandalone_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  GnuCryptoPrngFortunaStandalone_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)dealloc {
  RELEASE_(generator_);
  RELEASE_(pools_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(allocBuffer);
  methods[2].selector = @selector(seedWithByteArray:);
  methods[3].selector = @selector(setupWithJavaUtilMap:);
  methods[4].selector = @selector(fillBlock);
  methods[5].selector = @selector(addRandomByteWithByte:);
  methods[6].selector = @selector(addRandomBytesWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(addRandomEventWithGnuCryptoPrngRandomEventStandalone:);
  methods[8].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[9].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = GnuCryptoPrngFortunaStandalone_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "SEED_FILE_SIZE", "I", .constantValue.asInt = GnuCryptoPrngFortunaStandalone_SEED_FILE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "NUM_POOLS", "I", .constantValue.asInt = GnuCryptoPrngFortunaStandalone_NUM_POOLS, 0x18, -1, -1, -1, -1 },
    { "MIN_POOL_SIZE", "I", .constantValue.asInt = GnuCryptoPrngFortunaStandalone_MIN_POOL_SIZE, 0x18, -1, -1, -1, -1 },
    { "generator_", "LGnuCryptoPrngFortunaStandalone_Generator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "pools_", "[LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lastReseed_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pool_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pool0Count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "reseedCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "SEED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "seed", "[B", "setup", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;[B>;)V", "addRandomByte", "B", "addRandomBytes", "[BII", "addRandomEvent", "LGnuCryptoPrngRandomEventStandalone;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", &GnuCryptoPrngFortunaStandalone_SEED, "LGnuCryptoPrngFortunaStandalone_Generator;" };
  static const J2ObjcClassInfo _GnuCryptoPrngFortunaStandalone = { "FortunaStandalone", "gnu.crypto.prng", ptrTable, methods, fields, 7, 0x1, 10, 11, -1, 17, -1, -1, -1 };
  return &_GnuCryptoPrngFortunaStandalone;
}

@end

void GnuCryptoPrngFortunaStandalone_init(GnuCryptoPrngFortunaStandalone *self) {
  GnuCryptoPrngBasePRNGStandalone_initWithNSString_(self, @"Fortuna i2p");
  JreStrongAssignAndConsume(&self->generator_, new_GnuCryptoPrngFortunaStandalone_Generator_init());
  JreStrongAssignAndConsume(&self->pools_, [IOSObjectArray newArrayWithLength:GnuCryptoPrngFortunaStandalone_NUM_POOLS type:JavaSecurityMessageDigest_class_()]);
  for (jint i = 0; i < GnuCryptoPrngFortunaStandalone_NUM_POOLS; i++) IOSObjectArray_Set(self->pools_, i, NetI2pCryptoSHA256Generator_getDigestInstance());
  self->lastReseed_ = 0;
  self->pool_ = 0;
  self->pool0Count_ = 0;
  [self allocBuffer];
}

GnuCryptoPrngFortunaStandalone *new_GnuCryptoPrngFortunaStandalone_init() {
  J2OBJC_NEW_IMPL(GnuCryptoPrngFortunaStandalone, init)
}

GnuCryptoPrngFortunaStandalone *create_GnuCryptoPrngFortunaStandalone_init() {
  J2OBJC_CREATE_IMPL(GnuCryptoPrngFortunaStandalone, init)
}

void GnuCryptoPrngFortunaStandalone_writeObjectWithJavaIoObjectOutputStream_(GnuCryptoPrngFortunaStandalone *self, JavaIoObjectOutputStream *outArg) {
  IOSByteArray *seed = [IOSByteArray arrayWithLength:GnuCryptoPrngFortunaStandalone_SEED_FILE_SIZE];
  [((GnuCryptoPrngFortunaStandalone_Generator *) nil_chk(self->generator_)) nextBytesWithByteArray:seed];
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeWithByteArray:seed];
}

void GnuCryptoPrngFortunaStandalone_readObjectWithJavaIoObjectInputStream_(GnuCryptoPrngFortunaStandalone *self, JavaIoObjectInputStream *inArg) {
  IOSByteArray *seed = [IOSByteArray arrayWithLength:GnuCryptoPrngFortunaStandalone_SEED_FILE_SIZE];
  [((JavaIoObjectInputStream *) nil_chk(inArg)) readFullyWithByteArray:seed];
  [((GnuCryptoPrngFortunaStandalone_Generator *) nil_chk(self->generator_)) addRandomBytesWithByteArray:seed];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuCryptoPrngFortunaStandalone)

@implementation GnuCryptoPrngFortunaStandalone_Generator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GnuCryptoPrngFortunaStandalone_Generator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jbyte)nextByte {
  IOSByteArray *b = [IOSByteArray arrayWithLength:1];
  [self nextBytesWithByteArray:b withInt:0 withInt:1];
  return IOSByteArray_Get(b, 0);
}

- (void)nextBytesWithByteArray:(IOSByteArray *)outArg
                       withInt:(jint)offset
                       withInt:(jint)length {
  if (!seeded_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"generator not seeded");
  jint count = 0;
  do {
    jint amount = JavaLangMath_minWithInt_withInt_(GnuCryptoPrngFortunaStandalone_Generator_LIMIT, length - count);
    [super nextBytesWithByteArray:outArg withInt:offset + count withInt:amount];
    count += amount;
    for (jint i = 0; i < ((IOSByteArray *) nil_chk(key_))->size_; i += ((IOSByteArray *) nil_chk(counter_))->size_) {
      NetI2pCryptoCryptixRijndael_Algorithm_blockEncryptWithByteArray_withByteArray_withInt_withInt_withId_(counter_, JreLoadVolatileId(&buffer_), 0, 0, cryptixKey_);
      GnuCryptoPrngFortunaStandalone_Generator_incrementCounter(self);
      jint l = JavaLangMath_minWithInt_withInt_(key_->size_ - i, 16);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(JreLoadVolatileId(&buffer_), 0, key_, i, l);
    }
    GnuCryptoPrngFortunaStandalone_Generator_resetKey(self);
  }
  while (count < length);
  NetI2pCryptoCryptixRijndael_Algorithm_blockEncryptWithByteArray_withByteArray_withInt_withInt_withId_(counter_, JreLoadVolatileId(&buffer_), 0, 0, cryptixKey_);
  GnuCryptoPrngFortunaStandalone_Generator_incrementCounter(self);
  ndx_ = 0;
}

- (void)addRandomByteWithByte:(jbyte)b {
  [self addRandomBytesWithByteArray:[IOSByteArray arrayWithBytes:(jbyte[]){ b } count:1]];
}

- (void)addRandomBytesWithByteArray:(IOSByteArray *)seed
                            withInt:(jint)offset
                            withInt:(jint)length {
  [((JavaSecurityMessageDigest *) nil_chk(hash__)) updateWithByteArray:key_ withInt:0 withInt:((IOSByteArray *) nil_chk(key_))->size_];
  [hash__ updateWithByteArray:seed withInt:offset withInt:length];
  IOSByteArray *newkey = [hash__ digest];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(newkey, 0, key_, 0, JavaLangMath_minWithInt_withInt_(key_->size_, ((IOSByteArray *) nil_chk(newkey))->size_));
  GnuCryptoPrngFortunaStandalone_Generator_resetKey(self);
  GnuCryptoPrngFortunaStandalone_Generator_incrementCounter(self);
  seeded_ = true;
}

- (void)fillBlock {
  NetI2pCryptoCryptixRijndael_Algorithm_blockEncryptWithByteArray_withByteArray_withInt_withInt_withId_(counter_, JreLoadVolatileId(&buffer_), 0, 0, cryptixKey_);
  GnuCryptoPrngFortunaStandalone_Generator_incrementCounter(self);
}

- (void)setupWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  seeded_ = false;
  JavaUtilArrays_fillWithByteArray_withByte_(key_, (jbyte) 0);
  JavaUtilArrays_fillWithByteArray_withByte_(counter_, (jbyte) 0);
  IOSByteArray *seed = [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:GnuCryptoPrngFortunaStandalone_SEED];
  if (seed != nil) [self addRandomBytesWithByteArray:seed];
}

- (void)resetKey {
  GnuCryptoPrngFortunaStandalone_Generator_resetKey(self);
}

- (void)incrementCounter {
  GnuCryptoPrngFortunaStandalone_Generator_incrementCounter(self);
}

- (void)dealloc {
  RELEASE_(hash__);
  RELEASE_(counter_);
  RELEASE_(key_);
  RELEASE_(cryptixKey_);
  RELEASE_(cryptixKeyBuf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nextByte);
  methods[2].selector = @selector(nextBytesWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(addRandomByteWithByte:);
  methods[4].selector = @selector(addRandomBytesWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(fillBlock);
  methods[6].selector = @selector(setupWithJavaUtilMap:);
  methods[7].selector = @selector(resetKey);
  methods[8].selector = @selector(incrementCounter);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LIMIT", "I", .constantValue.asInt = GnuCryptoPrngFortunaStandalone_Generator_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "hash__", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x12, 8, -1, -1, -1 },
    { "counter_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cryptixKey_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cryptixKeyBuf_", "LNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seeded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "nextBytes", "[BII", "addRandomByte", "B", "addRandomBytes", "setup", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;[B>;)V", "hash", "LGnuCryptoPrngFortunaStandalone;" };
  static const J2ObjcClassInfo _GnuCryptoPrngFortunaStandalone_Generator = { "Generator", "gnu.crypto.prng", ptrTable, methods, fields, 7, 0x9, 9, 7, 9, -1, -1, -1, -1 };
  return &_GnuCryptoPrngFortunaStandalone_Generator;
}

@end

void GnuCryptoPrngFortunaStandalone_Generator_init(GnuCryptoPrngFortunaStandalone_Generator *self) {
  GnuCryptoPrngBasePRNGStandalone_initWithNSString_(self, @"Fortuna.generator.i2p");
  JreStrongAssign(&self->hash__, NetI2pCryptoSHA256Generator_getDigestInstance());
  JreStrongAssignAndConsume(&self->counter_, [IOSByteArray newArrayWithLength:16]);
  JreVolatileStrongAssign(&self->buffer_, [IOSByteArray arrayWithLength:16]);
  jint keysize = 32;
  JreStrongAssignAndConsume(&self->key_, [IOSByteArray newArrayWithLength:keysize]);
  JreStrongAssign(&self->cryptixKeyBuf_, NetI2pCryptoCryptixAESKeyCache_createNew());
}

GnuCryptoPrngFortunaStandalone_Generator *new_GnuCryptoPrngFortunaStandalone_Generator_init() {
  J2OBJC_NEW_IMPL(GnuCryptoPrngFortunaStandalone_Generator, init)
}

GnuCryptoPrngFortunaStandalone_Generator *create_GnuCryptoPrngFortunaStandalone_Generator_init() {
  J2OBJC_CREATE_IMPL(GnuCryptoPrngFortunaStandalone_Generator, init)
}

void GnuCryptoPrngFortunaStandalone_Generator_resetKey(GnuCryptoPrngFortunaStandalone_Generator *self) {
  @try {
    JreStrongAssign(&self->cryptixKey_, NetI2pCryptoCryptixRijndael_Algorithm_makeKeyWithByteArray_withInt_withNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_(self->key_, 16, self->cryptixKeyBuf_));
  }
  @catch (JavaSecurityInvalidKeyException *ike) {
    @throw create_JavaLangError_initWithNSString_withJavaLangThrowable_(@"hrmf", ike);
  }
}

void GnuCryptoPrngFortunaStandalone_Generator_incrementCounter(GnuCryptoPrngFortunaStandalone_Generator *self) {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(self->counter_))->size_; i++) {
    (*IOSByteArray_GetRef(self->counter_, i))++;
    if (IOSByteArray_Get(self->counter_, i) != 0) break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuCryptoPrngFortunaStandalone_Generator)
