//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/gnu/crypto/prng/RandomEventStandalone.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/crypto/prng/RandomEventStandalone.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/EventObject.h"

@interface GnuCryptoPrngRandomEventStandalone () {
 @public
  jbyte sourceNumber_;
  jbyte poolNumber_;
  IOSByteArray *data_;
}

@end

J2OBJC_FIELD_SETTER(GnuCryptoPrngRandomEventStandalone, data_, IOSByteArray *)

@implementation GnuCryptoPrngRandomEventStandalone

- (instancetype)initWithId:(id)source
                  withByte:(jbyte)sourceNumber
                  withByte:(jbyte)poolNumber
             withByteArray:(IOSByteArray *)data {
  GnuCryptoPrngRandomEventStandalone_initWithId_withByte_withByte_withByteArray_(self, source, sourceNumber, poolNumber, data);
  return self;
}

- (jbyte)getSourceNumber {
  return sourceNumber_;
}

- (jbyte)getPoolNumber {
  return poolNumber_;
}

- (IOSByteArray *)getData {
  return data_;
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withByte:withByte:withByteArray:);
  methods[1].selector = @selector(getSourceNumber);
  methods[2].selector = @selector(getPoolNumber);
  methods[3].selector = @selector(getData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sourceNumber_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "poolNumber_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "data_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;BB[B" };
  static const J2ObjcClassInfo _GnuCryptoPrngRandomEventStandalone = { "RandomEventStandalone", "gnu.crypto.prng", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_GnuCryptoPrngRandomEventStandalone;
}

@end

void GnuCryptoPrngRandomEventStandalone_initWithId_withByte_withByte_withByteArray_(GnuCryptoPrngRandomEventStandalone *self, id source, jbyte sourceNumber, jbyte poolNumber, IOSByteArray *data) {
  JavaUtilEventObject_initWithId_(self, source);
  self->sourceNumber_ = sourceNumber;
  self->poolNumber_ = poolNumber;
  if (((IOSByteArray *) nil_chk(data))->size_ == 0 || data->size_ > 32) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"random events take between 1 and 32 bytes of data");
  JreStrongAssign(&self->data_, [data java_clone]);
}

GnuCryptoPrngRandomEventStandalone *new_GnuCryptoPrngRandomEventStandalone_initWithId_withByte_withByte_withByteArray_(id source, jbyte sourceNumber, jbyte poolNumber, IOSByteArray *data) {
  J2OBJC_NEW_IMPL(GnuCryptoPrngRandomEventStandalone, initWithId_withByte_withByte_withByteArray_, source, sourceNumber, poolNumber, data)
}

GnuCryptoPrngRandomEventStandalone *create_GnuCryptoPrngRandomEventStandalone_initWithId_withByte_withByte_withByteArray_(id source, jbyte sourceNumber, jbyte poolNumber, IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(GnuCryptoPrngRandomEventStandalone, initWithId_withByte_withByte_withByteArray_, source, sourceNumber, poolNumber, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuCryptoPrngRandomEventStandalone)
