//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/gnu/crypto/prng/BasePRNGStandalone.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/crypto/prng/BasePRNGStandalone.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Map.h"

@interface GnuCryptoPrngBasePRNGStandalone ()

- (jbyte)nextByteInternal;

@end

__attribute__((unused)) static jbyte GnuCryptoPrngBasePRNGStandalone_nextByteInternal(GnuCryptoPrngBasePRNGStandalone *self);

@implementation GnuCryptoPrngBasePRNGStandalone

- (instancetype)initWithNSString:(NSString *)name {
  GnuCryptoPrngBasePRNGStandalone_initWithNSString_(self, name);
  return self;
}

- (NSString *)name {
  return name_;
}

- (void)init__WithJavaUtilMap:(id<JavaUtilMap>)attributes {
  [self setupWithJavaUtilMap:attributes];
  ndx_ = 0;
  JreAssignVolatileBoolean(&initialised_, true);
}

- (jbyte)nextByte {
  if (!JreLoadVolatileBoolean(&initialised_)) {
    @throw create_JavaLangIllegalStateException_init();
  }
  return GnuCryptoPrngBasePRNGStandalone_nextByteInternal(self);
}

- (void)nextBytesWithByteArray:(IOSByteArray *)outArg {
  [self nextBytesWithByteArray:outArg withInt:0 withInt:((IOSByteArray *) nil_chk(outArg))->size_];
}

- (void)nextBytesWithByteArray:(IOSByteArray *)outArg
                       withInt:(jint)offset
                       withInt:(jint)length {
  if (!JreLoadVolatileBoolean(&initialised_)) @throw create_JavaLangIllegalStateException_initWithNSString_(@"not initialized");
  if (length == 0) return;
  if (offset < 0 || length < 0 || offset + length > ((IOSByteArray *) nil_chk(outArg))->size_) @throw create_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I$I", @"offset=", offset, @" length=", length, @" limit=", ((IOSByteArray *) nil_chk(outArg))->size_));
  if (JreLoadVolatileId(&buffer_) == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Random is shut down - do you have a static ref?");
  if (ndx_ >= ((IOSByteArray *) nil_chk(JreLoadVolatileId(&buffer_)))->size_) {
    [self fillBlock];
    ndx_ = 0;
  }
  jint count = 0;
  while (count < length) {
    jint amount = JavaLangMath_minWithInt_withInt_(((IOSByteArray *) nil_chk(JreLoadVolatileId(&buffer_)))->size_ - ndx_, length - count);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(JreLoadVolatileId(&buffer_), ndx_, outArg, offset + count, amount);
    count += amount;
    ndx_ += amount;
    if (ndx_ >= ((IOSByteArray *) nil_chk(JreLoadVolatileId(&buffer_)))->size_) {
      [self fillBlock];
      ndx_ = 0;
    }
  }
}

- (void)addRandomByteWithByte:(jbyte)b {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"random state is non-modifiable");
}

- (void)addRandomBytesWithByteArray:(IOSByteArray *)buffer {
  [self addRandomBytesWithByteArray:buffer withInt:0 withInt:((IOSByteArray *) nil_chk(buffer))->size_];
}

- (void)addRandomBytesWithByteArray:(IOSByteArray *)buffer
                            withInt:(jint)offset
                            withInt:(jint)length {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"random state is non-modifiable");
}

- (jboolean)isInitialised {
  return JreLoadVolatileBoolean(&initialised_);
}

- (jbyte)nextByteInternal {
  return GnuCryptoPrngBasePRNGStandalone_nextByteInternal(self);
}

- (id)java_clone {
  return [super java_clone];
}

- (void)setupWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)fillBlock {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)clone {
  return [self java_clone];
}

- (void)__javaClone:(GnuCryptoPrngBasePRNGStandalone *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&buffer_, &original->buffer_);
}

- (void)dealloc {
  RELEASE_(name_);
  JreReleaseVolatile(&buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x401, 13, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(name);
  methods[2].selector = @selector(init__WithJavaUtilMap:);
  methods[3].selector = @selector(nextByte);
  methods[4].selector = @selector(nextBytesWithByteArray:);
  methods[5].selector = @selector(nextBytesWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(addRandomByteWithByte:);
  methods[7].selector = @selector(addRandomBytesWithByteArray:);
  methods[8].selector = @selector(addRandomBytesWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(isInitialised);
  methods[10].selector = @selector(nextByteInternal);
  methods[11].selector = @selector(java_clone);
  methods[12].selector = @selector(setupWithJavaUtilMap:);
  methods[13].selector = @selector(fillBlock);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "ndx_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "init", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;[B>;)V", "LJavaLangIllegalStateException;", "nextBytes", "[B", "[BII", "addRandomByte", "B", "addRandomBytes", "clone", "LJavaLangCloneNotSupportedException;", "setup" };
  static const J2ObjcClassInfo _GnuCryptoPrngBasePRNGStandalone = { "BasePRNGStandalone", "gnu.crypto.prng", ptrTable, methods, fields, 7, 0x401, 14, 4, -1, -1, -1, -1, -1 };
  return &_GnuCryptoPrngBasePRNGStandalone;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void GnuCryptoPrngBasePRNGStandalone_initWithNSString_(GnuCryptoPrngBasePRNGStandalone *self, NSString *name) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
  JreVolatileStrongAssign(&self->buffer_, [IOSByteArray arrayWithLength:0]);
}

jbyte GnuCryptoPrngBasePRNGStandalone_nextByteInternal(GnuCryptoPrngBasePRNGStandalone *self) {
  if (JreLoadVolatileId(&self->buffer_) == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Random is shut down - do you have a static ref?");
  if (self->ndx_ >= ((IOSByteArray *) nil_chk(JreLoadVolatileId(&self->buffer_)))->size_) {
    [self fillBlock];
    self->ndx_ = 0;
  }
  return IOSByteArray_Get(nil_chk(JreLoadVolatileId(&self->buffer_)), self->ndx_++);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuCryptoPrngBasePRNGStandalone)
